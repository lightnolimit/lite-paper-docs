{
  "generated": "2025-07-14T15:55:10.498Z",
  "content": {
    "getting-started/introduction": "# Welcome to Your Documentation Site\n\nThis is a **modern, interactive documentation template** built with Next.js 15, featuring an innovative Obsidian-style mindmap visualization and a beautiful, responsive design.\n\n## What This Template Provides\n\nThis documentation site template offers:\n\n- **📚 Modern Documentation Framework**: Built with Next.js 15 and TypeScript\n- **🎨 Beautiful UI**: Clean, responsive design with dark/light mode support\n- **🧭 Interactive Navigation**: File tree sidebar with mindmap visualization\n- **⚡ Fast Performance**: Optimized for speed with static generation\n- **🔍 Smart Search**: Built-in search functionality\n- **📱 Mobile-First**: Responsive design that works on all devices\n- **🎭 Background Animations**: Dynamic visual effects to enhance user experience\n\n## Key Features\n\n### Interactive Mindmap\n\nOur unique documentation graph shows the relationships between your content pages, inspired by Obsidian's graph view. Navigate your documentation visually and discover connections between related topics.\n\n### Flexible Content Structure\n\nOrganize your documentation with a hierarchical structure:\n\n- **Getting Started**: Onboarding and quick setup\n- **User Guides**: Detailed usage instructions\n- **API Reference**: Technical documentation\n- **Developer Resources**: Code examples and best practices\n- **Deployment**: Platform-specific deployment guides\n\n### Easy Customization\n\n- Modify content by editing markdown files\n- Customize styling through CSS variables\n- Add new sections through the data structure\n- Deploy anywhere (Cloudflare, Vercel, Netlify)\n\n## Perfect For\n\nThis template is ideal for:\n\n- **Product Documentation**: Software and API docs\n- **Knowledge Bases**: Internal team documentation\n- **Project Wikis**: Open source project documentation\n- **Personal Blogs**: Technical writing and tutorials\n- **Educational Content**: Course materials and guides\n\nReady to get started? Check out the [Quick Start Guide](./quick-start) to set up your documentation site in minutes!\n\n## Features\n\nOur documentation template includes:\n\n- 🎨 Modern, responsive design\n- 🔍 Fast search functionality\n- 📱 Mobile-friendly interface\n- 🌙 Dark/light mode support\n- 📊 Interactive elements\n- 🔗 Cross-references and links\n\n## Getting Help\n\nIf you need assistance:\n\n1. Check the troubleshooting guide\n2. Search our documentation\n3. Reach out to our support team\n\n---\n\n_This template is designed to be customized for your specific project needs._\n",
    "getting-started/quick-start": "# Quick Start Guide\n\nGet your documentation site up and running in just a few minutes! This guide will walk you through cloning the template, customizing it, and deploying it.\n\n## Prerequisites\n\nBefore you begin, make sure you have:\n\n- **Node.js 18+** installed on your system\n- **npm** or **yarn** package manager\n- A **Git** client for version control\n- A **GitHub** account (for deployment automation)\n\n## Step 1: Clone the Template\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-username/documentation-template.git\ncd documentation-template\n\n# Install dependencies\nnpm install\n```\n\n## Step 2: Start Development Server\n\n```bash\n# Start the development server\nnpm run dev\n\n# Your site will be available at:\n# http://localhost:3000\n```\n\nThe development server includes:\n\n- **Hot reload** for instant updates\n- **Error overlay** for debugging\n- **TypeScript checking** in real-time\n\n## Step 3: Customize Your Content\n\n### Update Site Configuration\n\nEdit the main configuration in `app/data/documentation.ts`:\n\n```typescript\nexport const documentationTree: FileItem[] = [\n  {\n    type: 'directory',\n    name: 'Your Section Name',\n    path: 'your-section',\n    children: [\n      {\n        type: 'file',\n        name: 'Your Page.md',\n        path: 'your-section/your-page',\n      },\n    ],\n  },\n];\n```\n\n### Create Your Content\n\nAdd markdown files in `app/docs/content/`:\n\n```markdown\n# Your Page Title\n\nYour content here! You can use:\n\n- Standard markdown syntax\n- Code blocks with syntax highlighting\n- Tables, lists, and links\n- Images and media\n```\n\n### Customize Styling\n\nModify the visual appearance:\n\n- **Colors**: Edit CSS variables in `app/globals.css`\n- **Fonts**: Update font imports and CSS\n- **Layout**: Modify component styling\n- **Animations**: Adjust motion components\n\n## Step 4: Test Your Changes\n\nBefore deploying, test your site:\n\n```bash\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n```\n\nVerify that:\n\n- ✅ All pages load correctly\n- ✅ Navigation works properly\n- ✅ Mindmap displays your content\n- ✅ Responsive design works on mobile\n- ✅ Dark/light mode toggles correctly\n\n## Step 5: Deploy to Cloudflare\n\nThe easiest way to deploy is using Cloudflare Pages:\n\n1. **Connect Repository**\n   - Go to [Cloudflare Pages](https://pages.cloudflare.com)\n   - Connect your GitHub repository\n\n2. **Configure Build**\n\n   ```\n   Build command: npm run build\n   Build directory: .next\n   Node.js version: 18+\n   ```\n\n3. **Deploy**\n   - Cloudflare will automatically build and deploy\n   - Your site will be live at `your-project.pages.dev`\n\n## Alternative Deployment Options\n\n### Vercel\n\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy\nvercel\n```\n\n### Netlify\n\n```bash\n# Install Netlify CLI\nnpm i -g netlify-cli\n\n# Deploy\nnetlify deploy --prod\n```\n\n### Static Export\n\nFor static hosting:\n\n```bash\n# Build static version\nnpm run build && npm run export\n```\n\n## What's Next?\n\nNow that your documentation site is running:\n\n1. 📖 Read the [Installation Guide](./installation) for detailed setup\n2. 📚 Check the [User Guide](../user-guide/basic-usage) for content management\n3. 🚀 Explore [Deployment Options](../../deployment/overview) for production setup\n4. 🛠️ Browse [Developer Guides](../../developer-guides/code-examples) for advanced customization\n\nNeed help? Every section in this documentation includes detailed examples and troubleshooting tips!\n",
    "getting-started/installation": "# Installation Guide\n\nThis comprehensive guide covers everything you need to know to install and set up your documentation site template.\n\n## System Requirements\n\n### Minimum Requirements\n\n- **Node.js**: Version 18.0 or higher\n- **RAM**: 4GB minimum (8GB recommended)\n- **Storage**: 1GB free space\n- **OS**: Windows 10+, macOS 10.15+, or Linux (Ubuntu 18.04+)\n\n### Recommended Development Environment\n\n- **Node.js**: Latest LTS version (20.x)\n- **Package Manager**: npm 9+ or yarn 3+\n- **Editor**: VS Code with TypeScript and React extensions\n- **Terminal**: Modern shell (zsh, fish, or PowerShell)\n\n## Prerequisites\n\n### 1. Install Node.js\n\nChoose your installation method:\n\n**Option A: Official Installer**\n\n```bash\n# Download from https://nodejs.org\n# Verify installation\nnode --version  # Should be v18.0.0 or higher\nnpm --version   # Should be 9.0.0 or higher\n```\n\n**Option B: Node Version Manager (Recommended)**\n\n```bash\n# Install nvm (macOS/Linux)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# Install and use Node.js LTS\nnvm install --lts\nnvm use --lts\n```\n\n**Option C: Package Managers**\n\n```bash\n# macOS with Homebrew\nbrew install node\n\n# Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install nodejs npm\n\n# Windows with Chocolatey\nchoco install nodejs\n```\n\n### 2. Install Git\n\n```bash\n# macOS with Homebrew\nbrew install git\n\n# Ubuntu/Debian\nsudo apt-get install git\n\n# Windows\n# Download from https://git-scm.com/download/win\n```\n\n### 3. Set Up Your Environment\n\n```bash\n# Configure Git (first time only)\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Verify Git installation\ngit --version\n```\n\n## Installation Methods\n\n### Method 1: Clone from GitHub (Recommended)\n\n```bash\n# 1. Clone the repository\ngit clone https://github.com/your-username/documentation-template.git\ncd documentation-template\n\n# 2. Install dependencies\nnpm install\n\n# 3. Start development server\nnpm run dev\n```\n\n### Method 2: Fork and Clone\n\n```bash\n# 1. Fork the repository on GitHub (click \"Fork\" button)\n# 2. Clone your fork\ngit clone https://github.com/YOUR_USERNAME/documentation-template.git\ncd documentation-template\n\n# 3. Add upstream remote (for updates)\ngit remote add upstream https://github.com/original-owner/documentation-template.git\n\n# 4. Install dependencies\nnpm install\n```\n\n### Method 3: Download ZIP\n\n```bash\n# 1. Download ZIP from GitHub\n# 2. Extract to your desired location\n# 3. Open terminal in extracted folder\ncd documentation-template-main\n\n# 4. Install dependencies\nnpm install\n```\n\n## Project Structure\n\nAfter installation, your project structure will look like this:\n\n```\ndocumentation-template/\n├── app/                          # Next.js app directory\n│   ├── components/              # React components\n│   │   ├── DocumentationGraph.tsx  # Interactive mindmap\n│   │   ├── FileTree.tsx         # Navigation sidebar\n│   │   └── ...                  # Other components\n│   ├── docs/                    # Documentation system\n│   │   ├── content/             # Markdown content files\n│   │   └── components/          # Doc-specific components\n│   ├── data/                    # Configuration data\n│   │   └── documentation.ts     # Site structure\n│   └── globals.css              # Global styles\n├── public/                      # Static assets\n│   └── assets/                  # Images, icons, etc.\n├── .next/                       # Build output (auto-generated)\n├── package.json                 # Dependencies and scripts\n├── next.config.js               # Next.js configuration\n├── tailwind.config.js           # Tailwind CSS config\n└── tsconfig.json                # TypeScript configuration\n```\n\n## Configuration\n\n### 1. Environment Variables\n\nCreate a `.env.local` file in the root directory:\n\n```bash\n# .env.local\nNEXT_PUBLIC_SITE_NAME=\"Your Documentation Site\"\nNEXT_PUBLIC_SITE_URL=\"https://your-domain.com\"\nNEXT_PUBLIC_GITHUB_URL=\"https://github.com/your-username/your-repo\"\n```\n\n### 2. Site Configuration\n\nEdit `app/data/documentation.ts` to customize your site structure:\n\n```typescript\nexport const documentationTree: FileItem[] = [\n  {\n    type: 'directory',\n    name: 'Getting Started',\n    path: 'getting-started',\n    children: [\n      {\n        type: 'file',\n        name: 'Introduction.md',\n        path: 'getting-started/introduction',\n      },\n      // Add more files...\n    ],\n  },\n  // Add more sections...\n];\n```\n\n### 3. Styling Configuration\n\nCustomize colors and theme in `app/globals.css`:\n\n```css\n:root {\n  --primary-color: #3b82f6; /* Blue */\n  --secondary-color: #64748b; /* Gray */\n  --accent-color: #10b981; /* Green */\n  --background-color: #ffffff; /* White */\n  --text-color: #1f2937; /* Dark Gray */\n}\n\n[data-theme='dark'] {\n  --background-color: #111827; /* Dark */\n  --text-color: #f9fafb; /* Light Gray */\n}\n```\n\n## Available Scripts\n\nOnce installed, you can use these npm scripts:\n\n```bash\n# Development\nnpm run dev          # Start development server\nnpm run build        # Build for production\nnpm run start        # Start production server\nnpm run lint         # Run ESLint\nnpm run type-check   # Run TypeScript checks\n\n# Deployment\nnpm run export       # Export static files\nnpm run analyze      # Analyze bundle size\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**Issue**: `Cannot find module` errors\n\n```bash\n# Solution: Clear cache and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**Issue**: TypeScript errors during build\n\n```bash\n# Solution: Check TypeScript configuration\nnpm run type-check\n```\n\n**Issue**: Port already in use\n\n```bash\n# Solution: Use different port\nnpm run dev -- --port 3001\n```\n\n**Issue**: Permission errors (macOS/Linux)\n\n```bash\n# Solution: Fix npm permissions\nsudo chown -R $(whoami) ~/.npm\n```\n\n### Development Tips\n\n1. **Use TypeScript**: The template is fully typed for better development experience\n2. **Hot Reload**: Changes to components and content update automatically\n3. **Error Overlay**: Development server shows helpful error messages\n4. **Browser Dev Tools**: Use React Developer Tools for debugging\n\n### Performance Optimization\n\n```bash\n# Enable SWC compiler (faster builds)\n# Already configured in next.config.js\n\n# Analyze bundle size\nnpm run analyze\n\n# Optimize images\n# Use next/image component for automatic optimization\n```\n\n## Verification\n\nVerify your installation is working correctly:\n\n```bash\n# 1. Start development server\nnpm run dev\n\n# 2. Open browser to http://localhost:3000\n# 3. Check that all features work:\n#    - Navigation sidebar\n#    - Mindmap visualization\n#    - Dark/light mode toggle\n#    - Responsive design\n```\n\n## Next Steps\n\nYour installation is complete! Here's what to do next:\n\n1. 📝 **Customize Content**: Add your own markdown files\n2. 🎨 **Style Your Site**: Modify colors and layout\n3. 🚀 **Deploy**: Choose your hosting platform\n4. 📊 **Analytics**: Add tracking if needed\n\nContinue to the [Quick Start Guide](./quick-start) to begin customizing your site!\n",
    "user-guide/basic-usage": "# Basic Usage\n\nLearn how to create and manage content in your documentation site template. This guide covers the essential tasks you'll need to get your documentation up and running.\n\n## Content Management\n\n### Understanding the Structure\n\nYour documentation site uses a **hierarchical structure** defined in `app/data/documentation.ts`:\n\n```typescript\nexport const documentationTree: FileItem[] = [\n  {\n    type: 'directory', // Section folder\n    name: 'Getting Started', // Display name\n    path: 'getting-started', // URL path\n    children: [\n      // Files in this section\n      {\n        type: 'file',\n        name: 'Introduction.md',\n        path: 'getting-started/introduction',\n      },\n    ],\n  },\n];\n```\n\n### Creating New Content\n\n#### 1. Add a New Section\n\nTo add a new documentation section:\n\n```typescript\n// In app/data/documentation.ts\n{\n  type: 'directory',\n  name: 'Your New Section',\n  path: 'your-new-section',\n  children: [\n    {\n      type: 'file',\n      name: 'Overview.md',\n      path: 'your-new-section/overview'\n    }\n  ]\n}\n```\n\n#### 2. Create the Content File\n\nCreate the corresponding markdown file:\n\n```bash\n# Create the directory\nmkdir -p app/docs/content/your-new-section\n\n# Create the markdown file\ntouch app/docs/content/your-new-section/overview.md\n```\n\n#### 3. Write Your Content\n\n```markdown\n# Overview\n\nWelcome to your new section! You can use:\n\n- **Headers** for structure\n- **Lists** for organization\n- **Code blocks** for examples\n- **Links** to other pages\n- **Images** and media\n\n## Subsection\n\nYour content here...\n```\n\n### Content File Locations\n\nAll content files are stored in `app/docs/content/` with paths matching your configuration:\n\n```\napp/docs/content/\n├── getting-started/\n│   ├── introduction.md\n│   ├── quick-start.md\n│   └── installation.md\n├── user-guide/\n│   ├── basic-usage.md\n│   ├── advanced-features.md\n│   └── configuration.md\n└── your-new-section/\n    └── overview.md\n```\n\n## Navigation Features\n\n### File Tree Sidebar\n\nThe left sidebar shows your documentation structure:\n\n- **📁 Directories** - Expandable sections\n- **📄 Files** - Individual pages\n- **🎯 Current Page** - Highlighted in the tree\n- **🔍 Search** - Type to filter content\n\n### Interactive Mindmap\n\nThe **Documentation Map** at the bottom of the sidebar:\n\n- **Visual Navigation** - See page relationships\n- **Node Colors** - Files (purple) vs directories (blue)\n- **Current Page** - Highlighted with pulsing border\n- **Click to Navigate** - Click any node to jump to that page\n- **Connected Pages** - Shows related content links\n\n### Breadcrumb Navigation\n\nAt the top of each page:\n\n- Shows your current location\n- Click any segment to navigate up\n- Automatically generated from file structure\n\n## Writing Content\n\n### Markdown Syntax\n\nYour content supports full Markdown syntax:\n\n````markdown\n# H1 Header\n\n## H2 Header\n\n### H3 Header\n\n**Bold text** and _italic text_\n\n- Unordered lists\n\n1. Ordered lists\n\n`inline code` and code blocks:\n\n```javascript\nfunction example() {\n  return 'Hello, world!';\n}\n```\n````\n\n[Links](./other-page) to other pages\n\n![Images](./image.png) with alt text\n\n````\n\n### Code Blocks with Syntax Highlighting\n\nSupport for multiple languages:\n\n```typescript\n// TypeScript\ninterface User {\n  name: string;\n  email: string;\n}\n````\n\n```bash\n# Bash commands\nnpm install\nnpm run dev\n```\n\n```css\n/* CSS styling */\n.my-class {\n  color: blue;\n  font-size: 16px;\n}\n```\n\n### Linking Between Pages\n\nUse relative paths to link between documentation pages:\n\n```markdown\n<!-- Link to other pages -->\n\n[Installation Guide](./installation)\n[User Guide](../user-guide/basic-usage)\n[API Reference](../../api-reference/overview)\n\n<!-- Link to sections within a page -->\n\n[Go to Content Management](#content-management)\n```\n\n### Adding Images\n\nStore images in the `public/assets/` directory:\n\n```markdown\n![Documentation Screenshot](/assets/images/screenshot.png)\n![Diagram](/assets/diagrams/flow-chart.svg)\n```\n\n## Customization\n\n### Theme and Styling\n\n#### Color Scheme\n\nModify colors in `app/globals.css`:\n\n```css\n:root {\n  --primary-color: #3b82f6; /* Blue */\n  --secondary-color: #64748b; /* Gray */\n  --accent-color: #10b981; /* Green */\n}\n\n[data-theme='dark'] {\n  --primary-color: #60a5fa; /* Lighter blue for dark mode */\n}\n```\n\n#### Typography\n\nChange fonts and text styling:\n\n```css\n:root {\n  --font-family: 'Inter', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --font-size-base: 16px;\n  --line-height: 1.6;\n}\n```\n\n### Background Animations\n\nToggle between different background effects in the settings menu:\n\n- **Wave** - Animated wave patterns\n- **Geometric** - Moving geometric shapes\n- **Particles** - Floating particle system\n- **Grid** - Animated grid overlay\n- **None** - Solid color background\n\n### Mobile Responsiveness\n\nThe template is fully responsive:\n\n- **Mobile-first design**\n- **Collapsible sidebar** on small screens\n- **Touch-friendly navigation**\n- **Optimized fonts and spacing**\n\n## Content Organization Tips\n\n### Best Practices\n\n1. **Logical Hierarchy**\n\n   ```\n   Getting Started → User Guide → Advanced Features → API Reference\n   ```\n\n2. **Clear Naming**\n   - Use descriptive section names\n   - Keep file names concise but clear\n   - Use kebab-case for paths\n\n3. **Cross-references**\n   - Link related topics together\n   - Create \"See also\" sections\n   - Use the mindmap to visualize connections\n\n4. **Progressive Disclosure**\n   - Start with basics in \"Getting Started\"\n   - Build complexity gradually\n   - Reference advanced topics from basics\n\n### Content Templates\n\n#### New Feature Documentation\n\n```markdown\n# Feature Name\n\nBrief description of what this feature does.\n\n## When to Use\n\nExplain the use cases and scenarios.\n\n## How to Use\n\nStep-by-step instructions.\n\n## Examples\n\nPractical examples with code.\n\n## Troubleshooting\n\nCommon issues and solutions.\n\n## Related Topics\n\n- [Link to related feature](./related)\n- [Link to API reference](../api/endpoint)\n```\n\n#### Tutorial Template\n\n```markdown\n# Tutorial: Doing Something\n\nWhat you'll learn and accomplish.\n\n## Prerequisites\n\nWhat readers need before starting.\n\n## Step-by-Step Guide\n\n### Step 1: Setup\n\nInstructions...\n\n### Step 2: Implementation\n\nCode examples...\n\n### Step 3: Testing\n\nVerification steps...\n\n## Next Steps\n\nWhere to go from here.\n```\n\n## Publishing Workflow\n\n### Local Development\n\n```bash\n# Make your changes\nnpm run dev\n\n# Test your content\n# Preview in browser at localhost:3000\n\n# Check for build errors\nnpm run build\n```\n\n### Version Control\n\n```bash\n# Stage your changes\ngit add .\n\n# Commit with descriptive message\ngit commit -m \"Add new user guide section\"\n\n# Push to repository\ngit push origin main\n```\n\n### Automatic Deployment\n\nIf connected to Cloudflare Pages:\n\n1. Push changes to your main branch\n2. Cloudflare automatically builds and deploys\n3. Changes are live in 2-5 minutes\n\n## Troubleshooting\n\n### Common Issues\n\n**Page not showing in navigation**\n\n- Check that the file path matches the configuration in `documentation.ts`\n- Ensure the markdown file exists in the correct directory\n\n**Broken links**\n\n- Use relative paths: `./page` or `../section/page`\n- Check spelling and case sensitivity\n\n**Images not loading**\n\n- Store images in `public/assets/`\n- Use absolute paths: `/assets/images/photo.jpg`\n\n**Mindmap not showing connections**\n\n- Connections are automatically generated based on folder structure\n- Add manual connections by linking between pages\n\n### Getting Help\n\n- Check the [Configuration Guide](./configuration) for advanced setup\n- Review [Troubleshooting](./troubleshooting) for specific issues\n- Explore [Code Examples](../developer-guides/code-examples) for customization\n\nYour documentation site is now ready to use! Start adding your content and customizing the design to match your needs.\n",
    "user-guide/advanced-features": "# Advanced Features\n\nExplore the powerful advanced capabilities of our documentation platform.\n\n## Interactive Components\n\n### Documentation Graph Visualization\n\nOur documentation features an interactive mind map that visualizes the structure of all documentation pages:\n\n```tsx\nimport { DocumentationGraph } from '../components/DocumentationGraph';\n\nfunction MyPage() {\n  return (\n    <DocumentationGraph\n      currentPath=\"user-guide/advanced-features\"\n      onNodeClick={(path) => {\n        // Navigate to the selected documentation page\n        router.push(`/docs/${path}`);\n      }}\n      className=\"w-full h-96\"\n    />\n  );\n}\n```\n\n**Live Example:**\nThe documentation graph you can see in our navigation demonstrates real-time visualization of our actual documentation structure, with:\n\n- Interactive nodes representing each documentation page\n- Dynamic connections showing relationships\n- Smooth animations and hover effects\n- Click-to-navigate functionality\n\n### Theme Switching System\n\nReal-time theme switching with smooth transitions:\n\n```tsx\nimport { useTheme } from '../providers/ThemeProvider';\n\nfunction ThemeDemo() {\n  const { isDarkMode, toggleTheme, prefersReducedMotion } = useTheme();\n\n  return (\n    <div className=\"p-4 rounded-lg doc-card\">\n      <h3>Current Theme: {isDarkMode ? 'Dark' : 'Light'}</h3>\n      <button\n        onClick={toggleTheme}\n        className=\"mt-2 px-4 py-2 rounded bg-primary-color text-background-color\"\n      >\n        Switch to {isDarkMode ? 'Light' : 'Dark'} Mode\n      </button>\n      <p className=\"mt-2 text-muted-color\">Motion: {prefersReducedMotion ? 'Reduced' : 'Full'}</p>\n    </div>\n  );\n}\n```\n\n**Current Implementation:**\n\n- Automatic system preference detection\n- Smooth color transitions with CSS variables\n- Persistent theme storage in localStorage\n- Reduced motion support for accessibility\n\n### Interactive Background Systems\n\nMultiple animated background options with real-time switching:\n\n```tsx\nimport { BackgroundSelector } from '../components/BackgroundSelector';\n\n// Current background types available:\nconst backgrounds = [\n  'wave', // Animated wave patterns with mouse interaction\n  'stars', // 3D star field with cursor effects\n  'dither', // Shader-based dithering effects\n  'solid', // Static background for reduced motion\n];\n\nfunction BackgroundDemo() {\n  return (\n    <div className=\"settings-panel\">\n      <h4>Background Style</h4>\n      <BackgroundSelector className=\"flex gap-2\" />\n    </div>\n  );\n}\n```\n\n**Working Features:**\n\n- Wave background: Real-time mouse interaction with elastic deformation\n- Stars background: 3D WebGL star field with subtle cursor influence\n- Dither background: GPU-accelerated dithering patterns\n- Automatic fallback to solid backgrounds for reduced motion preferences\n\n## Advanced Configuration\n\n### Typography System\n\nOur documentation uses a carefully designed typography scale:\n\n```css\n/* Real CSS variables from our system */\n:root {\n  --title-font: 'Urbanist', sans-serif;\n  --body-font: 'Urbanist', sans-serif;\n  --mono-font: 'MapleMono', 'SF Mono', monospace;\n\n  /* Light mode colors */\n  --text-color: #1f2937;\n  --text-secondary: #374151;\n  --muted-color: #6b7280;\n}\n\n.dark {\n  /* Dark mode colors */\n  --text-color: #f8fafc;\n  --text-secondary: #e2e8f0;\n  --muted-color: #94a3b8;\n}\n```\n\n**Typography Features:**\n\n- High contrast ratios for accessibility (WCAG AA compliant)\n- Optimized line heights for reading (1.75 for body text)\n- Proper font loading with `font-display: swap`\n- Responsive scaling across devices\n\n### Code Block System\n\nEnhanced syntax highlighting with multiple language support:\n\n```tsx\nimport { CodeBlock } from '../components/CodeBlock';\n\nconst codeExamples = [\n  {\n    language: 'typescript',\n    code: `interface DocumentationPage {\n  title: string;\n  path: string;\n  content: string;\n  lastModified: Date;\n}`,\n    label: 'TypeScript',\n  },\n  {\n    language: 'javascript',\n    code: `const config = {\n  theme: 'auto',\n  animations: true,\n  background: 'wave'\n};`,\n    label: 'JavaScript',\n  },\n];\n\nfunction CodeDemo() {\n  return (\n    <CodeBlock\n      snippets={codeExamples}\n      title=\"Configuration Examples\"\n      defaultLanguage=\"typescript\"\n      showLineNumbers={true}\n    />\n  );\n}\n```\n\n**Features:**\n\n- Multi-language syntax highlighting (powered by Prism.js)\n- One-click copy functionality\n- Tab-based language switching\n- Dark/light theme adaptation\n- Line number support\n\n### Settings System\n\nReal settings persistence and state management:\n\n```tsx\nimport { SettingsMenu } from '../components/SettingsMenu';\n\n// Actual settings that work in our app:\nconst availableSettings = {\n  theme: ['light', 'dark', 'system'],\n  motion: ['full', 'reduced'],\n  background: ['wave', 'stars', 'dither', 'solid'],\n};\n\nfunction Settings() {\n  return <SettingsMenu className=\"relative\" isCompact={false} />;\n}\n```\n\n**Live Settings:**\n\n- Theme persistence across browser sessions\n- Motion preference detection and respect\n- Background type switching with page reload\n- Dropdown animations with reduced motion support\n\n## Performance Optimizations\n\n### Real Performance Metrics\n\nOur documentation site implements several performance optimizations:\n\n**Bundle Optimization:**\n\n- **Code Splitting**: Routes are dynamically imported\n  - Main bundle: ~102kB (gzipped)\n  - Docs pages: ~419kB (includes syntax highlighting)\n- **Tree Shaking**: Unused code eliminated automatically\n- **Static Generation**: All routes pre-rendered at build time\n\n**Asset Optimization:**\n\n- **Font Loading**: WOFF2 format with `font-display: swap`\n  - Urbanist: ~42KB per variant\n  - Urbanist: ~42KB per variant\n  - MapleMono: ~17MB (loaded on demand for code blocks)\n- **Image Optimization**: Next.js automatic WebP/AVIF conversion\n- **Static Assets**: Served from CDN with proper caching headers\n\n**JavaScript Performance:**\n\n```tsx\n// Lazy loading for heavy components\nconst DocumentationGraph = dynamic(() => import('../components/DocumentationGraph'), {\n  ssr: false,\n});\n\n// Background components loaded on demand\nconst BackgroundComponents = {\n  wave: dynamic(() => import('../components/WaveBackground'), { ssr: false }),\n  stars: dynamic(() => import('../components/StarsBackground'), { ssr: false }),\n};\n```\n\n### Animation Performance\n\n**Optimized Animations:**\n\n- CSS transforms instead of layout changes\n- `requestAnimationFrame` for smooth updates\n- Hardware acceleration with `transform3d`\n- Automatic animation disabling for reduced motion preferences\n\n**Real Performance Data:**\n\n- 60 FPS animations on modern devices\n- <16ms frame times for smooth interactions\n- Graceful degradation on lower-end devices\n- Zero animation overhead when motion is reduced\n\n## Accessibility Features\n\n### Motion Sensitivity\n\nOur platform respects user preferences for reduced motion:\n\n```tsx\nimport { useTheme } from '../providers/ThemeProvider';\n\nfunction MotionAwareComponent() {\n  const { prefersReducedMotion } = useTheme();\n\n  const animations = prefersReducedMotion\n    ? {\n        // Static fallbacks\n        initial: { opacity: 0 },\n        animate: { opacity: 1 },\n        transition: { duration: 0.05 },\n      }\n    : {\n        // Full animations\n        initial: { opacity: 0, y: 20 },\n        animate: { opacity: 1, y: 0 },\n        transition: { duration: 0.3, ease: 'easeOut' },\n      };\n\n  return <motion.div {...animations}>Content adapts to user preferences</motion.div>;\n}\n```\n\n**Accessibility Features:**\n\n- Automatic `prefers-reduced-motion` detection\n- Keyboard navigation support throughout\n- Screen reader compatible markup\n- High contrast mode support\n- Focus indicators for all interactive elements\n\n### Real Accessibility Testing\n\n**WCAG Compliance:**\n\n- Color contrast ratios exceed WCAG AA standards\n- All interactive elements have focus indicators\n- Semantic HTML structure for screen readers\n- Proper heading hierarchy maintained\n\n**Keyboard Navigation:**\n\n- Tab order follows logical reading flow\n- All functionality accessible via keyboard\n- Custom focus management for modal dialogs\n- Escape key handling for dismissible components\n\n---\n\n**Related Documentation:**\n\n- [Basic Usage](./basic-usage) - Getting started with core features\n- [Configuration](./configuration) - Customizing your experience\n- [Code Examples](../developer-guides/code-examples) - Implementation details\n- [Icon Customization](../developer-guides/icon-customization) - Adding custom icons\n",
    "user-guide/configuration": "# Configuration\n\nCustomize your project settings and behavior.\n\n## Configuration Files\n\n### Main Config\n\n```json\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My awesome project\",\n  \"main\": \"index.js\",\n  \"config\": {\n    \"environment\": \"development\",\n    \"debug\": true,\n    \"features\": {\n      \"analytics\": true,\n      \"notifications\": false\n    }\n  }\n}\n```\n\n### Environment Variables\n\n```bash\n# .env.local\nNODE_ENV=development\nAPI_URL=http://localhost:3000/api\nDATABASE_URL=postgresql://user:pass@localhost:5432/db\nSECRET_KEY=your-secret-key\n```\n\n## Settings\n\n| Setting   | Type    | Default | Description          |\n| --------- | ------- | ------- | -------------------- |\n| `debug`   | boolean | `false` | Enable debug mode    |\n| `port`    | number  | `3000`  | Server port          |\n| `timeout` | number  | `5000`  | Request timeout (ms) |\n| `cache`   | boolean | `true`  | Enable caching       |\n\n## Advanced Options\n\n### Custom Middleware\n\n```javascript\n// middleware.js\nexport default function customMiddleware(options) {\n  return (req, res, next) => {\n    // Custom logic here\n    console.log(`Request: ${req.method} ${req.url}`);\n    next();\n  };\n}\n```\n\n### Plugin Configuration\n\n```javascript\n// plugins.config.js\nexport default {\n  plugins: [\n    'essential-plugin',\n    ['advanced-plugin', { option: 'value' }],\n    {\n      name: 'custom-plugin',\n      config: { enabled: true },\n    },\n  ],\n};\n```\n\n---\n\n_Having issues? See our [troubleshooting guide](./troubleshooting)._\n",
    "user-guide/troubleshooting": "# Troubleshooting\n\nCommon issues and solutions for your documentation site.\n\n## Build Issues\n\n### Static Export Errors\n\nIf you encounter errors during static export:\n\n```bash\n# Clear build cache\nrm -rf .next\nnpm run build\n```\n\n**Common solutions:**\n\n- Check for dynamic imports that need `ssr: false`\n- Verify all paths in `generateStaticParams` are valid\n- Ensure no server-side only code in client components\n\n### Font Loading Issues\n\nIf custom fonts aren't loading:\n\n1. **Check font paths** in `globals.css`\n2. **Verify font files** exist in `public/fonts/`\n3. **Add proper font-display** values for performance\n\n```css\n@font-face {\n  font-family: 'YourFont';\n  src: url('/fonts/your-font.woff2') format('woff2');\n  font-display: swap; /* Important for performance */\n}\n```\n\n## Performance Issues\n\n### Slow Page Loading\n\nIf pages load slowly:\n\n1. **Optimize images** - Use Next.js Image component\n2. **Reduce bundle size** - Check for unused imports\n3. **Enable compression** in your hosting provider\n\n### Animation Performance\n\nIf animations are choppy:\n\n1. **Use CSS transforms** instead of changing layout properties\n2. **Enable hardware acceleration** with `transform3d(0,0,0)`\n3. **Respect reduced motion** preferences\n\n```css\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n```\n\n## Content Issues\n\n### Markdown Not Rendering\n\nIf markdown content isn't displaying:\n\n1. **Check file extensions** - Should be `.md`\n2. **Verify frontmatter** format\n3. **Check for syntax errors** in markdown\n\n### Search Not Working\n\nIf the documentation search isn't functioning:\n\n1. **Verify search index** is being built\n2. **Check for JavaScript errors** in browser console\n3. **Ensure search component** is properly imported\n\n## Deployment Issues\n\n### Cloudflare Pages\n\nCommon Cloudflare deployment issues:\n\n```bash\n# Build command\nnpm run build\n\n# Output directory\nout\n```\n\n**Environment variables:**\n\n- `NODE_VERSION=18`\n- `NPM_VERSION=8`\n\n### Vercel Deployment\n\nFor Vercel deployment issues:\n\n```json\n// vercel.json\n{\n  \"builds\": [\n    {\n      \"src\": \"package.json\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"out\"\n      }\n    }\n  ]\n}\n```\n\n## Browser Compatibility\n\n### Modern Browser Features\n\nThis template uses modern web features:\n\n- **CSS Custom Properties** (IE 11+)\n- **Flexbox** (IE 11+)\n- **ES6+ JavaScript** (Chrome 51+, Firefox 54+, Safari 10+)\n\nFor older browser support, consider:\n\n- Adding polyfills\n- Using PostCSS with autoprefixer\n- Transpiling JavaScript with Babel\n\n## Getting Help\n\nIf you're still experiencing issues:\n\n1. **Check the console** for error messages\n2. **Review the documentation** thoroughly\n3. **Search existing issues** on GitHub\n4. **Create a new issue** with detailed information:\n   - Browser version\n   - Node.js version\n   - Error messages\n   - Steps to reproduce\n\n## Debug Mode\n\nEnable debug mode for additional logging:\n\n```bash\n# Development\nnpm run dev\n\n# Check browser console for debug information\n# Press Ctrl+Shift+D to toggle debug cursor (development only)\n```\n\n## Performance Monitoring\n\nMonitor your site's performance:\n\n1. **Lighthouse** - Built into Chrome DevTools\n2. **WebPageTest** - Detailed performance analysis\n3. **Core Web Vitals** - Google's performance metrics\n\n### Optimization Checklist\n\n- [ ] Images optimized and properly sized\n- [ ] Fonts loading efficiently\n- [ ] CSS/JS minified in production\n- [ ] Unused code removed\n- [ ] Caching headers configured\n- [ ] CDN configured (if applicable)\n\n## Common Error Messages\n\n### \"Page is missing param in generateStaticParams\"\n\nThis occurs when a route is referenced but not included in static generation:\n\n1. **Check documentation.ts** for invalid paths\n2. **Verify content files** exist for all referenced paths\n3. **Update generateStaticParams** to include all valid routes\n\n### \"Module not found\"\n\nUsually indicates:\n\n- Missing dependency installation\n- Incorrect import path\n- Case sensitivity issues (especially on Linux/macOS)\n\n```bash\n# Reinstall dependencies\nrm -rf node_modules package-lock.json\nnpm install\n```\n",
    "user-guide/chatbot": "# Documentation Chatbot\n\nThe documentation site includes an intelligent chatbot assistant that can help you find information, answer questions, and navigate the documentation more effectively.\n\n## Overview\n\nThe chatbot uses **Retrieval-Augmented Generation (RAG)** technology to:\n\n- Search through all documentation content\n- Provide contextual answers with source references\n- Suggest related topics and pages\n- Guide you to the most relevant information\n\n## How to Use\n\n### Opening the Chatbot\n\nThe chatbot is available on every page of the documentation:\n\n1. **Click the chat button** in the bottom-right corner of any page\n2. **Keyboard shortcut**: Press `Ctrl/Cmd + K` to open search, then select \"Ask AI\"\n3. The chat interface will slide up from the bottom\n\n### Asking Questions\n\nThe chatbot understands natural language questions about:\n\n**General inquiries:**\n\n- \"How do I customize the theme?\"\n- \"What background options are available?\"\n- \"How to add new icons?\"\n\n**Technical questions:**\n\n- \"Show me code examples for the navigation component\"\n- \"How do I deploy this documentation site?\"\n- \"What are the performance optimization features?\"\n\n**Navigation help:**\n\n- \"Where can I find the API documentation?\"\n- \"Show me the getting started guide\"\n- \"What's in the developer guides section?\"\n\n### Understanding Responses\n\nEach chatbot response includes:\n\n1. **Main Answer**: Contextual response based on your question\n2. **Source Links**: Direct links to relevant documentation pages\n3. **Related Topics**: Suggestions for additional reading\n4. **Code Examples**: When applicable, working code snippets\n\n## Features\n\n### Smart Search\n\nThe chatbot performs intelligent keyword matching:\n\n- **Title prioritization**: Matches in page titles score higher\n- **Content relevance**: Searches through all documentation content\n- **Contextual understanding**: Understands related terms and concepts\n\n### Response Types\n\nThe chatbot adapts its responses based on your question:\n\n**How-to Questions**\n\n```\nQ: \"How do I add custom icons?\"\nA: Based on the documentation, here's how you can add custom icons:\n\n1. Visit iconify.design and find your desired icon\n2. Save the SVG file to /public/assets/icons/\n3. Import and use in your components...\n\nFor more detailed information, check the Icon Customization section.\n```\n\n**Definition Questions**\n\n```\nQ: \"What is the theme system?\"\nA: Based on the documentation:\n\nThe theme system provides automatic dark/light mode switching\nwith smooth transitions, persistent storage, and reduced motion support...\n\nYou can find additional information in:\n- UI Configuration\n- Advanced Features\n```\n\n**Example Requests**\n\n```\nQ: \"Show me navigation examples\"\nA: Here are relevant examples from the documentation:\n\n**Navigation Component:**\nBuilding a responsive navigation with search functionality...\n\n**Code Examples:**\nReal implementation of the theme provider...\n```\n\n### Source Attribution\n\nEvery response includes clickable source links:\n\n- Links open in new tabs for easy reference\n- Sources are ranked by relevance\n- Up to 5 source documents per response\n\n## Technical Implementation\n\n### Backend API\n\nThe chatbot uses a RESTful API endpoint:\n\n```typescript\nPOST /api/chat\n{\n  \"query\": \"How do I customize themes?\"\n}\n\n// Response\n{\n  \"answer\": \"Based on the documentation...\",\n  \"sources\": [\n    {\n      \"title\": \"UI Configuration\",\n      \"path\": \"developer-guides/ui-configuration\",\n      \"snippet\": \"Theme customization allows...\",\n      \"relevanceScore\": 85\n    }\n  ],\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n### Document Processing\n\nThe system automatically:\n\n1. **Indexes all markdown files** in the documentation\n2. **Splits content into chunks** for better search performance\n3. **Scores relevance** based on keyword matches and context\n4. **Generates contextual answers** based on found content\n\n### Performance\n\n- **Fast responses**: Typically under 500ms\n- **Efficient search**: Keyword-based matching with scoring\n- **Cached content**: Documentation is indexed at build time\n- **Lightweight**: No external AI dependencies required\n\n## Customization\n\n### Adding Content Sources\n\nTo include additional content in chatbot responses:\n\n1. **Add markdown files** to `/app/docs/content/`\n2. **Include frontmatter** for better categorization:\n\n   ```markdown\n   ---\n   title: 'Your Page Title'\n   category: 'user-guide'\n   ---\n\n   # Your Content\n   ```\n\n3. **Rebuild the site** to index new content\n\n### Modifying Responses\n\nThe response generation logic is in `/app/api/chat/route.ts`:\n\n```typescript\nfunction generateAnswer(query: string, sources: DocumentSource[]): string {\n  // Custom logic for different question types\n  if (queryLower.includes('how to')) {\n    return generateHowToAnswer(query, sources);\n  }\n  // Add your own response patterns here\n}\n```\n\n### Styling the Interface\n\nThe chatbot UI can be customized via CSS variables:\n\n```css\n/* Chatbot theming */\n.chatbot-container {\n  --chat-primary: var(--primary-color);\n  --chat-background: var(--card-background);\n  --chat-border: var(--border-color);\n}\n```\n\n## Best Practices\n\n### For Users\n\n1. **Be specific**: \"How to add icons?\" vs \"Icons?\"\n2. **Use natural language**: Ask questions as you would to a person\n3. **Check sources**: Click through to referenced documentation\n4. **Try variations**: Rephrase if you don't get the expected answer\n\n### For Content Authors\n\n1. **Clear headings**: Use descriptive section titles\n2. **Good structure**: Organize content logically\n3. **Include examples**: Practical code examples improve responses\n4. **Update regularly**: Keep documentation current for better answers\n\n## Accessibility\n\nThe chatbot is designed with accessibility in mind:\n\n- **Keyboard navigation**: Full keyboard support\n- **Screen readers**: Proper ARIA labels and structure\n- **Motion preferences**: Respects `prefers-reduced-motion`\n- **High contrast**: Works with high contrast modes\n- **Focus management**: Proper focus handling for modal interface\n\n## Privacy\n\nThe chatbot operates entirely on your documentation content:\n\n- **No external APIs**: All processing happens locally\n- **No data collection**: Questions and responses are not stored\n- **No tracking**: No analytics or user behavior tracking\n- **Offline capable**: Works without internet connection\n\n## Troubleshooting\n\n### Common Issues\n\n**Chatbot doesn't respond:**\n\n- Check browser console for JavaScript errors\n- Ensure JavaScript is enabled\n- Try refreshing the page\n\n**Poor search results:**\n\n- Try different keywords or phrases\n- Check if the topic exists in documentation\n- Use more specific terms\n\n**Interface doesn't appear:**\n\n- Check if the chat button is visible (bottom-right)\n- Try different screen sizes/devices\n- Clear browser cache\n\n### Performance Issues\n\n**Slow responses:**\n\n- Check network connectivity\n- Ensure adequate device memory\n- Close other browser tabs\n\n**Search not finding content:**\n\n- Verify content exists in `/app/docs/content/`\n- Check if build includes new content\n- Confirm file extensions are `.md`\n\n---\n\n**Related Documentation:**\n\n- [Advanced Features](./advanced-features) - More platform capabilities\n- [Configuration](./configuration) - Site customization options\n- [Code Examples](../developer-guides/code-examples) - Implementation details\n",
    "api-reference/overview": "# API Reference Overview\n\nComplete reference for the documentation system API and components.\n\n## Getting Started with the API\n\nThis documentation system provides several APIs and components that you can extend and customize:\n\n### Component API\n\nThe main components available for customization:\n\n- **DocumentationGraph** - Interactive mind map visualization\n- **FileTree** - Navigation sidebar component\n- **ThemeProvider** - Theme and motion preference management\n- **BackgroundSelector** - Background animation controls\n\n### Configuration API\n\nKey configuration files:\n\n- `app/data/documentation.ts` - Site structure definition\n- `app/globals.css` - Theme colors and styling\n- `next.config.js` - Build and deployment settings\n- `tailwind.config.js` - Utility classes and theme\n\n## Core Concepts\n\n### File Structure\n\n```\napp/\n├── components/          # Reusable UI components\n├── docs/               # Documentation system\n│   ├── content/        # Markdown content files\n│   └── components/     # Doc-specific components\n├── data/               # Configuration and data\n└── providers/          # React context providers\n```\n\n### Routing System\n\nThe documentation uses Next.js dynamic routing:\n\n```typescript\n// Route: /docs/[...slug]\n// Maps to: app/docs/content/{slug}.md\n```\n\n### Theme System\n\nTheme management through CSS custom properties:\n\n```css\n:root {\n  --primary-color: #678d58; /* Matcha green */\n  --background-color: #f3f5f0;\n}\n\n.dark {\n  --primary-color: #ff85a1; /* Sakura pink */\n  --background-color: #0f0f12;\n}\n```\n\n## Component Props\n\n### DocumentationGraph\n\nInteractive mind map component for visualizing documentation structure.\n\n```typescript\ninterface DocumentationGraphProps {\n  currentPath?: string; // Current active page\n  onNodeClick?: (path: string) => void; // Node click handler\n  className?: string; // Additional CSS classes\n}\n```\n\n**Features:**\n\n- Theme-aware colors\n- Search functionality with relevance scoring\n- Reduced motion support\n- Responsive design\n\n### FileTree\n\nNavigation component for the documentation sidebar.\n\n```typescript\ninterface FileTreeProps {\n  items: FileItem[]; // Documentation structure\n  onSelect: (item: FileItem) => void; // Selection handler\n  currentPath?: string; // Current active page\n}\n\ninterface FileItem {\n  name: string; // Display name\n  path: string; // URL path\n  type: 'file' | 'directory'; // Item type\n  children?: FileItem[]; // Nested items\n}\n```\n\n### ThemeProvider\n\nContext provider for theme and accessibility preferences.\n\n```typescript\ninterface ThemeContextType {\n  isDarkMode: boolean; // Current theme state\n  toggleTheme: () => void; // Theme toggle function\n  prefersReducedMotion: boolean; // Motion preference\n  toggleReducedMotion: () => void; // Motion toggle function\n}\n```\n\n## Customization Hooks\n\n### useTheme()\n\nAccess theme and motion preferences:\n\n```typescript\nimport { useTheme } from '../providers/ThemeProvider';\n\nfunction MyComponent() {\n  const {\n    isDarkMode,\n    toggleTheme,\n    prefersReducedMotion,\n    toggleReducedMotion\n  } = useTheme();\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={isDarkMode ? 'dark-styles' : 'light-styles'}\n    >\n      Toggle Theme\n    </button>\n  );\n}\n```\n\n## Styling API\n\n### CSS Custom Properties\n\nTheme-aware styling using CSS variables:\n\n```css\n.my-component {\n  background-color: var(--card-color);\n  color: var(--text-color);\n  border: 1px solid var(--border-color);\n}\n```\n\n### Available Variables\n\n| Variable             | Light Mode | Dark Mode | Purpose              |\n| -------------------- | ---------- | --------- | -------------------- |\n| `--primary-color`    | #678D58    | #FF85A1   | Primary theme color  |\n| `--background-color` | #F3F5F0    | #0F0F12   | Page background      |\n| `--card-color`       | #FFFFFF    | #1A1A1F   | Card backgrounds     |\n| `--text-color`       | #2E3A23    | #F0F0F5   | Primary text         |\n| `--border-color`     | #222       | #bbb      | Borders and dividers |\n\n### Font Variables\n\n```css\n:root {\n  --title-font: 'Urbanist', sans-serif;\n  --body-font: 'Urbanist', sans-serif;\n  --mono-font: 'MapleMono', 'SF Mono', monospace;\n}\n```\n\n## Advanced Usage\n\n### Custom Background Components\n\nCreate your own animated background:\n\n```typescript\nimport React from 'react';\n\nconst CustomBackground = React.memo(() => {\n  return (\n    <div className=\"fixed inset-0 z-0 pointer-events-none\">\n      {/* Your custom background implementation */}\n    </div>\n  );\n});\n\nexport default CustomBackground;\n```\n\n### Extending the Mind Map\n\nCustomize the documentation graph:\n\n```typescript\n// In your component\n<DocumentationGraph\n  currentPath={currentPath}\n  onNodeClick={(path) => {\n    // Custom navigation logic\n    router.push(`/docs/${path}`);\n    analytics.track('mindmap_navigation', { path });\n  }}\n  className=\"custom-mindmap-styles\"\n/>\n```\n\n### Adding New Content Types\n\nExtend the FileItem type for new content:\n\n```typescript\ninterface ExtendedFileItem extends FileItem {\n  icon?: string; // Custom icon\n  description?: string; // Item description\n  tags?: string[]; // Content tags\n}\n```\n\n## Performance Considerations\n\n### Reduced Motion\n\nAlways respect user motion preferences:\n\n```typescript\nconst { prefersReducedMotion } = useTheme();\n\nconst animations = prefersReducedMotion\n  ? {}\n  : {\n      initial: { opacity: 0 },\n      animate: { opacity: 1 },\n      transition: { duration: 0.3 },\n    };\n```\n\n### Code Splitting\n\nUse dynamic imports for heavy components:\n\n```typescript\nconst HeavyComponent = dynamic(() => import('./HeavyComponent'), { ssr: false });\n```\n\n## Next Steps\n\n- **[Authentication Guide](./authentication)** - Implement user authentication\n- **[Endpoints Reference](./endpoints)** - Available API endpoints\n- **[Code Examples](../developer-guides/code-examples)** - Practical implementation examples\n",
    "api-reference/authentication": "# Authentication\n\nLearn how to authenticate API requests to access protected resources.\n\n## Overview\n\nThe API uses token-based authentication to secure endpoints and protect user data. All authenticated requests must include a valid API token in the request headers.\n\n## Getting Started\n\n### 1. Obtain an API Token\n\nTo get started with API authentication:\n\n1. Create an account or log in to your existing account\n2. Navigate to the API settings in your dashboard\n3. Generate a new API token\n4. Store the token securely - you won't be able to see it again\n\n### 2. Include Token in Requests\n\nInclude your API token in the `Authorization` header of all API requests:\n\n```bash\ncurl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\\n  https://api.example.com/v1/resource\n```\n\n## Authentication Methods\n\n### Bearer Token\n\nThe recommended authentication method using the Authorization header:\n\n```javascript\nconst response = await fetch('https://api.example.com/v1/resource', {\n  headers: {\n    Authorization: 'Bearer YOUR_API_TOKEN',\n    'Content-Type': 'application/json',\n  },\n});\n```\n\n### API Key Parameter\n\nFor certain endpoints, you can also pass the API key as a query parameter:\n\n```\nGET https://api.example.com/v1/resource?api_key=YOUR_API_TOKEN\n```\n\n�\u000f **Note**: This method is less secure and should only be used when header-based authentication is not possible.\n\n## Token Management\n\n### Token Expiration\n\n- API tokens are valid for 90 days by default\n- You can configure custom expiration periods in your account settings\n- Expired tokens will return a `401 Unauthorized` error\n\n### Regenerating Tokens\n\nTo regenerate a token:\n\n1. Go to your API settings\n2. Find the token you want to regenerate\n3. Click \"Regenerate\"\n4. Update your applications with the new token\n\n### Revoking Tokens\n\nYou can revoke a token at any time:\n\n1. Navigate to API settings\n2. Find the token to revoke\n3. Click \"Revoke\"\n4. The token will immediately become invalid\n\n## Security Best Practices\n\n### Token Storage\n\n- **Never** commit tokens to version control\n- Store tokens in environment variables\n- Use secret management services in production\n- Rotate tokens regularly\n\n### HTTPS Only\n\nAll API requests must be made over HTTPS. Requests over HTTP will be rejected.\n\n### Rate Limiting\n\nAuthenticated requests have higher rate limits than unauthenticated requests:\n\n- **Authenticated**: 1000 requests per hour\n- **Unauthenticated**: 60 requests per hour\n\n## Error Handling\n\n### Common Authentication Errors\n\n| Status Code | Error             | Description                      |\n| ----------- | ----------------- | -------------------------------- |\n| 401         | Unauthorized      | Invalid or missing token         |\n| 403         | Forbidden         | Token lacks required permissions |\n| 429         | Too Many Requests | Rate limit exceeded              |\n\n### Error Response Format\n\n```json\n{\n  \"error\": {\n    \"code\": \"UNAUTHORIZED\",\n    \"message\": \"Invalid authentication token\",\n    \"details\": \"The provided token has expired or is invalid\"\n  }\n}\n```\n\n## OAuth 2.0 (Coming Soon)\n\nWe're working on OAuth 2.0 support for third-party integrations. This will enable:\n\n- User authorization flows\n- Scoped permissions\n- Refresh tokens\n- Third-party app integration\n\n## Need Help?\n\nIf you're experiencing authentication issues:\n\n1. Verify your token is correct and hasn't expired\n2. Check you're using HTTPS\n3. Ensure you're not exceeding rate limits\n4. Contact support if issues persist\n",
    "api-reference/endpoints": "# API Endpoints\n\nReference for all available API endpoints in the documentation system.\n\n## Base URL\n\n```\nDevelopment: http://localhost:3000\nProduction: https://your-domain.com\n```\n\n## Documentation Endpoints\n\n### GET /docs/[...slug]\n\nRetrieve documentation page content.\n\n**Parameters:**\n\n- `slug` (array): Path segments for the documentation page\n\n**Example:**\n\n```\nGET /docs/getting-started/introduction\nGET /docs/api-reference/overview\n```\n\n**Response:**\n\n```json\n{\n  \"content\": \"# Introduction\\n\\nWelcome to the documentation...\",\n  \"path\": \"getting-started/introduction\",\n  \"title\": \"Introduction\",\n  \"lastModified\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n### GET /api/docs/search\n\nSearch documentation content.\n\n**Query Parameters:**\n\n- `q` (string): Search query\n- `limit` (number): Maximum results (default: 10)\n\n**Example:**\n\n```\nGET /api/docs/search?q=installation&limit=5\n```\n\n**Response:**\n\n```json\n{\n  \"results\": [\n    {\n      \"title\": \"Installation Guide\",\n      \"path\": \"getting-started/installation\",\n      \"excerpt\": \"Complete installation instructions...\",\n      \"score\": 0.95\n    }\n  ],\n  \"total\": 5,\n  \"query\": \"installation\"\n}\n```\n\n## Configuration Endpoints\n\n### GET /api/config/theme\n\nGet current theme configuration.\n\n**Response:**\n\n```json\n{\n  \"themes\": {\n    \"light\": {\n      \"primary\": \"#678D58\",\n      \"background\": \"#F3F5F0\",\n      \"text\": \"#2E3A23\"\n    },\n    \"dark\": {\n      \"primary\": \"#FF85A1\",\n      \"background\": \"#0F0F12\",\n      \"text\": \"#F0F0F5\"\n    }\n  },\n  \"current\": \"light\"\n}\n```\n\n### POST /api/config/theme\n\nUpdate theme preferences.\n\n**Request Body:**\n\n```json\n{\n  \"theme\": \"dark\",\n  \"reduceMotion\": false\n}\n```\n\n**Response:**\n\n```json\n{\n  \"success\": true,\n  \"theme\": \"dark\",\n  \"reduceMotion\": false\n}\n```\n\n### GET /api/config/navigation\n\nGet navigation structure.\n\n**Response:**\n\n```json\n{\n  \"navigation\": [\n    {\n      \"name\": \"Getting Started\",\n      \"path\": \"getting-started\",\n      \"type\": \"directory\",\n      \"children\": [\n        {\n          \"name\": \"Introduction\",\n          \"path\": \"getting-started/introduction\",\n          \"type\": \"file\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Analytics Endpoints\n\n### POST /api/analytics/page-view\n\nTrack page views.\n\n**Request Body:**\n\n```json\n{\n  \"path\": \"/docs/getting-started/introduction\",\n  \"referrer\": \"https://google.com\",\n  \"userAgent\": \"Mozilla/5.0...\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n**Response:**\n\n```json\n{\n  \"success\": true,\n  \"id\": \"pageview_123456\"\n}\n```\n\n### POST /api/analytics/search\n\nTrack search queries.\n\n**Request Body:**\n\n```json\n{\n  \"query\": \"installation guide\",\n  \"results\": 5,\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n**Response:**\n\n```json\n{\n  \"success\": true,\n  \"id\": \"search_123456\"\n}\n```\n\n### GET /api/analytics/popular\n\nGet popular content.\n\n**Query Parameters:**\n\n- `period` (string): Time period (day, week, month)\n- `limit` (number): Maximum results (default: 10)\n\n**Response:**\n\n```json\n{\n  \"pages\": [\n    {\n      \"path\": \"/docs/getting-started/introduction\",\n      \"title\": \"Introduction\",\n      \"views\": 1250,\n      \"growth\": 15.3\n    }\n  ],\n  \"period\": \"week\",\n  \"total\": 10\n}\n```\n\n## Feedback Endpoints\n\n### POST /api/feedback\n\nSubmit page feedback.\n\n**Request Body:**\n\n```json\n{\n  \"path\": \"/docs/getting-started/introduction\",\n  \"type\": \"helpful\" | \"not-helpful\" | \"suggestion\",\n  \"message\": \"This page was very helpful!\",\n  \"rating\": 5,\n  \"email\": \"user@example.com\" // optional\n}\n```\n\n**Response:**\n\n```json\n{\n  \"success\": true,\n  \"id\": \"feedback_123456\",\n  \"message\": \"Thank you for your feedback!\"\n}\n```\n\n### GET /api/feedback/summary\n\nGet feedback summary for a page.\n\n**Query Parameters:**\n\n- `path` (string): Page path\n\n**Response:**\n\n```json\n{\n  \"path\": \"/docs/getting-started/introduction\",\n  \"rating\": 4.5,\n  \"totalFeedback\": 45,\n  \"helpful\": 38,\n  \"notHelpful\": 7,\n  \"suggestions\": 12\n}\n```\n\n## Export Endpoints\n\n### GET /api/export/pdf\n\nExport documentation as PDF.\n\n**Query Parameters:**\n\n- `paths` (array): Pages to include\n- `format` (string): Output format (pdf, epub)\n\n**Response:**\nBinary PDF file or job ID for async processing.\n\n### GET /api/export/json\n\nExport documentation structure as JSON.\n\n**Response:**\n\n```json\n{\n  \"meta\": {\n    \"exportDate\": \"2024-01-15T10:30:00Z\",\n    \"version\": \"1.0.0\",\n    \"totalPages\": 45\n  },\n  \"pages\": [\n    {\n      \"path\": \"getting-started/introduction\",\n      \"title\": \"Introduction\",\n      \"content\": \"# Introduction\\n\\n...\",\n      \"lastModified\": \"2024-01-10T10:30:00Z\"\n    }\n  ]\n}\n```\n\n## Webhook Endpoints\n\n### POST /api/webhooks/github\n\nHandle GitHub webhook for automatic updates.\n\n**Headers:**\n\n- `X-GitHub-Event`: Event type\n- `X-Hub-Signature-256`: HMAC signature\n\n**Request Body:**\nGitHub webhook payload\n\n**Response:**\n\n```json\n{\n  \"success\": true,\n  \"processed\": [\"docs/getting-started/introduction.md\"],\n  \"message\": \"Documentation updated successfully\"\n}\n```\n\n### POST /api/webhooks/content-update\n\nTrigger content rebuild.\n\n**Request Body:**\n\n```json\n{\n  \"paths\": [\"getting-started/introduction\"],\n  \"source\": \"cms\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n```\n\n**Response:**\n\n```json\n{\n  \"success\": true,\n  \"jobId\": \"rebuild_123456\",\n  \"estimatedTime\": \"30s\"\n}\n```\n\n## Error Handling\n\n### Standard Error Response\n\nAll endpoints return errors in this format:\n\n```json\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid request parameters\",\n    \"details\": {\n      \"field\": \"query\",\n      \"issue\": \"Required parameter missing\"\n    }\n  },\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"requestId\": \"req_123456\"\n}\n```\n\n### HTTP Status Codes\n\n| Code | Meaning               |\n| ---- | --------------------- |\n| 200  | Success               |\n| 201  | Created               |\n| 400  | Bad Request           |\n| 401  | Unauthorized          |\n| 403  | Forbidden             |\n| 404  | Not Found             |\n| 429  | Rate Limited          |\n| 500  | Internal Server Error |\n\n## Rate Limiting\n\nAPI endpoints are rate limited to prevent abuse:\n\n| Endpoint Type    | Limit     |\n| ---------------- | --------- |\n| Read operations  | 1000/hour |\n| Write operations | 100/hour  |\n| Search           | 60/minute |\n| Analytics        | 500/hour  |\n\nRate limit headers are included in responses:\n\n```\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1705312200\n```\n\n## Authentication\n\nSome endpoints require authentication. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer your-jwt-token\n```\n\n## SDKs and Clients\n\n### JavaScript/TypeScript SDK\n\n```typescript\nimport { DocsAPI } from '@your-org/docs-sdk';\n\nconst api = new DocsAPI({\n  baseURL: 'https://your-domain.com',\n  apiKey: 'your-api-key',\n});\n\n// Search documentation\nconst results = await api.search('installation guide');\n\n// Get page content\nconst page = await api.getPage('getting-started/introduction');\n\n// Submit feedback\nawait api.submitFeedback({\n  path: '/docs/getting-started/introduction',\n  type: 'helpful',\n  rating: 5,\n});\n```\n\n### Python SDK\n\n```python\nfrom docs_api import DocsClient\n\nclient = DocsClient(\n    base_url='https://your-domain.com',\n    api_key='your-api-key'\n)\n\n# Search documentation\nresults = client.search('installation guide')\n\n# Get page content\npage = client.get_page('getting-started/introduction')\n\n# Submit feedback\nclient.submit_feedback({\n    'path': '/docs/getting-started/introduction',\n    'type': 'helpful',\n    'rating': 5\n})\n```\n\n## OpenAPI Specification\n\nThe complete OpenAPI specification is available at:\n\n```\nGET /api/openapi.json\n```\n\nThis can be used with tools like:\n\n- Swagger UI\n- Postman\n- Insomnia\n- OpenAPI Generator\n\n## Webhook Security\n\n### Signature Verification\n\nVerify webhook signatures to ensure authenticity:\n\n```typescript\nimport crypto from 'crypto';\n\nfunction verifySignature(payload: string, signature: string, secret: string): boolean {\n  const hmac = crypto.createHmac('sha256', secret);\n  hmac.update(payload);\n  const digest = `sha256=${hmac.digest('hex')}`;\n\n  return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(digest));\n}\n```\n\n## Examples\n\n### Curl Examples\n\n```bash\n# Search documentation\ncurl \"https://your-domain.com/api/docs/search?q=installation\"\n\n# Get page content\ncurl \"https://your-domain.com/docs/api-reference/overview\"\n\n# Submit feedback\ncurl -X POST \"https://your-domain.com/api/feedback\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"path\": \"/docs/getting-started\", \"type\": \"helpful\", \"rating\": 5}'\n```\n\n### JavaScript Fetch Examples\n\n```javascript\n// Search documentation\nconst searchResults = await fetch('/api/docs/search?q=installation').then((res) => res.json());\n\n// Submit feedback\nconst feedback = await fetch('/api/feedback', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    path: '/docs/getting-started',\n    type: 'helpful',\n    rating: 5,\n  }),\n}).then((res) => res.json());\n```\n\n## Next Steps\n\n- **[Authentication Guide](./authentication)** - Implement API authentication\n- **[Code Examples](../developer-guides/code-examples)** - Practical API usage examples\n- **[Overview](./overview)** - API architecture and concepts\n",
    "developer-guides/code-examples": "# Code Examples\n\nWelcome to the comprehensive code examples section! Here you'll find practical examples of how to build and customize features in your documentation site using Next.js, React, and modern web technologies.\n\n## Getting Started\n\nLet's start with a simple example of adding a new documentation page:\n\n```typescript\n// types/documentation.ts\nexport interface DocumentationPage {\n  title: string;\n  path: string;\n  content: string;\n  lastModified: Date;\n  category: string;\n}\n\n// Adding a new page to the documentation structure\nconst newPage: DocumentationPage = {\n  title: 'My New Feature',\n  path: 'developer-guides/my-new-feature',\n  content: '# My New Feature\\n\\nDetailed documentation content...',\n  lastModified: new Date(),\n  category: 'developer-guides',\n};\n```\n\n## Theme System Examples\n\nHere's how to implement and customize the theme system:\n\n```typescript|css|javascript\n// TypeScript - Theme Provider Implementation\n'use client';\n\nimport { createContext, useContext, useEffect, useState } from 'react';\n\ninterface ThemeContextType {\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n  prefersReducedMotion: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n\n  useEffect(() => {\n    // Check system preferences\n    const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n\n    setIsDarkMode(darkModeQuery.matches);\n    setPrefersReducedMotion(motionQuery.matches);\n\n    // Load saved preference\n    const saved = localStorage.getItem('theme');\n    if (saved) {\n      setIsDarkMode(saved === 'dark');\n      document.documentElement.classList.toggle('dark', saved === 'dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = !isDarkMode;\n    setIsDarkMode(newTheme);\n    localStorage.setItem('theme', newTheme ? 'dark' : 'light');\n    document.documentElement.classList.toggle('dark', newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme, prefersReducedMotion }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n---\n/* CSS - Theme Variables and Transitions */\n:root {\n  /* Light theme colors */\n  --background-color: #FAFBF9;\n  --text-color: #1F2937;\n  --text-secondary: #374151;\n  --muted-color: #6B7280;\n  --card-background: #FFFFFF;\n  --border-color: #E5E7EB;\n\n  /* Typography */\n  --title-font: 'Urbanist', sans-serif;\n  --body-font: 'Urbanist', sans-serif;\n  --mono-font: 'MapleMono', 'SF Mono', monospace;\n\n  /* Transitions */\n  --theme-transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease;\n}\n\n.dark {\n  /* Dark theme colors */\n  --background-color: #0B0D0F;\n  --text-color: #F8FAFC;\n  --text-secondary: #E2E8F0;\n  --muted-color: #94A3B8;\n  --card-background: #111317;\n  --border-color: #1F2937;\n}\n\n/* Smooth transitions for all theme changes */\n* {\n  transition: var(--theme-transition);\n}\n\n/* Reduced motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    transition: none;\n    animation: none;\n  }\n}\n---\n// JavaScript - Dynamic Background System\nclass BackgroundManager {\n  constructor() {\n    this.currentBackground = 'wave';\n    this.canvas = null;\n    this.animationId = null;\n  }\n\n  init(canvasElement) {\n    this.canvas = canvasElement;\n    this.setupCanvas();\n    this.startAnimation();\n  }\n\n  setupCanvas() {\n    const ctx = this.canvas.getContext('2d');\n    const resizeCanvas = () => {\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n  }\n\n  startAnimation() {\n    const animate = (timestamp) => {\n      this.render(timestamp);\n      this.animationId = requestAnimationFrame(animate);\n    };\n\n    animate(0);\n  }\n\n  render(timestamp) {\n    const ctx = this.canvas.getContext('2d');\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    switch (this.currentBackground) {\n      case 'wave':\n        this.renderWave(ctx, timestamp);\n        break;\n      case 'stars':\n        this.renderStars(ctx, timestamp);\n        break;\n      case 'dither':\n        this.renderDither(ctx, timestamp);\n        break;\n    }\n  }\n\n  switchBackground(type) {\n    this.currentBackground = type;\n    localStorage.setItem('backgroundType', type);\n  }\n}\n\n// Usage\nconst backgroundManager = new BackgroundManager();\nbackgroundManager.init(document.getElementById('background-canvas'));\n```\n\n## Navigation Component\n\nBuilding a responsive navigation with search functionality:\n\n```tsx\n'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { documentationTree } from '../data/documentation';\n\ninterface SearchResult {\n  title: string;\n  path: string;\n  category: string;\n  snippet?: string;\n}\n\nexport function Navigation() {\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\n  const searchRef = useRef<HTMLInputElement>(null);\n  const router = useRouter();\n\n  // Search functionality\n  useEffect(() => {\n    if (searchQuery.length > 2) {\n      const results = searchDocumentation(searchQuery);\n      setSearchResults(results);\n    } else {\n      setSearchResults([]);\n    }\n  }, [searchQuery]);\n\n  const searchDocumentation = (query: string): SearchResult[] => {\n    const results: SearchResult[] = [];\n    const searchTerm = query.toLowerCase();\n\n    const searchInTree = (items: any[]) => {\n      items.forEach((item) => {\n        if (item.type === 'file') {\n          const title = item.name.replace('.md', '');\n          if (title.toLowerCase().includes(searchTerm)) {\n            results.push({\n              title,\n              path: item.path,\n              category: item.path.split('/')[0],\n            });\n          }\n        } else if (item.children) {\n          searchInTree(item.children);\n        }\n      });\n    };\n\n    searchInTree(documentationTree);\n    return results.slice(0, 10); // Limit results\n  };\n\n  const handleSearchSelect = (result: SearchResult) => {\n    router.push(`/docs/${result.path}`);\n    setIsSearchOpen(false);\n    setSearchQuery('');\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-background-color border-b border-border-color\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-12\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <h1 className=\"text-xl font-bold text-text-color\">Documentation</h1>\n          </div>\n\n          {/* Search */}\n          <div className=\"relative\">\n            <button\n              onClick={() => setIsSearchOpen(true)}\n              className=\"flex items-center gap-2 px-3 py-2 text-sm text-muted-color border border-border-color rounded-lg hover:border-text-color transition-colors\"\n            >\n              <SearchIcon className=\"w-4 h-4\" />\n              Search docs...\n              <kbd className=\"hidden sm:inline-block text-xs border border-border-color rounded px-1\">\n                ⌘K\n              </kbd>\n            </button>\n\n            {/* Search Modal */}\n            {isSearchOpen && (\n              <div className=\"fixed inset-0 bg-black/50 z-50 flex items-start justify-center pt-[20vh]\">\n                <div className=\"bg-card-background border border-border-color rounded-lg w-full max-w-lg mx-4\">\n                  <div className=\"p-4 border-b border-border-color\">\n                    <input\n                      ref={searchRef}\n                      type=\"text\"\n                      placeholder=\"Search documentation...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"w-full bg-transparent text-text-color placeholder-muted-color border-none outline-none\"\n                      autoFocus\n                    />\n                  </div>\n\n                  {searchResults.length > 0 && (\n                    <div className=\"max-h-80 overflow-y-auto\">\n                      {searchResults.map((result, index) => (\n                        <button\n                          key={index}\n                          onClick={() => handleSearchSelect(result)}\n                          className=\"w-full text-left p-4 hover:bg-background-color transition-colors border-b border-border-color last:border-b-0\"\n                        >\n                          <div className=\"font-medium text-text-color\">{result.title}</div>\n                          <div className=\"text-sm text-muted-color\">{result.category}</div>\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Theme Toggle */}\n          <ThemeToggle />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nfunction SearchIcon({ className }: { className?: string }) {\n  return (\n    <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n      />\n    </svg>\n  );\n}\n```\n\n## Documentation Graph Component\n\nCreating an interactive visualization of documentation structure:\n\n```tsx\n'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { documentationTree } from '../data/documentation';\n\ninterface GraphNode {\n  id: string;\n  label: string;\n  path: string;\n  x: number;\n  y: number;\n  connections: string[];\n  category: string;\n}\n\nexport function DocumentationGraph({\n  currentPath,\n  onNodeClick,\n  className,\n}: {\n  currentPath?: string;\n  onNodeClick?: (path: string) => void;\n  className?: string;\n}) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [nodes, setNodes] = useState<GraphNode[]>([]);\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\n\n  useEffect(() => {\n    const graphNodes = buildGraphFromTree();\n    setNodes(graphNodes);\n  }, []);\n\n  useEffect(() => {\n    if (nodes.length > 0) {\n      drawGraph();\n    }\n  }, [nodes, hoveredNode, currentPath]);\n\n  const buildGraphFromTree = (): GraphNode[] => {\n    const nodes: GraphNode[] = [];\n    const centerX = 400;\n    const centerY = 300;\n    let nodeIndex = 0;\n\n    const processItem = (item: any, angle: number, radius: number, parentId?: string) => {\n      if (item.type === 'file') {\n        const x = centerX + Math.cos(angle) * radius;\n        const y = centerY + Math.sin(angle) * radius;\n\n        const node: GraphNode = {\n          id: item.path,\n          label: item.name.replace('.md', ''),\n          path: item.path,\n          x,\n          y,\n          connections: parentId ? [parentId] : [],\n          category: item.path.split('/')[0],\n        };\n\n        nodes.push(node);\n      } else if (item.children) {\n        // Add directory node\n        const x = centerX + Math.cos(angle) * (radius * 0.6);\n        const y = centerY + Math.sin(angle) * (radius * 0.6);\n\n        const dirNode: GraphNode = {\n          id: item.path,\n          label: item.name,\n          path: item.path,\n          x,\n          y,\n          connections: [],\n          category: 'directory',\n        };\n\n        nodes.push(dirNode);\n\n        // Process children\n        item.children.forEach((child: any, index: number) => {\n          const childAngle = angle + (index - item.children.length / 2) * 0.3;\n          processItem(child, childAngle, radius + 100, item.path);\n        });\n      }\n    };\n\n    documentationTree.forEach((section, index) => {\n      const angle = (index / documentationTree.length) * Math.PI * 2;\n      processItem(section, angle, 150);\n    });\n\n    return nodes;\n  };\n\n  const drawGraph = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw connections\n    ctx.strokeStyle = 'rgba(156, 163, 175, 0.3)';\n    ctx.lineWidth = 1;\n\n    nodes.forEach((node) => {\n      node.connections.forEach((connectionId) => {\n        const connectedNode = nodes.find((n) => n.id === connectionId);\n        if (connectedNode) {\n          ctx.beginPath();\n          ctx.moveTo(node.x, node.y);\n          ctx.lineTo(connectedNode.x, connectedNode.y);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // Draw nodes\n    nodes.forEach((node) => {\n      const isHovered = hoveredNode === node.id;\n      const isCurrent = currentPath === node.path;\n\n      // Node circle\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, isHovered ? 8 : 6, 0, Math.PI * 2);\n\n      if (isCurrent) {\n        ctx.fillStyle = '#3B82F6';\n      } else if (node.category === 'directory') {\n        ctx.fillStyle = '#8B5CF6';\n      } else {\n        ctx.fillStyle = '#6B7280';\n      }\n\n      ctx.fill();\n\n      // Label\n      ctx.fillStyle = '#374151';\n      ctx.font = '12px system-ui';\n      ctx.textAlign = 'center';\n      ctx.fillText(node.label, node.x, node.y + 20);\n    });\n  };\n\n  const handleCanvasClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Find clicked node\n    const clickedNode = nodes.find((node) => {\n      const distance = Math.sqrt(Math.pow(x - node.x, 2) + Math.pow(y - node.y, 2));\n      return distance <= 8;\n    });\n\n    if (clickedNode && onNodeClick) {\n      onNodeClick(clickedNode.path);\n    }\n  };\n\n  const handleCanvasMouseMove = (event: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    // Find hovered node\n    const hoveredNode = nodes.find((node) => {\n      const distance = Math.sqrt(Math.pow(x - node.x, 2) + Math.pow(y - node.y, 2));\n      return distance <= 8;\n    });\n\n    setHoveredNode(hoveredNode?.id || null);\n    canvas.style.cursor = hoveredNode ? 'pointer' : 'default';\n  };\n\n  return (\n    <div className={className}>\n      <canvas\n        ref={canvasRef}\n        width={800}\n        height={600}\n        onClick={handleCanvasClick}\n        onMouseMove={handleCanvasMouseMove}\n        className=\"w-full h-full border border-border-color rounded-lg\"\n      />\n    </div>\n  );\n}\n```\n\n## Code Block Component\n\nAdvanced syntax highlighting with copy functionality:\n\n```tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark, oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { useTheme } from '../providers/ThemeProvider';\n\ninterface CodeSnippet {\n  language: string;\n  code: string;\n  label: string;\n}\n\ninterface CodeBlockProps {\n  snippets: CodeSnippet[];\n  title?: string;\n  defaultLanguage?: string;\n  showLineNumbers?: boolean;\n  className?: string;\n}\n\nexport function CodeBlock({\n  snippets,\n  title,\n  defaultLanguage,\n  showLineNumbers = false,\n  className = '',\n}: CodeBlockProps) {\n  const { isDarkMode } = useTheme();\n  const [activeTab, setActiveTab] = useState(defaultLanguage || snippets[0]?.language || '');\n  const [copied, setCopied] = useState(false);\n\n  const activeSnippet = snippets.find((s) => s.language === activeTab) || snippets[0];\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(activeSnippet.code);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n    }\n  };\n\n  return (\n    <div\n      className={`bg-card-background border border-border-color rounded-lg overflow-hidden ${className}`}\n    >\n      {title && (\n        <div className=\"px-4 py-2 border-b border-border-color\">\n          <h4 className=\"text-sm font-medium text-text-color\">{title}</h4>\n        </div>\n      )}\n\n      {snippets.length > 1 && (\n        <div className=\"flex items-center justify-between px-4 py-2 border-b border-border-color bg-background-color\">\n          <div className=\"flex gap-1\">\n            {snippets.map((snippet) => (\n              <button\n                key={snippet.language}\n                onClick={() => setActiveTab(snippet.language)}\n                className={`px-3 py-1 text-xs rounded transition-colors ${\n                  activeTab === snippet.language\n                    ? 'bg-text-color text-background-color'\n                    : 'text-muted-color hover:text-text-color'\n                }`}\n              >\n                {snippet.label}\n              </button>\n            ))}\n          </div>\n\n          <button\n            onClick={copyToClipboard}\n            className=\"text-xs text-muted-color hover:text-text-color transition-colors\"\n          >\n            {copied ? 'Copied!' : 'Copy'}\n          </button>\n        </div>\n      )}\n\n      <div className=\"relative\">\n        <SyntaxHighlighter\n          language={activeSnippet.language}\n          style={isDarkMode ? oneDark : oneLight}\n          showLineNumbers={showLineNumbers}\n          customStyle={{\n            margin: 0,\n            padding: '1rem',\n            background: 'transparent',\n            fontSize: '0.875rem',\n          }}\n        >\n          {activeSnippet.code}\n        </SyntaxHighlighter>\n\n        {snippets.length === 1 && (\n          <button\n            onClick={copyToClipboard}\n            className=\"absolute top-2 right-2 p-2 text-xs text-muted-color hover:text-text-color transition-colors bg-background-color rounded border border-border-color\"\n          >\n            {copied ? 'Copied!' : 'Copy'}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n```\n\n## Testing Examples\n\nUnit and integration tests for documentation components:\n\n```typescript\n// __tests__/components/Navigation.test.tsx\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { Navigation } from '../components/Navigation';\nimport { ThemeProvider } from '../providers/ThemeProvider';\n\nconst MockedNavigation = () => (\n  <ThemeProvider>\n    <Navigation />\n  </ThemeProvider>\n);\n\ndescribe('Navigation Component', () => {\n  it('renders navigation with search functionality', () => {\n    render(<MockedNavigation />);\n\n    expect(screen.getByText('Documentation')).toBeInTheDocument();\n    expect(screen.getByPlaceholderText(/search docs/i)).toBeInTheDocument();\n  });\n\n  it('opens search modal when search button is clicked', async () => {\n    render(<MockedNavigation />);\n\n    const searchButton = screen.getByText('Search docs...');\n    fireEvent.click(searchButton);\n\n    await waitFor(() => {\n      expect(screen.getByPlaceholderText('Search documentation...')).toBeInTheDocument();\n    });\n  });\n\n  it('filters search results based on query', async () => {\n    render(<MockedNavigation />);\n\n    // Open search\n    fireEvent.click(screen.getByText('Search docs...'));\n\n    // Type search query\n    const searchInput = screen.getByPlaceholderText('Search documentation...');\n    fireEvent.change(searchInput, { target: { value: 'installation' } });\n\n    await waitFor(() => {\n      expect(screen.getByText('Installation')).toBeInTheDocument();\n    });\n  });\n});\n```\n\n## Performance Optimization Examples\n\n```typescript\n// utils/performance.ts\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metrics: Map<string, number[]> = new Map();\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  measureRender(componentName: string, renderTime: number) {\n    if (!this.metrics.has(componentName)) {\n      this.metrics.set(componentName, []);\n    }\n\n    const times = this.metrics.get(componentName)!;\n    times.push(renderTime);\n\n    // Keep only last 100 measurements\n    if (times.length > 100) {\n      times.shift();\n    }\n  }\n\n  getAverageRenderTime(componentName: string): number {\n    const times = this.metrics.get(componentName);\n    if (!times || times.length === 0) return 0;\n\n    return times.reduce((sum, time) => sum + time, 0) / times.length;\n  }\n\n  logPerformanceReport() {\n    console.group('Performance Report');\n    this.metrics.forEach((times, componentName) => {\n      const avg = this.getAverageRenderTime(componentName);\n      console.log(`${componentName}: ${avg.toFixed(2)}ms average`);\n    });\n    console.groupEnd();\n  }\n}\n\n// Custom hook for measuring component render time\nimport { useEffect } from 'react';\n\nexport function useRenderTime(componentName: string) {\n  useEffect(() => {\n    const start = performance.now();\n\n    return () => {\n      const end = performance.now();\n      const renderTime = end - start;\n      PerformanceMonitor.getInstance().measureRender(componentName, renderTime);\n    };\n  });\n}\n```\n\n## Build and Deployment\n\nReal deployment configuration for Next.js:\n\n```javascript\n// next.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    appDir: true,\n  },\n\n  // Enable static export\n  output: 'export',\n\n  // Disable image optimization for static export\n  images: {\n    unoptimized: true,\n  },\n\n  // Custom webpack configuration\n  webpack: (config, { dev, isServer }) => {\n    // Optimize bundle size\n    if (!dev && !isServer) {\n      config.optimization.splitChunks = {\n        chunks: 'all',\n        cacheGroups: {\n          default: false,\n          vendors: false,\n          vendor: {\n            name: 'vendor',\n            chunks: 'all',\n            test: /node_modules/,\n            priority: 20,\n          },\n          common: {\n            name: 'common',\n            minChunks: 2,\n            chunks: 'all',\n            priority: 10,\n            reuseExistingChunk: true,\n            enforce: true,\n          },\n        },\n      };\n    }\n\n    return config;\n  },\n\n  // Environment variables\n  env: {\n    NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n## Error Handling\n\nRobust error handling for documentation features:\n\n```typescript\n// utils/errorHandler.ts\nexport class DocumentationError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public statusCode: number = 500\n  ) {\n    super(message);\n    this.name = 'DocumentationError';\n  }\n}\n\nexport function handleDocumentationError(error: unknown): DocumentationError {\n  if (error instanceof DocumentationError) {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return new DocumentationError(error.message, 'UNKNOWN_ERROR');\n  }\n\n  return new DocumentationError('An unknown error occurred', 'UNKNOWN_ERROR');\n}\n\n// Error boundary for React components\n'use client';\n\nimport React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error: Error }>;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class DocumentationErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Documentation Error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback || DefaultErrorFallback;\n      return <FallbackComponent error={this.state.error!} />;\n    }\n\n    return this.props.children;\n  }\n}\n\nfunction DefaultErrorFallback({ error }: { error: Error }) {\n  return (\n    <div className=\"p-8 text-center\">\n      <h2 className=\"text-2xl font-bold text-red-600 mb-4\">\n        Something went wrong\n      </h2>\n      <p className=\"text-gray-600 mb-4\">\n        {error.message}\n      </p>\n      <button\n        onClick={() => window.location.reload()}\n        className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n      >\n        Reload Page\n      </button>\n    </div>\n  );\n}\n```\n\n---\n\n**Related Documentation:**\n\n- [Advanced Features](../user-guide/advanced-features) - Advanced platform capabilities\n- [Best Practices](./best-practices) - Development guidelines\n- [Icon Customization](./icon-customization) - Adding custom icons\n- [UI Configuration](./ui-configuration) - Theme and layout customization\n",
    "developer-guides/best-practices": "# Best Practices\n\nEssential guidelines for maintaining and extending your documentation system.\n\n## Code Organization\n\n### Component Structure\n\nOrganize components with clear responsibilities:\n\n```\ncomponents/\n├── ui/              # Basic UI components (Button, Input, etc.)\n├── features/        # Feature-specific components\n├── layouts/         # Layout components\n└── providers/       # Context providers\n```\n\n### File Naming Conventions\n\n- **Components**: PascalCase (`DocumentationGraph.tsx`)\n- **Utilities**: camelCase (`formatDate.ts`)\n- **Constants**: SCREAMING_SNAKE_CASE (`API_ENDPOINTS.ts`)\n- **Types**: PascalCase with suffix (`UserInterface.ts`)\n\n### Import Organization\n\n```typescript\n// External libraries\nimport React from 'react';\nimport { motion } from 'framer-motion';\n\n// Internal utilities\nimport { formatDate } from '@/lib/utils';\n\n// Components\nimport { Button } from '@/components/ui/Button';\nimport { ThemeProvider } from '@/providers/ThemeProvider';\n\n// Types\nimport type { DocumentationItem } from '@/types';\n```\n\n## Performance Optimization\n\n### Component Optimization\n\nUse React's performance features effectively:\n\n```typescript\nimport React, { memo, useMemo, useCallback } from 'react'\n\nconst OptimizedComponent = memo(({ data, onUpdate }) => {\n  // Memoize expensive calculations\n  const processedData = useMemo(() => {\n    return data.map(item => transformItem(item))\n  }, [data])\n\n  // Memoize event handlers\n  const handleClick = useCallback((id: string) => {\n    onUpdate(id)\n  }, [onUpdate])\n\n  return (\n    <div>\n      {processedData.map(item => (\n        <Item\n          key={item.id}\n          data={item}\n          onClick={handleClick}\n        />\n      ))}\n    </div>\n  )\n})\n```\n\n### Image Optimization\n\nUse Next.js Image component for optimal performance:\n\n```typescript\nimport Image from 'next/image'\n\n// Good: Optimized with proper sizing\n<Image\n  src=\"/hero-image.jpg\"\n  alt=\"Hero image\"\n  width={800}\n  height={600}\n  priority={true} // For above-the-fold images\n  placeholder=\"blur\"\n  blurDataURL=\"data:image/jpeg;base64,...\"\n/>\n\n// Avoid: Regular img tags for external images\n<img src=\"/hero-image.jpg\" alt=\"Hero\" />\n```\n\n### Bundle Optimization\n\nDynamic imports for code splitting:\n\n```typescript\n// Component-level splitting\nconst HeavyComponent = dynamic(\n  () => import('@/components/HeavyComponent'),\n  {\n    ssr: false,\n    loading: () => <Skeleton />\n  }\n)\n\n// Route-level splitting\nconst AdminPage = dynamic(() => import('@/pages/admin'))\n```\n\n## Accessibility (a11y)\n\n### Semantic HTML\n\nUse appropriate HTML elements:\n\n```typescript\n// Good: Semantic structure\n<main>\n  <header>\n    <h1>Page Title</h1>\n    <nav aria-label=\"Main navigation\">\n      <ul>\n        <li><a href=\"/docs\">Documentation</a></li>\n      </ul>\n    </nav>\n  </header>\n\n  <section aria-labelledby=\"section-title\">\n    <h2 id=\"section-title\">Section Title</h2>\n    <p>Content...</p>\n  </section>\n</main>\n\n// Avoid: Generic divs for everything\n<div>\n  <div>Page Title</div>\n  <div>\n    <div>Documentation</div>\n  </div>\n</div>\n```\n\n### ARIA Labels and Descriptions\n\nProvide context for screen readers:\n\n```typescript\n<button\n  aria-label=\"Close sidebar\"\n  aria-expanded={isOpen}\n  aria-controls=\"sidebar\"\n  onClick={toggleSidebar}\n>\n  <CloseIcon aria-hidden=\"true\" />\n</button>\n\n<input\n  aria-describedby=\"search-help\"\n  placeholder=\"Search documents...\"\n/>\n<div id=\"search-help\" className=\"sr-only\">\n  Search through all documentation pages\n</div>\n```\n\n### Motion Preferences\n\nRespect user motion preferences:\n\n```typescript\nconst { prefersReducedMotion } = useTheme()\n\nconst animations = prefersReducedMotion ? {\n  // No animations\n} : {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.3 }\n}\n\n<motion.div {...animations}>\n  Content\n</motion.div>\n```\n\n### Focus Management\n\nHandle focus for dynamic content:\n\n```typescript\nimport { useRef, useEffect } from 'react'\n\nfunction Modal({ isOpen, onClose }) {\n  const firstFocusableRef = useRef<HTMLButtonElement>(null)\n\n  useEffect(() => {\n    if (isOpen && firstFocusableRef.current) {\n      firstFocusableRef.current.focus()\n    }\n  }, [isOpen])\n\n  return (\n    <div role=\"dialog\" aria-modal=\"true\">\n      <button\n        ref={firstFocusableRef}\n        onClick={onClose}\n      >\n        Close\n      </button>\n    </div>\n  )\n}\n```\n\n## Error Handling\n\n### Error Boundaries\n\nImplement error boundaries for graceful failures:\n\n```typescript\nimport React, { Component, ErrorInfo, ReactNode } from 'react'\n\ninterface Props {\n  children: ReactNode\n  fallback?: ReactNode\n}\n\ninterface State {\n  hasError: boolean\n  error?: Error\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  }\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error }\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo)\n\n    // Send to error reporting service\n    if (typeof window !== 'undefined') {\n      // Analytics or error tracking\n    }\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"error-boundary\">\n          <h2>Something went wrong</h2>\n          <details>\n            {this.state.error?.message}\n          </details>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n```\n\n### Async Error Handling\n\nHandle asynchronous operations safely:\n\n```typescript\nimport { useState, useEffect } from 'react';\n\nfunction useAsyncData<T>(fetchFunction: () => Promise<T>) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n\n    fetchFunction()\n      .then((result) => {\n        if (!cancelled) {\n          setData(result);\n          setError(null);\n        }\n      })\n      .catch((err) => {\n        if (!cancelled) {\n          setError(err);\n          setData(null);\n        }\n      })\n      .finally(() => {\n        if (!cancelled) {\n          setLoading(false);\n        }\n      });\n\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return { data, loading, error };\n}\n```\n\n## Type Safety\n\n### Strict TypeScript Configuration\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"exactOptionalPropertyTypes\": true\n  }\n}\n```\n\n### Interface Design\n\nCreate clear, extensible interfaces:\n\n```typescript\n// Base interface\ninterface BaseItem {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Specific interfaces extending base\ninterface DocumentationPage extends BaseItem {\n  title: string;\n  content: string;\n  path: string;\n  tags: string[];\n}\n\n// Union types for variants\ntype NavigationItem =\n  | { type: 'page'; page: DocumentationPage }\n  | { type: 'separator'; label: string }\n  | { type: 'external'; url: string; label: string };\n```\n\n### Type Guards\n\nImplement type guards for runtime safety:\n\n```typescript\nfunction isDocumentationPage(item: unknown): item is DocumentationPage {\n  return (\n    typeof item === 'object' &&\n    item !== null &&\n    'title' in item &&\n    'content' in item &&\n    'path' in item &&\n    typeof (item as any).title === 'string'\n  );\n}\n\n// Usage\nif (isDocumentationPage(data)) {\n  // TypeScript knows data is DocumentationPage here\n  console.log(data.title);\n}\n```\n\n## Testing Strategies\n\n### Unit Testing\n\nTest components in isolation:\n\n```typescript\n// Component test\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { ThemeProvider } from '@/providers/ThemeProvider'\nimport { DocumentationGraph } from '@/components/DocumentationGraph'\n\ndescribe('DocumentationGraph', () => {\n  function renderWithTheme(component: React.ReactElement) {\n    return render(\n      <ThemeProvider>\n        {component}\n      </ThemeProvider>\n    )\n  }\n\n  test('renders search input', () => {\n    renderWithTheme(\n      <DocumentationGraph currentPath=\"test\" onNodeClick={jest.fn()} />\n    )\n\n    expect(screen.getByPlaceholderText(/search/i)).toBeInTheDocument()\n  })\n\n  test('calls onNodeClick when node is clicked', () => {\n    const handleNodeClick = jest.fn()\n\n    renderWithTheme(\n      <DocumentationGraph currentPath=\"test\" onNodeClick={handleNodeClick} />\n    )\n\n    const node = screen.getByText('Introduction')\n    fireEvent.click(node)\n\n    expect(handleNodeClick).toHaveBeenCalledWith('getting-started/introduction')\n  })\n})\n```\n\n### Integration Testing\n\nTest component interactions:\n\n```typescript\n// Integration test\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { MemoryRouter } from 'react-router-dom'\nimport { DocumentationPage } from '@/pages/DocumentationPage'\n\ndescribe('Documentation Page Integration', () => {\n  test('navigation updates content', async () => {\n    render(\n      <MemoryRouter initialEntries={['/docs/getting-started']}>\n        <DocumentationPage />\n      </MemoryRouter>\n    )\n\n    // Click on a navigation item\n    fireEvent.click(screen.getByText('Installation'))\n\n    // Wait for content to update\n    await waitFor(() => {\n      expect(screen.getByText(/installation guide/i)).toBeInTheDocument()\n    })\n  })\n})\n```\n\n### E2E Testing\n\nTest complete user workflows:\n\n```typescript\n// e2e/navigation.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('user can navigate documentation', async ({ page }) => {\n  await page.goto('/docs');\n\n  // Should load the introduction page by default\n  await expect(page.locator('h1')).toContainText('Introduction');\n\n  // Click on installation in sidebar\n  await page.click('text=Installation');\n\n  // Should navigate to installation page\n  await expect(page).toHaveURL('/docs/getting-started/installation');\n  await expect(page.locator('h1')).toContainText('Installation');\n\n  // Mind map should be visible\n  await expect(page.locator('[data-testid=\"mind-map\"]')).toBeVisible();\n});\n```\n\n## Security Considerations\n\n### Content Security Policy\n\nImplement CSP headers:\n\n```typescript\n// next.config.js\nconst securityHeaders = [\n  {\n    key: 'Content-Security-Policy',\n    value: `\n      default-src 'self';\n      script-src 'self' 'unsafe-eval' 'unsafe-inline';\n      style-src 'self' 'unsafe-inline';\n      img-src 'self' data: https:;\n      font-src 'self' data:;\n    `\n      .replace(/\\s+/g, ' ')\n      .trim(),\n  },\n];\n\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: securityHeaders,\n      },\n    ];\n  },\n};\n```\n\n### Input Sanitization\n\nSanitize user inputs:\n\n```typescript\nimport DOMPurify from 'dompurify'\n\nfunction sanitizeHTML(dirty: string): string {\n  if (typeof window === 'undefined') {\n    // Server-side: use a server-safe sanitizer\n    return dirty // Implement server-side sanitization\n  }\n\n  return DOMPurify.sanitize(dirty)\n}\n\n// Usage in component\nfunction UserContent({ htmlContent }: { htmlContent: string }) {\n  const sanitizedContent = sanitizeHTML(htmlContent)\n\n  return (\n    <div\n      dangerouslySetInnerHTML={{ __html: sanitizedContent }}\n    />\n  )\n}\n```\n\n### Environment Variables\n\nSecure environment variable handling:\n\n```typescript\n// lib/env.ts\nfunction getRequiredEnvVar(key: string): string {\n  const value = process.env[key];\n\n  if (!value) {\n    throw new Error(`Required environment variable ${key} is not set`);\n  }\n\n  return value;\n}\n\nexport const env = {\n  // Public variables (prefixed with NEXT_PUBLIC_)\n  siteUrl: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',\n\n  // Private variables (server-side only)\n  databaseUrl: getRequiredEnvVar('DATABASE_URL'),\n  jwtSecret: getRequiredEnvVar('JWT_SECRET'),\n} as const;\n```\n\n## Deployment Best Practices\n\n### Build Optimization\n\nOptimize for production builds:\n\n```javascript\n// next.config.js\nmodule.exports = {\n  // Static export for CDN deployment\n  output: 'export',\n\n  // Image optimization\n  images: {\n    unoptimized: true, // Required for static export\n  },\n\n  // Disable source maps in production\n  productionBrowserSourceMaps: false,\n\n  // Enable SWC minification\n  swcMinify: true,\n\n  // Optimize bundle\n  experimental: {\n    optimizeCss: true,\n    optimizePackageImports: ['framer-motion'],\n  },\n};\n```\n\n### CI/CD Pipeline\n\nExample GitHub Actions workflow:\n\n```yaml\n# .github/workflows/deploy.yml\nname: Deploy Documentation\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - run: npm ci\n      - run: npm run lint\n      - run: npm run type-check\n      - run: npm run test\n      - run: npm run build\n\n  deploy:\n    if: github.ref == 'refs/heads/main'\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - run: npm ci\n      - run: npm run build\n\n      - name: Deploy to Cloudflare Pages\n        uses: cloudflare/pages-action@v1\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          projectName: docs\n          directory: out\n```\n\n## Monitoring and Analytics\n\n### Performance Monitoring\n\nTrack Core Web Vitals:\n\n```typescript\n// lib/analytics.ts\nexport function reportWebVitals(metric: any) {\n  // Google Analytics 4\n  if (typeof gtag !== 'undefined') {\n    gtag('event', metric.name, {\n      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n      event_category: 'Web Vitals',\n      event_label: metric.id,\n      non_interaction: true,\n    });\n  }\n\n  // Send to your analytics service\n  fetch('/api/analytics/web-vitals', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(metric),\n  });\n}\n\n// pages/_app.tsx\nexport { reportWebVitals };\n```\n\n### Error Tracking\n\nImplement error tracking:\n\n```typescript\n// lib/error-tracking.ts\nclass ErrorTracker {\n  static init() {\n    window.addEventListener('error', this.handleError);\n    window.addEventListener('unhandledrejection', this.handlePromiseRejection);\n  }\n\n  static handleError(event: ErrorEvent) {\n    this.report({\n      type: 'javascript',\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n      stack: event.error?.stack,\n    });\n  }\n\n  static handlePromiseRejection(event: PromiseRejectionEvent) {\n    this.report({\n      type: 'promise',\n      message: event.reason?.message || 'Unhandled promise rejection',\n      stack: event.reason?.stack,\n    });\n  }\n\n  static report(error: any) {\n    fetch('/api/errors', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        ...error,\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        timestamp: new Date().toISOString(),\n      }),\n    }).catch(() => {\n      // Fail silently to avoid infinite loops\n    });\n  }\n}\n\nif (typeof window !== 'undefined') {\n  ErrorTracker.init();\n}\n```\n\n## Documentation Standards\n\n### Code Documentation\n\nDocument complex logic:\n\n````typescript\n/**\n * Calculates relevance score for search results using TF-IDF algorithm\n *\n * @param query - The search query string\n * @param document - The document to score\n * @param corpus - All documents for IDF calculation\n * @returns Relevance score between 0 and 1\n *\n * @example\n * ```typescript\n * const score = calculateRelevance('react hooks', document, allDocuments)\n * console.log(score) // 0.85\n * ```\n */\nfunction calculateRelevance(query: string, document: Document, corpus: Document[]): number {\n  // Implementation details...\n}\n````\n\n### API Documentation\n\nDocument all public APIs:\n\n```typescript\n/**\n * Configuration options for the documentation system\n */\nexport interface DocsConfig {\n  /** Base URL for the documentation site */\n  baseUrl: string;\n\n  /** Theme configuration */\n  theme: {\n    /** Primary color for light mode (hex) */\n    lightPrimary: string;\n    /** Primary color for dark mode (hex) */\n    darkPrimary: string;\n  };\n\n  /** Search configuration */\n  search?: {\n    /** Maximum number of results to show */\n    maxResults?: number;\n    /** Enable fuzzy search */\n    fuzzy?: boolean;\n  };\n}\n```\n\n### README Templates\n\nMaintain consistent documentation:\n\n```markdown\n# Component Name\n\nBrief description of what this component does.\n\n## Usage\n\n\\`\\`\\`typescript\nimport { ComponentName } from '@/components/ComponentName'\n\nfunction App() {\nreturn (\n<ComponentName \n      prop1=\"value\"\n      prop2={42}\n      onAction={handleAction}\n    />\n)\n}\n\\`\\`\\`\n\n## Props\n\n| Prop  | Type   | Default | Description          |\n| ----- | ------ | ------- | -------------------- |\n| prop1 | string | -       | Description of prop1 |\n| prop2 | number | 0       | Description of prop2 |\n\n## Examples\n\n### Basic Usage\n\n[Example code]\n\n### Advanced Usage\n\n[Example code]\n```\n\n## Conclusion\n\nFollowing these best practices will help you maintain a high-quality, accessible, and performant documentation system. Remember to:\n\n- **Prioritize accessibility** from the start\n- **Test thoroughly** at all levels\n- **Monitor performance** in production\n- **Document your code** for future maintainers\n- **Keep security** in mind throughout development\n\nFor more specific guidance, refer to:\n\n- **[Code Examples](./code-examples)** - Practical implementations\n- **[Contributing Guide](./contributing)** - Collaboration guidelines\n- **[Troubleshooting](../user-guide/troubleshooting)** - Common issues and solutions\n",
    "developer-guides/contributing": "# Contributing\n\nThank you for your interest in contributing to the documentation system! This guide will help you get started.\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18+\n- npm 8+\n- Git\n\n### Setup\n\n1. **Fork the repository**\n2. **Clone your fork**:\n\n   ```bash\n   git clone https://github.com/your-username/docs-template.git\n   cd docs-template\n   ```\n\n3. **Install dependencies**:\n\n   ```bash\n   npm install\n   ```\n\n4. **Start development server**:\n\n   ```bash\n   npm run dev\n   ```\n\n5. **Open** http://localhost:3000\n\n## Development Workflow\n\n### Branch Naming\n\nUse descriptive branch names:\n\n- `feature/add-search-functionality`\n- `fix/mobile-navigation-bug`\n- `docs/update-api-reference`\n- `refactor/simplify-theme-provider`\n\n### Commit Messages\n\nFollow conventional commit format:\n\n```\ntype(scope): description\n\n[optional body]\n\n[optional footer]\n```\n\n**Types:**\n\n- `feat`: New feature\n- `fix`: Bug fix\n- `docs`: Documentation changes\n- `style`: Code style changes\n- `refactor`: Code refactoring\n- `test`: Adding tests\n- `chore`: Maintenance tasks\n\n**Examples:**\n\n```\nfeat(mindmap): add search functionality to documentation graph\n\nfix(mobile): resolve sidebar close button positioning issue\n\ndocs(api): update endpoints documentation with new parameters\n```\n\n## Code Standards\n\n### TypeScript\n\n- Use strict type checking\n- Prefer interfaces over types for object shapes\n- Include JSDoc comments for public APIs\n\n```typescript\n/**\n * Configuration for the documentation graph component\n */\ninterface GraphConfig {\n  /** Maximum number of nodes to display */\n  maxNodes: number;\n  /** Enable search functionality */\n  enableSearch: boolean;\n}\n```\n\n### React Components\n\n- Use functional components with hooks\n- Memoize expensive operations\n- Follow the single responsibility principle\n\n```typescript\nimport React, { memo, useMemo } from 'react'\n\ninterface Props {\n  data: GraphData\n  onNodeClick: (id: string) => void\n}\n\nexport const DocumentationGraph = memo<Props>(({ data, onNodeClick }) => {\n  const processedNodes = useMemo(() => {\n    return data.nodes.map(processNode)\n  }, [data.nodes])\n\n  return (\n    <svg>\n      {processedNodes.map(node => (\n        <Node key={node.id} data={node} onClick={onNodeClick} />\n      ))}\n    </svg>\n  )\n})\n```\n\n### CSS/Styling\n\n- Use CSS custom properties for theming\n- Follow BEM methodology for class names\n- Ensure responsive design\n\n```css\n.documentation-graph {\n  --graph-primary: var(--primary-color);\n  --graph-background: var(--background-color);\n}\n\n.documentation-graph__node {\n  fill: var(--graph-primary);\n  transition: fill 0.2s ease;\n}\n\n.documentation-graph__node--active {\n  fill: var(--accent-color);\n}\n```\n\n## Testing\n\n### Running Tests\n\n```bash\n# Unit tests\nnpm test\n\n# E2E tests\nnpm run test:e2e\n\n# Test coverage\nnpm run test:coverage\n```\n\n### Writing Tests\n\nWrite tests for:\n\n- Component behavior\n- User interactions\n- Edge cases\n- Accessibility features\n\n```typescript\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { DocumentationGraph } from '../DocumentationGraph'\n\ndescribe('DocumentationGraph', () => {\n  const mockData = {\n    nodes: [\n      { id: '1', title: 'Introduction', x: 0, y: 0 }\n    ]\n  }\n\n  test('renders nodes correctly', () => {\n    render(\n      <DocumentationGraph\n        data={mockData}\n        onNodeClick={jest.fn()}\n      />\n    )\n\n    expect(screen.getByText('Introduction')).toBeInTheDocument()\n  })\n\n  test('calls onNodeClick when node is clicked', () => {\n    const handleClick = jest.fn()\n\n    render(\n      <DocumentationGraph\n        data={mockData}\n        onNodeClick={handleClick}\n      />\n    )\n\n    fireEvent.click(screen.getByText('Introduction'))\n    expect(handleClick).toHaveBeenCalledWith('1')\n  })\n})\n```\n\n## Documentation\n\n### Code Documentation\n\n- Add JSDoc comments for all public functions and components\n- Include usage examples\n- Document complex algorithms\n\n### Content Documentation\n\n- Use clear, concise language\n- Include code examples\n- Add screenshots when helpful\n- Keep content up to date\n\n### API Documentation\n\nDocument all public APIs:\n\n````typescript\n/**\n * Theme provider for the documentation system\n *\n * @example\n * ```tsx\n * <ThemeProvider>\n *   <App />\n * </ThemeProvider>\n * ```\n */\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  // Implementation\n}\n````\n\n## Accessibility\n\n### Requirements\n\nAll contributions must:\n\n- Support keyboard navigation\n- Include proper ARIA labels\n- Respect motion preferences\n- Meet WCAG 2.1 AA standards\n\n### Testing Accessibility\n\n```bash\n# Install axe-core\nnpm install --save-dev @axe-core/react\n\n# Run accessibility tests\nnpm run test:a11y\n```\n\n### Common Patterns\n\n```typescript\n// Keyboard navigation\n<button\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      handleClick()\n    }\n  }}\n>\n  Action\n</button>\n\n// Screen reader support\n<div\n  role=\"region\"\n  aria-labelledby=\"section-title\"\n  aria-describedby=\"section-description\"\n>\n  <h2 id=\"section-title\">Section Title</h2>\n  <p id=\"section-description\">Description for screen readers</p>\n</div>\n```\n\n## Performance\n\n### Guidelines\n\n- Use React.memo for expensive components\n- Implement proper code splitting\n- Optimize images and assets\n- Monitor Core Web Vitals\n\n### Profiling\n\n```bash\n# Build analysis\nnpm run analyze\n\n# Performance testing\nnpm run lighthouse\n```\n\n## Pull Request Process\n\n### Before Submitting\n\n1. **Run all tests**: `npm run test:all`\n2. **Check linting**: `npm run lint`\n3. **Type check**: `npm run type-check`\n4. **Build successfully**: `npm run build`\n5. **Test accessibility**: `npm run test:a11y`\n\n### PR Template\n\n```markdown\n## Description\n\nBrief description of changes\n\n## Type of Change\n\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n- [ ] Code refactoring\n\n## Testing\n\n- [ ] Unit tests pass\n- [ ] E2E tests pass\n- [ ] Manual testing completed\n- [ ] Accessibility testing completed\n\n## Screenshots/GIFs\n\nIf applicable, add screenshots or GIFs\n\n## Checklist\n\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] No new warnings/errors\n```\n\n### Review Process\n\n1. **Automated checks** must pass\n2. **Code review** by maintainers\n3. **Accessibility review** if UI changes\n4. **Performance review** for significant changes\n\n## Issue Reporting\n\n### Bug Reports\n\nUse the bug report template:\n\n```markdown\n## Bug Description\n\nClear description of the bug\n\n## Steps to Reproduce\n\n1. Go to '...'\n2. Click on '...'\n3. See error\n\n## Expected Behavior\n\nWhat should have happened\n\n## Actual Behavior\n\nWhat actually happened\n\n## Environment\n\n- OS: [e.g., macOS 13.0]\n- Browser: [e.g., Chrome 110]\n- Node.js: [e.g., 18.12.0]\n```\n\n### Feature Requests\n\nUse the feature request template:\n\n```markdown\n## Feature Description\n\nClear description of the feature\n\n## Use Case\n\nWhy is this feature needed?\n\n## Proposed Solution\n\nHow would you implement this?\n\n## Alternatives Considered\n\nAny alternative solutions?\n\n## Additional Context\n\nScreenshots, mockups, etc.\n```\n\n## Release Process\n\n### Versioning\n\nWe follow [Semantic Versioning](https://semver.org/):\n\n- **MAJOR**: Breaking changes\n- **MINOR**: New features (backward compatible)\n- **PATCH**: Bug fixes (backward compatible)\n\n### Release Checklist\n\n1. Update version in `package.json`\n2. Update `CHANGELOG.md`\n3. Create release tag\n4. Update documentation\n5. Deploy to production\n\n## Community Guidelines\n\n### Code of Conduct\n\n- Be respectful and inclusive\n- Welcome newcomers\n- Focus on constructive feedback\n- Help others learn\n\n### Communication\n\n- **GitHub Issues**: Bug reports and feature requests\n- **Discussions**: Questions and general discussion\n- **PR Reviews**: Code-specific feedback\n\n## Getting Help\n\n### Resources\n\n- **Documentation**: `/docs`\n- **Examples**: `/examples`\n- **API Reference**: `/docs/api-reference`\n\n### Contact\n\n- **Issues**: GitHub Issues\n- **Questions**: GitHub Discussions\n- **Security**: security@your-domain.com\n\n## Development Tips\n\n### Useful Commands\n\n```bash\n# Development\nnpm run dev              # Start dev server\nnpm run dev:turbo        # Start with turbo mode\n\n# Testing\nnpm run test             # Run unit tests\nnpm run test:watch       # Watch mode\nnpm run test:coverage    # With coverage\nnpm run test:e2e         # E2E tests\n\n# Code Quality\nnpm run lint             # Lint code\nnpm run lint:fix         # Fix linting issues\nnpm run type-check       # TypeScript check\nnpm run format           # Format code\n\n# Build\nnpm run build            # Production build\nnpm run analyze          # Bundle analysis\nnpm run lighthouse       # Performance audit\n```\n\n### Debug Mode\n\nEnable debug features:\n\n```bash\n# Environment variable\nDEBUG=true npm run dev\n\n# Or in browser console\nlocalStorage.setItem('debugMode', 'true')\n```\n\n### Hot Reloading\n\nFor instant feedback during development:\n\n- Component changes reload automatically\n- CSS changes apply without refresh\n- Content changes update in real-time\n\n## Architecture Decisions\n\n### Technology Choices\n\n- **Next.js 13+**: App Router for better developer experience\n- **TypeScript**: Type safety and better tooling\n- **Framer Motion**: Smooth animations\n- **Tailwind CSS**: Utility-first styling\n- **React Testing Library**: Component testing\n\n### Folder Structure\n\n```\nproject/\n├── app/                 # Next.js app directory\n│   ├── components/      # Reusable components\n│   ├── docs/           # Documentation pages\n│   ├── providers/      # Context providers\n│   └── globals.css     # Global styles\n├── public/             # Static assets\n├── tests/              # Test files\n└── docs/               # Project documentation\n```\n\n## Future Roadmap\n\n### Planned Features\n\n- [ ] Full-text search with fuzzy matching\n- [ ] Dark/light theme auto-switching\n- [ ] PDF export functionality\n- [ ] Multi-language support\n- [ ] Analytics dashboard\n- [ ] Comment system\n- [ ] Version history\n\n### Long-term Goals\n\n- Improved performance\n- Better accessibility\n- Enhanced mobile experience\n- Plugin system\n- Advanced theming\n\nThank you for contributing to make documentation better for everyone! 🚀\n",
    "developer-guides/design-system": "# Design System Guide\n\nA comprehensive guide to the design system, color palettes, typography, and components that make up the Phantasy documentation platform.\n\n## Color Palettes\n\nOur design system uses two primary color schemes that automatically adapt based on the user's theme preference, providing a cohesive visual experience across light and dark modes.\n\n### Matcha Green (Light Mode)\n\nThe light mode uses a nature-inspired matcha green palette that promotes readability and calmness.\n\n```ColorPalette\n{\n  \"colors\": [\n    {\n      \"name\": \"Primary\",\n      \"hex\": \"#678D58\",\n      \"rgb\": \"103, 141, 88\",\n      \"usage\": \"Primary actions, links, focus states\"\n    },\n    {\n      \"name\": \"Secondary\",\n      \"hex\": \"#A3C9A8\",\n      \"rgb\": \"163, 201, 168\",\n      \"usage\": \"Secondary elements, hover states\"\n    },\n    {\n      \"name\": \"Accent\",\n      \"hex\": \"#557153\",\n      \"rgb\": \"85, 113, 83\",\n      \"usage\": \"Accent elements, highlights\"\n    }\n  ]\n}\n```\n\n### Sakura Pink (Dark Mode)\n\nThe dark mode features a vibrant sakura pink palette that maintains excellent contrast while creating an engaging nighttime experience.\n\n```ColorPalette\n{\n  \"colors\": [\n    {\n      \"name\": \"Primary\",\n      \"hex\": \"#FF85A1\",\n      \"rgb\": \"255, 133, 161\",\n      \"usage\": \"Primary actions, links, focus states\"\n    },\n    {\n      \"name\": \"Secondary\",\n      \"hex\": \"#FFC4DD\",\n      \"rgb\": \"255, 196, 221\",\n      \"usage\": \"Secondary elements, hover states\"\n    },\n    {\n      \"name\": \"Accent\",\n      \"hex\": \"#FF4989\",\n      \"rgb\": \"255, 73, 137\",\n      \"usage\": \"Accent elements, highlights\"\n    }\n  ]\n}\n```\n\n### Neutral Colors\n\nSupporting colors that work across both themes for backgrounds, text, and borders.\n\n```ColorPalette\n{\n  \"colors\": [\n    {\n      \"name\": \"Light Background\",\n      \"hex\": \"#FAFBF9\",\n      \"rgb\": \"250, 251, 249\",\n      \"usage\": \"Main background in light mode\"\n    },\n    {\n      \"name\": \"Dark Background\",\n      \"hex\": \"#0B0D0F\",\n      \"rgb\": \"11, 13, 15\",\n      \"usage\": \"Main background in dark mode\"\n    },\n    {\n      \"name\": \"Text Color\",\n      \"hex\": \"#1F2937\",\n      \"rgb\": \"31, 41, 55\",\n      \"usage\": \"Primary text color\"\n    },\n    {\n      \"name\": \"Muted Text\",\n      \"hex\": \"#6B7280\",\n      \"rgb\": \"107, 114, 128\",\n      \"usage\": \"Secondary text, captions\"\n    }\n  ]\n}\n```\n\n## Wallet Copy Button Component\n\nOur design system includes interactive wallet address components with copy functionality. Here's how to implement them:\n\n### Basic Wallet Address\n\n```html\n<code class=\"wallet-address\" data-address=\"0x1234567890abcdef1234567890abcdef12345678\">\n  0x1234567890abcdef1234567890abcdef12345678\n</code>\n```\n\n### Wallet Info Block\n\n```html\n<div class=\"wallet-info\">\n  <p class=\"profile-info\">\n    <strong>Ethereum:</strong>\n    <code class=\"wallet-address\" data-address=\"0x1234567890abcdef1234567890abcdef12345678\">\n      0x1234567890abcdef1234567890abcdef12345678\n    </code>\n  </p>\n  <p class=\"profile-info\">\n    <strong>Bitcoin:</strong>\n    <code class=\"wallet-address\" data-address=\"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\">\n      bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\n    </code>\n  </p>\n</div>\n```\n\nThe wallet addresses automatically get copy buttons when processed by the content renderer. The copy functionality includes:\n\n- **Instant clipboard access** - One-click copying\n- **Visual feedback** - Button changes to checkmark when copied\n- **Toast notification** - \"Copied to clipboard!\" message\n- **Automatic reset** - Button returns to copy icon after 1.5 seconds\n\n### CSS Classes for Wallet Components\n\n```css\n/* Wallet address styling */\n.wallet-address {\n  font-family: var(--mono-font);\n  background-color: rgba(0, 0, 0, 0.05);\n  padding: 0.4rem 0.8rem;\n  padding-right: 2.5rem;\n  border-radius: 4px;\n  border: 1px solid var(--border-color);\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n/* Copy button styling */\n.copy-button {\n  background-color: rgba(0, 0, 0, 0.1);\n  border: 1px solid var(--border-color);\n  cursor: pointer;\n  padding: 4px 8px;\n  border-radius: 4px;\n  opacity: 0.9;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n}\n```\n\n## Design Tokens\n\n### CSS Custom Properties\n\nAll colors are available as CSS custom properties that automatically adapt to the current theme:\n\n```css\n/* Primary colors (theme-aware) */\n--primary-color: /* #678D58 (light) | #FF85A1 (dark) */ --secondary-color:\n  /* #A3C9A8 (light) | #FFC4DD (dark) */\n  --accent-color: /* #557153 (light) | #FF4989 (dark) */ /* Background colors */\n  --background-color: /* #FAFBF9 (light) | #0B0D0F (dark) */\n  --card-color: /* #FFFFFF (light) | #111317 (dark) */ /* Text colors */\n  --text-color: /* #1F2937 (light) | #F8FAFC (dark) */\n  --text-secondary: /* #374151 (light) | #E2E8F0 (dark) */\n  --muted-color: /* #6B7280 (light) | #94A3B8 (dark) */ /* Border colors */\n  --border-color: /* #222 (light) | #bbb (dark) */\n  --border-soft: /* #f2f2f2 (light) | #23232a (dark) */\n  --border-unified: /* #d1d5db (light) | #374151 (dark) */;\n```\n\n### RGB Values\n\nFor opacity and rgba() usage:\n\n```css\n/* RGB values for transparency effects */\n--primary-color-rgb: /* 103, 141, 88 (light) | 255, 133, 161 (dark) */;\n```\n\n## Typography\n\n### Font Families\n\nThe design system uses two primary font families:\n\n<div style=\"margin: 2rem 0;\">\n  <div style=\"font-family: var(--title-font); font-size: 2rem; margin-bottom: 1rem; color: var(--text-color);\">\n    Urbanist - Display & Headings\n  </div>\n  <div style=\"font-family: var(--mono-font); font-size: 1.2rem; margin-bottom: 0.5rem; color: var(--text-secondary);\">\n    MapleMono - Code & Technical Text\n  </div>\n  <div style=\"font-family: var(--body-font); font-size: 1rem; color: var(--text-color);\">\n    Urbanist - Body text and general content for optimal readability.\n  </div>\n</div>\n\n### Font Weights & Styles\n\n<div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin: 2rem 0;\">\n  <div style=\"padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;\">\n    <div style=\"font-family: var(--title-font); font-weight: 300; font-size: 1.2rem; margin-bottom: 0.5rem;\">Light (300)</div>\n    <div style=\"font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);\">Urbanist Light</div>\n  </div>\n  <div style=\"padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;\">\n    <div style=\"font-family: var(--title-font); font-weight: 400; font-size: 1.2rem; margin-bottom: 0.5rem;\">Regular (400)</div>\n    <div style=\"font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);\">Urbanist Regular</div>\n  </div>\n  <div style=\"padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;\">\n    <div style=\"font-family: var(--title-font); font-weight: 700; font-size: 1.2rem; margin-bottom: 0.5rem;\">Bold (700)</div>\n    <div style=\"font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);\">Urbanist Bold</div>\n  </div>\n  <div style=\"padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;\">\n    <div style=\"font-family: var(--title-font); font-weight: 900; font-size: 1.2rem; margin-bottom: 0.5rem;\">Black (900)</div>\n    <div style=\"font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);\">Urbanist Black</div>\n  </div>\n</div>\n\n### CSS Font Classes\n\n```css\n/* Font family classes */\n.font-title {\n  font-family: var(--title-font);\n} /* Urbanist */\n.font-mono {\n  font-family: var(--mono-font);\n} /* MapleMono */\n\n/* Heading styles */\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: var(--title-font);\n}\n```\n\n## Component Examples\n\n### Interactive Copy Buttons\n\nThe system includes reusable copy button functionality for various use cases:\n\n#### Color Value Copy\n\n```html\n<!-- Example: Color value with copy functionality -->\n<div\n  style=\"background-color: var(--primary-color); padding: 1rem; border-radius: 8px; position: relative;\"\n>\n  <code\n    class=\"wallet-address\"\n    data-address=\"#678D58\"\n    style=\"background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3);\"\n  >\n    #678D58\n  </code>\n</div>\n```\n\n#### API Key Copy\n\n```html\n<!-- Example: API key with copy functionality -->\n<code class=\"wallet-address\" data-address=\"sk-1234567890abcdef1234567890abcdef\">\n  sk-1234567890abcdef1234567890abcdef\n</code>\n```\n\n### Notification Styles\n\nThe system includes styled notifications using our design tokens:\n\n<div class=\"notification notification-info\">\n  <img src=\"/assets/icons/pixel-info-solid.svg\" alt=\"Info\" width=\"20\" height=\"20\" />\n  <div>\n    <strong>Info:</strong> This notification uses the design system's info styling with proper spacing and typography.\n  </div>\n</div>\n\n<div class=\"notification notification-success\">\n  <img src=\"/assets/icons/pixel-check-solid.svg\" alt=\"Success\" width=\"20\" height=\"20\" />\n  <div>\n    <strong>Success:</strong> Success notifications maintain consistency with the overall design system.\n  </div>\n</div>\n\n<div class=\"notification notification-warning\">\n  <img src=\"/assets/icons/pixel-warning-solid.svg\" alt=\"Warning\" width=\"20\" height=\"20\" />\n  <div>\n    <strong>Warning:</strong> Warning notifications use appropriate contrast ratios for accessibility.\n  </div>\n</div>\n\n<div class=\"notification notification-error\">\n  <img src=\"/assets/icons/pixel-error-solid.svg\" alt=\"Error\" width=\"20\" height=\"20\" />\n  <div>\n    <strong>Error:</strong> Error notifications stand out while maintaining design consistency.\n  </div>\n</div>\n\n## Spacing System\n\nThe design system uses a consistent spacing scale:\n\n<div style=\"margin: 2rem 0;\">\n  <div style=\"display: flex; align-items: center; margin-bottom: 1rem;\">\n    <div style=\"width: 0.25rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;\"></div>\n    <code>0.25rem (4px)</code> - Minimal spacing\n  </div>\n  <div style=\"display: flex; align-items: center; margin-bottom: 1rem;\">\n    <div style=\"width: 0.5rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;\"></div>\n    <code>0.5rem (8px)</code> - Small spacing\n  </div>\n  <div style=\"display: flex; align-items: center; margin-bottom: 1rem;\">\n    <div style=\"width: 1rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;\"></div>\n    <code>1rem (16px)</code> - Base spacing\n  </div>\n  <div style=\"display: flex; align-items: center; margin-bottom: 1rem;\">\n    <div style=\"width: 1.5rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;\"></div>\n    <code>1.5rem (24px)</code> - Medium spacing\n  </div>\n  <div style=\"display: flex; align-items: center; margin-bottom: 1rem;\">\n    <div style=\"width: 2rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;\"></div>\n    <code>2rem (32px)</code> - Large spacing\n  </div>\n  <div style=\"display: flex; align-items: center; margin-bottom: 1rem;\">\n    <div style=\"width: 3rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;\"></div>\n    <code>3rem (48px)</code> - Extra large spacing\n  </div>\n</div>\n\n## Border Radius\n\nConsistent border radius values across components:\n\n<div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin: 2rem 0;\">\n  <div style=\"background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 4px; padding: 1rem; text-align: center;\">\n    <code>4px</code><br/>Small radius\n  </div>\n  <div style=\"background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 6px; padding: 1rem; text-align: center;\">\n    <code>6px</code><br/>Medium radius\n  </div>\n  <div style=\"background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 8px; padding: 1rem; text-align: center;\">\n    <code>8px</code><br/>Base radius\n  </div>\n  <div style=\"background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 12px; padding: 1rem; text-align: center;\">\n    <code>12px</code><br/>Large radius\n  </div>\n</div>\n\n## Accessibility\n\n### Color Contrast\n\nAll color combinations meet WCAG 2.1 AA standards:\n\n- **Text on Primary**: White text on primary colors meets 4.5:1 contrast ratio\n- **Primary on Background**: Primary colors on background meet 3:1 contrast ratio for large text\n- **Muted Text**: Secondary text colors maintain at least 4.5:1 contrast with backgrounds\n\n### Reduced Motion\n\nThe design system respects user preferences for reduced motion:\n\n```css\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n```\n\n### Focus States\n\nAll interactive elements include visible focus indicators:\n\n```css\ninput:focus,\nbutton:focus {\n  outline: 2px solid var(--primary-color);\n  outline-offset: 2px;\n}\n```\n\n## Implementation Guide\n\n### Using Color Palettes in Components\n\n1. **Always use CSS custom properties** instead of hardcoded colors\n2. **Test in both light and dark modes** to ensure proper contrast\n3. **Use semantic color names** rather than specific color values\n\n```css\n/* Good */\n.my-component {\n  background-color: var(--card-color);\n  color: var(--text-color);\n  border: 1px solid var(--border-unified);\n}\n\n/* Avoid */\n.my-component {\n  background-color: #ffffff;\n  color: #1f2937;\n  border: 1px solid #d1d5db;\n}\n```\n\n### Adding Copy Functionality\n\nTo add copy buttons to any element:\n\n1. **Add the data-address attribute** with the value to copy\n2. **Use the wallet-address class** for styling\n3. **The system automatically adds** copy buttons and functionality\n\n```html\n<code class=\"wallet-address\" data-address=\"VALUE_TO_COPY\"> Displayed Text </code>\n```\n\n### Adding New Colors\n\nWhen extending the palette:\n\n1. **Define both light and dark variants**\n2. **Add RGB values for transparency**\n3. **Test accessibility compliance**\n4. **Document usage guidelines**\n\n```css\n:root {\n  --new-color: #your-light-color;\n  --new-color-rgb: r, g, b;\n}\n\n.dark {\n  --new-color: #your-dark-color;\n  --new-color-rgb: r, g, b;\n}\n```\n\n## Resources\n\n### Color Tools\n\n- [Contrast Checker](https://webaim.org/resources/contrastchecker/) - Verify WCAG compliance\n- [Coolors.co](https://coolors.co/) - Generate harmonious color palettes\n- [Adobe Color](https://color.adobe.com/) - Advanced color theory tools\n\n### Typography Resources\n\n- [Google Fonts](https://fonts.google.com/) - Web font hosting\n- [Font Squirrel](https://www.fontsquirrel.com/) - Font testing and optimization\n\n### Design System Examples\n\n- [Material Design](https://material.io/design/color/) - Google's design system\n- [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/) - Apple's design principles\n- [Atlassian Design System](https://atlassian.design/) - Enterprise design system example\n\n---\n\nThis design system provides the foundation for consistent, accessible, and beautiful user interfaces across the Phantasy documentation platform.\n",
    "developer-guides/ui-configuration": "# UI Configuration Guide\n\nThis documentation site includes configurable UI features that can be easily customized by users who fork the project. All UI configuration is centralized in the `app/config/ui.ts` file.\n\n## Mobile File Tree Toggle\n\n### Overview\n\nThe mobile file tree toggle is a floating action button that appears on mobile devices to provide quick access to the documentation sidebar. This feature can be enabled or disabled based on your preferences.\n\n### Configuration\n\nTo configure the mobile file tree toggle, edit the `app/config/ui.ts` file:\n\n```typescript\nexport const uiConfig: UIConfig = {\n  // Enable or disable the floating mobile toggle button\n  showMobileFileTreeToggle: false, // Change to true to enable\n\n  // Position the toggle button\n  mobileTogglePosition: 'bottom-left', // Options: 'bottom-left', 'bottom-right', 'top-left', 'top-right'\n};\n```\n\n### Available Options\n\n#### `showMobileFileTreeToggle`\n\n- **Type**: `boolean`\n- **Default**: `false`\n- **Description**: Controls whether the floating mobile toggle button is visible on mobile devices\n\n**When enabled (`true`)**:\n\n- Shows a floating action button on mobile screens\n- Button appears when the sidebar is hidden\n- Provides quick access to the file tree\n\n**When disabled (`false`)**:\n\n- No floating button appears\n- Users can still access the file tree via the navigation menu\n- Cleaner mobile interface\n\n#### `mobileTogglePosition`\n\n- **Type**: `'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'`\n- **Default**: `'bottom-left'`\n- **Description**: Controls the position of the floating toggle button\n\n**Position Options**:\n\n- `'bottom-left'`: Bottom-left corner of the screen\n- `'bottom-right'`: Bottom-right corner of the screen\n- `'top-left'`: Top-left corner of the screen\n- `'top-right'`: Top-right corner of the screen\n\n### Usage Examples\n\n#### Example 1: Enable with Bottom-Right Position\n\n```typescript\nexport const uiConfig: UIConfig = {\n  showMobileFileTreeToggle: true,\n  mobileTogglePosition: 'bottom-right',\n};\n```\n\n#### Example 2: Disable (Default)\n\n```typescript\nexport const uiConfig: UIConfig = {\n  showMobileFileTreeToggle: false,\n  mobileTogglePosition: 'bottom-left', // Position doesn't matter when disabled\n};\n```\n\n### Alternative Access Methods\n\nWhen the mobile toggle is disabled, users can still access the file tree through:\n\n1. **Navigation Menu**: Tap the hamburger menu (☰) in the top-right corner, then select \"Show Documentation Tree\"\n2. **Desktop View**: The sidebar is always visible on desktop screens\n\n### Implementation Details\n\nThe mobile toggle system uses:\n\n- **Responsive Design**: Only appears on mobile screens (`< 768px width`)\n- **State Management**: Automatically hides when sidebar is open\n- **Accessibility**: Includes proper ARIA labels and keyboard navigation\n- **Smooth Animations**: Uses Framer Motion for polished interactions\n- **Theme Integration**: Adapts to light/dark mode automatically\n\n### Why It's Disabled by Default\n\nThe mobile file tree toggle is disabled by default because:\n\n1. **Clean Interface**: Provides a cleaner mobile experience without floating elements\n2. **Alternative Access**: Users can access the file tree via the navigation menu\n3. **Customizable**: Projects can easily enable it if needed for their specific use case\n4. **Reduced Clutter**: Avoids visual competition with other floating elements\n\n### Customization Tips\n\n- **Brand Consistency**: Consider your brand's design language when choosing the position\n- **User Flow**: Place the button where it won't interfere with content interaction\n- **Testing**: Test on various mobile devices to ensure the position works well\n- **Analytics**: If you have analytics, monitor usage to optimize placement\n\n## File Structure\n\n```\napp/\n├── config/\n│   └── ui.ts                    # UI configuration file\n├── docs/\n│   └── components/\n│       └── DocumentationPage.tsx # Uses the configuration\n└── docs/\n    └── content/\n        └── developer-guides/\n            └── ui-configuration.md # This file\n```\n\n## Future Enhancements\n\nThe UI configuration system is designed to be extensible. Future configuration options might include:\n\n- Sidebar width preferences\n- Default theme selection\n- Animation preferences\n- Content layout options\n- Search behavior settings\n\nTo request new configuration options, please open an issue in the project repository.\n",
    "developer-guides/icon-customization": "# Icon Customization Guide\n\n## Overview\n\nThis documentation site supports custom icons throughout the interface. You can easily add new icons from [Iconify Design](https://iconify.design) or create your own custom SVG icons.\n\n## Quick Start\n\n### 1. Find Your Icon\n\nVisit [iconify.design](https://iconify.design) and search for the icon you want:\n\n1. Browse the icon library\n2. Click on your desired icon\n3. Select \"SVG\" from the copy options\n4. Copy the SVG code\n\n### 2. Add the Icon\n\nSave your SVG file in the `/public/assets/icons/` directory:\n\n```bash\n# Example icon file structure\npublic/\n  assets/\n    icons/\n      pixel-home.svg\n      pixel-user.svg\n      pixel-settings.svg\n      your-new-icon.svg\n```\n\n### 3. Use the Icon\n\nImport and use your icon in any component:\n\n```tsx\nimport Image from 'next/image';\n\nfunction MyComponent() {\n  return <Image src=\"/assets/icons/your-new-icon.svg\" alt=\"Description\" width={20} height={20} />;\n}\n```\n\n## Icon Standards\n\n### Naming Convention\n\nFollow these naming patterns for consistency:\n\n- **Regular icons**: `icon-name.svg` (e.g., `home.svg`, `user.svg`)\n- **Pixel art style**: `pixel-name.svg` (e.g., `pixel-home.svg`)\n- **Brand icons**: `brand-name.svg` (e.g., `brand-github.svg`)\n\n### Size Guidelines\n\n| Use Case         | Recommended Size | Example                            |\n| ---------------- | ---------------- | ---------------------------------- |\n| Navigation icons | 20x20px          | Header buttons, menu items         |\n| Content icons    | 16x16px          | Inline with text, small indicators |\n| Feature icons    | 24x24px          | Section headers, callouts          |\n| Large icons      | 32x32px+         | Hero sections, major features      |\n\n### Color Standards\n\nIcons should work with both light and dark themes:\n\n```css\n/* Theme-aware icon styling */\n.icon {\n  color: var(--icon-color);\n  filter: none;\n}\n\n/* Dark mode adjustments for light icons */\n.dark .icon-light {\n  filter: invert(1);\n}\n\n/* Light mode adjustments for dark icons */\n.icon-dark {\n  filter: none;\n}\n\n.dark .icon-dark {\n  filter: invert(1);\n}\n```\n\n## Implementation Examples\n\n### Navigation Icons\n\nAdd icons to the navigation menu:\n\n```tsx\n// In Navigation.tsx\nconst navItems = [\n  {\n    label: 'Home',\n    href: '/',\n    icon: '/assets/icons/pixel-home.svg',\n  },\n  {\n    label: 'Docs',\n    href: '/docs',\n    icon: '/assets/icons/pixel-book.svg',\n  },\n];\n```\n\n### Content Icons\n\nUse icons in documentation content:\n\n```markdown\n## Features\n\n![Feature Icon](/assets/icons/pixel-star.svg) **Advanced Analytics**  \nGet detailed insights into your data.\n\n![Security Icon](/assets/icons/pixel-shield.svg) **Enterprise Security**  \nBank-level security for your applications.\n```\n\n### Interactive Icons\n\nCreate interactive icon components:\n\n```tsx\n'use client';\n\nimport { useState } from 'react';\nimport Image from 'next/image';\n\nfunction ToggleIcon({\n  activeIcon,\n  inactiveIcon,\n  isActive,\n  onToggle,\n}: {\n  activeIcon: string;\n  inactiveIcon: string;\n  isActive: boolean;\n  onToggle: () => void;\n}) {\n  return (\n    <button\n      onClick={onToggle}\n      className=\"p-2 rounded-full transition-colors hover:bg-gray-100 dark:hover:bg-gray-800\"\n    >\n      <Image\n        src={isActive ? activeIcon : inactiveIcon}\n        alt={isActive ? 'Active' : 'Inactive'}\n        width={20}\n        height={20}\n        className=\"transition-opacity\"\n      />\n    </button>\n  );\n}\n\n// Usage\nfunction MyComponent() {\n  const [isLiked, setIsLiked] = useState(false);\n\n  return (\n    <ToggleIcon\n      activeIcon=\"/assets/icons/pixel-heart-filled.svg\"\n      inactiveIcon=\"/assets/icons/pixel-heart-outline.svg\"\n      isActive={isLiked}\n      onToggle={() => setIsLiked(!isLiked)}\n    />\n  );\n}\n```\n\n## Advanced Customization\n\n### CSS-Only Icons\n\nFor simple shapes, consider CSS-only icons:\n\n```css\n.arrow-right {\n  width: 0;\n  height: 0;\n  border-left: 8px solid var(--primary-color);\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid transparent;\n}\n\n.dot-indicator {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n}\n```\n\n### Animated Icons\n\nAdd subtle animations to icons:\n\n```css\n.icon-animated {\n  transition: transform 0.2s ease;\n}\n\n.icon-animated:hover {\n  transform: scale(1.1);\n}\n\n.icon-spin {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n### Icon Sprites\n\nFor better performance with many icons, consider SVG sprites:\n\n```xml\n<!-- icons-sprite.svg -->\n<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n  <symbol id=\"home\" viewBox=\"0 0 24 24\">\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\n  </symbol>\n  <symbol id=\"user\" viewBox=\"0 0 24 24\">\n    <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n  </symbol>\n</svg>\n```\n\n```tsx\n// Usage with sprites\nfunction SpriteIcon({ id, size = 20 }: { id: string; size?: number }) {\n  return (\n    <svg width={size} height={size} className=\"fill-current\">\n      <use href={`/assets/icons/icons-sprite.svg#${id}`} />\n    </svg>\n  );\n}\n```\n\n## Current Icon Inventory\n\nThe site currently includes these pixel-art style icons:\n\n### Navigation & UI\n\n- `pixel-cog-solid.svg` - Settings/configuration\n- `pixel-home-solid.svg` - Home/dashboard\n- `pixel-book-open-solid.svg` - Documentation\n- `pixel-folder.svg` - File system\n\n### Content & Features\n\n- `pixel-quote-left-solid.svg` - Blockquotes\n- `pixel-star-solid.svg` - Featured content\n- `pixel-shield-solid.svg` - Security features\n- `pixel-chart-solid.svg` - Analytics/data\n\n### Social Media\n\n- `pixel-instagram.svg` - Instagram\n- `pixel-twitch.svg` - Twitch\n- `pixel-tiktok.svg` - TikTok\n- `pixel-x.svg` - X (Twitter)\n\n## Best Practices\n\n### Performance\n\n- Use SVG for scalability\n- Optimize SVG files with tools like [SVGO](https://github.com/svg/svgo)\n- Consider icon sprites for multiple icons\n- Use appropriate sizes to avoid scaling\n\n### Accessibility\n\n- Always include meaningful `alt` text\n- Use ARIA labels for interactive icons\n- Ensure sufficient color contrast\n- Provide text alternatives when needed\n\n### Consistency\n\n- Maintain consistent visual style\n- Use the same stroke width across icon sets\n- Follow the site's color palette\n- Test icons in both light and dark themes\n\n### Organization\n\n- Group related icons in subdirectories\n- Use descriptive file names\n- Document custom icons in this guide\n- Version control icon assets\n\n## Troubleshooting\n\n### Common Issues\n\n**Icon not displaying:**\n\n- Check the file path is correct\n- Ensure the SVG file is valid\n- Verify Next.js can access the public directory\n\n**Icon appears too small/large:**\n\n- Adjust width and height props\n- Check the SVG viewBox attribute\n- Use CSS for responsive sizing\n\n**Icon doesn't change color:**\n\n- Ensure SVG uses `currentColor` or `fill=\"currentColor\"`\n- Check CSS targeting is correct\n- Verify theme variables are applied\n\n**Dark mode issues:**\n\n- Test icons in both themes\n- Use CSS filters for color inversion\n- Consider separate icon variants\n\n### Getting Help\n\nIf you encounter issues with icons:\n\n1. Check the browser developer tools for errors\n2. Validate your SVG syntax\n3. Test the icon in isolation\n4. Review similar working examples\n5. Check the Next.js documentation for static assets\n\n---\n\n**Next Steps:**\n\n- [UI Configuration](./ui-configuration) - Learn about theme and layout customization\n- [Best Practices](./best-practices) - Follow development guidelines\n- [Code Examples](./code-examples) - See practical implementations\n",
    "deployment/overview": "# Deployment Overview\n\nGuide to deploying your documentation site to various hosting platforms.\n\n## Quick Deploy\n\nDeploy this documentation site to Cloudflare Pages in one click:\n\n[![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/your-username/your-repo)\n\n> **Note**: Replace `your-username/your-repo` with your actual GitHub repository URL. For other platforms, see the specific platform guides below.\n\n## Supported Platforms\n\nThis documentation template supports deployment to several platforms:\n\n- **[Cloudflare Pages](./platforms/cloudflare)** - Fast global CDN with edge functions\n- **[Vercel](./platforms/vercel)** - Optimized for Next.js applications\n- **[Netlify](./platforms/netlify)** - JAMstack platform with form handling\n- **Static Hosting** - Any CDN or web server\n\n## Build Process\n\nThe documentation site uses Next.js static export for optimal performance:\n\n```bash\n# Build for production\nnpm run build\n\n# Output directory\nout/\n```\n\n### Build Configuration\n\n```javascript\n// next.config.js\nmodule.exports = {\n  output: 'export', // Static export\n  trailingSlash: false,\n  images: {\n    unoptimized: true, // Required for static export\n  },\n};\n```\n\n## Pre-deployment Checklist\n\nBefore deploying, ensure:\n\n- [ ] **All tests pass**: `npm run test`\n- [ ] **Build succeeds**: `npm run build`\n- [ ] **No TypeScript errors**: `npm run type-check`\n- [ ] **Linting passes**: `npm run lint`\n- [ ] **Content is up to date**\n- [ ] **Environment variables configured**\n\n## Environment Variables\n\n### Public Variables\n\nThese are included in the client bundle:\n\n```bash\n# Site configuration\nNEXT_PUBLIC_SITE_URL=https://docs.yoursite.com\nNEXT_PUBLIC_BACKGROUND_TYPE=dither\n\n# Analytics\nNEXT_PUBLIC_GA_ID=G-XXXXXXXXXX\n```\n\n### Build Variables\n\nFor build-time configuration:\n\n```bash\n# Node.js version\nNODE_VERSION=18\n\n# Build settings\nNODE_ENV=production\n```\n\n## Performance Optimization\n\n### Asset Optimization\n\nThe build process automatically:\n\n- Minifies JavaScript and CSS\n- Optimizes fonts with `font-display: swap`\n- Generates static HTML for all pages\n- Creates service worker for caching\n\n### CDN Configuration\n\nRecommended cache headers:\n\n```\n# Static assets (JS, CSS, fonts)\nCache-Control: public, max-age=31536000, immutable\n\n# HTML pages\nCache-Control: public, max-age=3600, must-revalidate\n\n# API responses\nCache-Control: public, max-age=300\n```\n\n## SSL/HTTPS\n\nAll platforms provide automatic HTTPS:\n\n- **Cloudflare**: Universal SSL with flexible/full encryption\n- **Vercel**: Automatic SSL certificates via Let's Encrypt\n- **Netlify**: Automatic HTTPS with custom domains\n\n### Security Headers\n\nConfigure security headers for production:\n\n```\n# Content Security Policy\nContent-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'\n\n# Strict Transport Security\nStrict-Transport-Security: max-age=31536000; includeSubDomains\n\n# X-Frame-Options\nX-Frame-Options: DENY\n\n# X-Content-Type-Options\nX-Content-Type-Options: nosniff\n```\n\n## Custom Domains\n\n### DNS Configuration\n\nFor custom domains, configure DNS:\n\n```\n# Root domain\nyourdomain.com    A    192.0.2.1\n\n# Subdomain\ndocs.yourdomain.com    CNAME    your-platform.com\n```\n\n### SSL Certificates\n\nMost platforms handle SSL automatically, but you can:\n\n- Use platform-provided certificates\n- Upload custom certificates\n- Use Cloudflare for additional SSL options\n\n## Monitoring and Analytics\n\n### Performance Monitoring\n\nTrack Core Web Vitals:\n\n```javascript\n// pages/_app.js\nexport function reportWebVitals(metric) {\n  // Send to analytics service\n  gtag('event', metric.name, {\n    value: Math.round(metric.value),\n    event_category: 'Web Vitals',\n  });\n}\n```\n\n### Error Tracking\n\nConfigure error reporting:\n\n```javascript\n// lib/error-tracking.js\nif (typeof window !== 'undefined') {\n  window.addEventListener('error', (event) => {\n    // Send error to tracking service\n    fetch('/api/errors', {\n      method: 'POST',\n      body: JSON.stringify({\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n      }),\n    });\n  });\n}\n```\n\n## Deployment Automation\n\n### GitHub Actions\n\nAutomate deployment with GitHub Actions:\n\n```yaml\n# .github/workflows/deploy.yml\nname: Deploy Documentation\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build\n\n      - name: Deploy to Cloudflare Pages\n        uses: cloudflare/pages-action@v1\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          projectName: docs\n          directory: out\n```\n\n### Continuous Deployment\n\nSet up automatic deployments:\n\n1. **Connect repository** to hosting platform\n2. **Configure build settings**:\n   - Build command: `npm run build`\n   - Output directory: `out`\n   - Node.js version: `18`\n3. **Set environment variables**\n4. **Enable automatic deployments** on push\n\n## Rollback Strategy\n\n### Version Control\n\nMaintain deployment history:\n\n- Tag releases: `git tag v1.2.3`\n- Keep deployment logs\n- Use platform rollback features\n\n### Quick Rollback\n\nMost platforms support instant rollback:\n\n```bash\n# Cloudflare Pages\nwrangler pages deployment list\nwrangler pages deployment rollback <deployment-id>\n\n# Vercel\nvercel --prod rollback\n```\n\n## Testing in Production\n\n### Staging Environment\n\nDeploy to staging before production:\n\n```bash\n# Staging deployment\nnpm run build:staging\nnpm run deploy:staging\n\n# Production deployment\nnpm run build:production\nnpm run deploy:production\n```\n\n### Health Checks\n\nImplement health check endpoints:\n\n```javascript\n// pages/api/health.js\nexport default function handler(req, res) {\n  res.status(200).json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version,\n  });\n}\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**Build failures:**\n\n- Check Node.js version compatibility\n- Verify all dependencies are installed\n- Review build logs for specific errors\n\n**Routing issues:**\n\n- Ensure `trailingSlash: false` in Next.js config\n- Check `_redirects` or platform-specific routing\n\n**Asset loading:**\n\n- Verify `basePath` configuration\n- Check CORS headers for external assets\n- Ensure proper CDN configuration\n\n### Debug Mode\n\nEnable deployment debugging:\n\n```bash\n# Verbose build output\nnpm run build -- --debug\n\n# Platform-specific debugging\nDEBUG=true npm run deploy\n```\n\n## Security Considerations\n\n### Build Security\n\n- Use `npm ci` instead of `npm install`\n- Audit dependencies: `npm audit`\n- Keep build environment updated\n- Use secrets for sensitive variables\n\n### Runtime Security\n\n- Configure CSP headers\n- Enable HSTS\n- Use secure cookie settings\n- Validate all inputs\n\n## Performance Targets\n\n### Core Web Vitals Goals\n\n- **LCP** (Largest Contentful Paint): < 2.5s\n- **FID** (First Input Delay): < 100ms\n- **CLS** (Cumulative Layout Shift): < 0.1\n\n### Optimization Techniques\n\n- Static generation for all pages\n- Image optimization\n- Font loading optimization\n- Critical CSS inlining\n- Service worker caching\n\n## Cost Optimization\n\n### Free Tier Limits\n\nMost platforms offer generous free tiers:\n\n- **Cloudflare Pages**: 500 builds/month, unlimited bandwidth\n- **Vercel**: 100GB bandwidth, 100 builds/month\n- **Netlify**: 300 build minutes, 100GB bandwidth\n\n### Scaling Considerations\n\nFor high-traffic sites:\n\n- Consider paid plans for better performance\n- Implement advanced caching strategies\n- Use analytics to optimize popular pages\n- Consider edge functions for dynamic content\n\n## Migration Guide\n\n### From Other Platforms\n\nMigrating from:\n\n- **GitBook**: Export content to Markdown\n- **Notion**: Use Notion API to export pages\n- **Jekyll**: Convert front matter and layouts\n- **Docusaurus**: Migrate content structure\n\n### Platform Migration\n\nMoving between hosting platforms:\n\n1. **Export current deployment**\n2. **Update DNS gradually**\n3. **Test thoroughly**\n4. **Monitor for issues**\n5. **Update CI/CD pipelines**\n\n## Next Steps\n\n- **[Production Setup](./production-setup)** - Advanced configuration\n- **[Platform Guides](./platforms/cloudflare)** - Platform-specific instructions\n- **[Troubleshooting](../user-guide/troubleshooting)** - Common deployment issues\n",
    "deployment/production-setup": "# Production Setup\n\nAdvanced configuration for production deployment of your documentation site.\n\n## Production Build Configuration\n\n### Next.js Optimization\n\n```javascript\n// next.config.js\nmodule.exports = {\n  // Static export for optimal performance\n  output: 'export',\n\n  // Disable trailing slashes for cleaner URLs\n  trailingSlash: false,\n\n  // Image optimization (disabled for static export)\n  images: {\n    unoptimized: true,\n    formats: ['image/avif', 'image/webp'],\n  },\n\n  // Optimize compilation\n  swcMinify: true,\n\n  // Experimental optimizations\n  experimental: {\n    optimizeCss: true,\n    optimizePackageImports: ['framer-motion', '@react-three/fiber', '@react-three/drei'],\n  },\n\n  // Remove source maps in production\n  productionBrowserSourceMaps: false,\n\n  // Enable compression\n  compress: true,\n\n  // Optimize fonts\n  optimizeFonts: true,\n};\n```\n\n### Environment Variables\n\nCreate production environment configuration:\n\n```bash\n# .env.production\nNEXT_PUBLIC_SITE_URL=https://docs.yoursite.com\nNEXT_PUBLIC_BACKGROUND_TYPE=dither\nNEXT_PUBLIC_GA_ID=G-XXXXXXXXXX\nNODE_ENV=production\n```\n\n### Build Scripts\n\nOptimize package.json scripts:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"build:analyze\": \"ANALYZE=true next build\",\n    \"build:production\": \"NODE_ENV=production next build\",\n    \"precommit\": \"npm run lint && npm run type-check\",\n    \"prebuild\": \"npm run precommit\"\n  }\n}\n```\n\n## Security Hardening\n\n### Content Security Policy\n\nImplement strict CSP headers:\n\n```javascript\n// middleware.js\nimport { NextResponse } from 'next/server';\n\nexport function middleware(request) {\n  const response = NextResponse.next();\n\n  // Content Security Policy\n  response.headers.set(\n    'Content-Security-Policy',\n    `\n      default-src 'self';\n      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com;\n      style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n      font-src 'self' https://fonts.gstatic.com data:;\n      img-src 'self' data: https:;\n      connect-src 'self' https://www.google-analytics.com;\n      frame-ancestors 'none';\n      base-uri 'self';\n      form-action 'self';\n    `\n      .replace(/\\s+/g, ' ')\n      .trim()\n  );\n\n  // Security headers\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n\n  // HSTS\n  response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');\n\n  return response;\n}\n\nexport const config = {\n  matcher: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n};\n```\n\n### Input Sanitization\n\nSanitize user inputs and markdown content:\n\n```typescript\n// lib/sanitize.ts\nimport DOMPurify from 'isomorphic-dompurify'\n\ninterface SanitizeOptions {\n  allowedTags?: string[]\n  allowedAttributes?: Record<string, string[]>\n}\n\nexport function sanitizeHTML(\n  dirty: string,\n  options: SanitizeOptions = {}\n): string {\n  const config = {\n    ALLOWED_TAGS: options.allowedTags || [\n      'p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li',\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n      'code', 'pre', 'blockquote',\n      'a', 'img'\n    ],\n    ALLOWED_ATTR: options.allowedAttributes || {\n      'a': ['href', 'title'],\n      'img': ['src', 'alt', 'width', 'height'],\n      'code': ['class'],\n      'pre': ['class']\n    },\n    ALLOW_DATA_ATTR: false,\n    FORBID_SCRIPT: true,\n    FORBID_TAGS: ['script', 'object', 'embed', 'iframe'],\n  }\n\n  return DOMPurify.sanitize(dirty, config)\n}\n\n// Usage in components\nfunction SafeContent({ content }: { content: string }) {\n  const sanitizedContent = sanitizeHTML(content)\n\n  return (\n    <div\n      dangerouslySetInnerHTML={{ __html: sanitizedContent }}\n      className=\"prose dark:prose-invert\"\n    />\n  )\n}\n```\n\n## Performance Optimization\n\n### Bundle Analysis\n\nAnalyze and optimize bundle size:\n\n```bash\n# Install bundle analyzer\nnpm install --save-dev @next/bundle-analyzer\n\n# Configure in next.config.js\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n\nmodule.exports = withBundleAnalyzer({\n  // ... other config\n})\n\n# Run analysis\nANALYZE=true npm run build\n```\n\n### Code Splitting\n\nImplement strategic code splitting:\n\n```typescript\n// Dynamic imports for heavy components\nconst DocumentationGraph = dynamic(\n  () => import('@/components/DocumentationGraph'),\n  {\n    ssr: false,\n    loading: () => <GraphSkeleton />\n  }\n)\n\n// Route-level splitting for admin features\nconst AdminPanel = dynamic(\n  () => import('@/components/admin/AdminPanel'),\n  { ssr: false }\n)\n\n// Library splitting for large dependencies\nconst HeavyLibrary = dynamic(\n  () => import('heavy-library').then(mod => mod.Component),\n  { ssr: false }\n)\n```\n\n### Image Optimization\n\nOptimize images for production:\n\n```typescript\n// lib/image-optimization.ts\nexport function generateImageSrcSet(\n  src: string,\n  sizes: number[] = [640, 768, 1024, 1280, 1536]\n): string {\n  return sizes\n    .map(size => `${src}?w=${size}&q=75 ${size}w`)\n    .join(', ')\n}\n\n// Component usage\nfunction OptimizedImage({ src, alt, ...props }) {\n  const srcSet = generateImageSrcSet(src)\n\n  return (\n    <img\n      src={src}\n      srcSet={srcSet}\n      sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      alt={alt}\n      loading=\"lazy\"\n      decoding=\"async\"\n      {...props}\n    />\n  )\n}\n```\n\n### Font Optimization\n\nOptimize font loading:\n\n```css\n/* globals.css */\n@font-face {\n  font-family: 'MapleMono';\n  src: url('/fonts/MapleMono-NF-CN-Regular.woff2') format('woff2');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap; /* Critical for performance */\n}\n\n/* Preload critical fonts */\n```\n\n```typescript\n// pages/_document.tsx\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head>\n        {/* Preload critical fonts */}\n        <link\n          rel=\"preload\"\n          href=\"/fonts/MapleMono-NF-CN-Regular.woff2\"\n          as=\"font\"\n          type=\"font/woff2\"\n          crossOrigin=\"anonymous\"\n        />\n\n        {/* DNS prefetch for external resources */}\n        <link rel=\"dns-prefetch\" href=\"//www.google-analytics.com\" />\n        <link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\" />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n## Monitoring and Analytics\n\n### Performance Monitoring\n\nImplement comprehensive performance tracking:\n\n```typescript\n// lib/performance.ts\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  id: string;\n  navigationType?: string;\n}\n\nexport function trackWebVitals(metric: PerformanceMetric) {\n  // Google Analytics 4\n  if (typeof gtag !== 'undefined') {\n    gtag('event', metric.name, {\n      custom_parameter_name: 'web_vitals',\n      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n      event_category: 'Web Vitals',\n      event_label: metric.id,\n      non_interaction: true,\n    });\n  }\n\n  // Send to custom analytics endpoint\n  fetch('/api/analytics/performance', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      metric: metric.name,\n      value: metric.value,\n      id: metric.id,\n      url: window.location.pathname,\n      timestamp: Date.now(),\n    }),\n  }).catch(() => {\n    // Fail silently\n  });\n}\n\n// Real User Monitoring\nexport function initRUM() {\n  // Track navigation timing\n  window.addEventListener('load', () => {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n\n    trackWebVitals({\n      name: 'TTFB',\n      value: navigation.responseStart - navigation.requestStart,\n      id: 'ttfb',\n    });\n\n    trackWebVitals({\n      name: 'FCP',\n      value: navigation.domContentLoadedEventStart - navigation.navigationStart,\n      id: 'fcp',\n    });\n  });\n}\n```\n\n### Error Tracking\n\nComprehensive error monitoring:\n\n```typescript\n// lib/error-tracking.ts\ninterface ErrorReport {\n  message: string;\n  stack?: string;\n  url: string;\n  userAgent: string;\n  timestamp: string;\n  userId?: string;\n  sessionId: string;\n}\n\nclass ErrorTracker {\n  private sessionId: string;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.setupErrorHandlers();\n  }\n\n  private generateSessionId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  private setupErrorHandlers(): void {\n    // JavaScript errors\n    window.addEventListener('error', (event) => {\n      this.reportError({\n        message: event.message,\n        stack: event.error?.stack,\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        timestamp: new Date().toISOString(),\n        sessionId: this.sessionId,\n      });\n    });\n\n    // Promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      this.reportError({\n        message: `Unhandled Promise Rejection: ${event.reason}`,\n        stack: event.reason?.stack,\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        timestamp: new Date().toISOString(),\n        sessionId: this.sessionId,\n      });\n    });\n\n    // React error boundary integration\n    this.monitorReactErrors();\n  }\n\n  private async reportError(error: ErrorReport): Promise<void> {\n    try {\n      await fetch('/api/errors', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(error),\n      });\n    } catch (reportingError) {\n      console.error('Failed to report error:', reportingError);\n    }\n  }\n\n  private monitorReactErrors(): void {\n    const originalConsoleError = console.error;\n    console.error = (...args) => {\n      const message = args.join(' ');\n      if (message.includes('React')) {\n        this.reportError({\n          message: `React Error: ${message}`,\n          url: window.location.href,\n          userAgent: navigator.userAgent,\n          timestamp: new Date().toISOString(),\n          sessionId: this.sessionId,\n        });\n      }\n      originalConsoleError.apply(console, args);\n    };\n  }\n}\n\n// Initialize in production only\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {\n  new ErrorTracker();\n}\n```\n\n## Caching Strategy\n\n### CDN Configuration\n\nConfigure caching headers for optimal performance:\n\n```typescript\n// next.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/fonts/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=31536000, immutable',\n          },\n        ],\n      },\n      {\n        source: '/_next/static/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=31536000, immutable',\n          },\n        ],\n      },\n      {\n        source: '/(.*).html',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=3600, must-revalidate',\n          },\n        ],\n      },\n    ];\n  },\n};\n```\n\n### Service Worker\n\nImplement service worker for offline support:\n\n```typescript\n// public/sw.js\nconst CACHE_NAME = 'docs-v1';\nconst STATIC_CACHE = [\n  '/',\n  '/docs',\n  '/_next/static/css/app.css',\n  '/_next/static/js/app.js',\n  '/fonts/MapleMono-NF-CN-Regular.woff2',\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(caches.open(CACHE_NAME).then((cache) => cache.addAll(STATIC_CACHE)));\n});\n\nself.addEventListener('fetch', (event) => {\n  if (event.request.method !== 'GET') return;\n\n  event.respondWith(\n    caches.match(event.request).then((response) => {\n      if (response) return response;\n\n      return fetch(event.request).then((response) => {\n        const responseClone = response.clone();\n        caches.open(CACHE_NAME).then((cache) => cache.put(event.request, responseClone));\n        return response;\n      });\n    })\n  );\n});\n```\n\n## Database and API Setup\n\n### API Rate Limiting\n\nImplement rate limiting for API endpoints:\n\n```typescript\n// lib/rate-limit.ts\nimport { NextRequest, NextResponse } from 'next/server';\n\ninterface RateLimitConfig {\n  interval: number; // Time window in milliseconds\n  uniqueTokenPerInterval: number; // Max requests per interval\n}\n\nconst rateLimitMap = new Map();\n\nexport function rateLimit(config: RateLimitConfig) {\n  return async (req: NextRequest) => {\n    const token = req.ip || 'anonymous';\n    const tokenCount = rateLimitMap.get(token) || [0, Date.now()];\n\n    if (Date.now() - tokenCount[1] > config.interval) {\n      rateLimitMap.set(token, [1, Date.now()]);\n    } else {\n      tokenCount[0]++;\n      if (tokenCount[0] > config.uniqueTokenPerInterval) {\n        return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });\n      }\n      rateLimitMap.set(token, tokenCount);\n    }\n\n    return null; // Continue to handler\n  };\n}\n\n// Usage in API routes\nconst limiter = rateLimit({\n  interval: 60 * 1000, // 1 minute\n  uniqueTokenPerInterval: 10, // 10 requests per minute\n});\n\nexport async function POST(req: NextRequest) {\n  const limitResult = await limiter(req);\n  if (limitResult) return limitResult;\n\n  // Handle request\n}\n```\n\n### Database Connection\n\nOptimize database connections:\n\n```typescript\n// lib/database.ts\nimport { Pool } from 'pg';\n\n// Connection pooling for PostgreSQL\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  max: 20, // Maximum number of connections\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\nexport async function query(text: string, params?: any[]) {\n  const start = Date.now();\n\n  try {\n    const result = await pool.query(text, params);\n    const duration = Date.now() - start;\n\n    // Log slow queries\n    if (duration > 1000) {\n      console.warn(`Slow query detected: ${duration}ms`, { text, params });\n    }\n\n    return result;\n  } catch (error) {\n    console.error('Database query error:', error);\n    throw error;\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  pool.end(() => {\n    console.log('Database pool closed');\n    process.exit(0);\n  });\n});\n```\n\n## Backup and Recovery\n\n### Content Backup\n\nImplement automated content backup:\n\n```typescript\n// scripts/backup-content.ts\nimport fs from 'fs';\nimport path from 'path';\nimport archiver from 'archiver';\n\nasync function backupContent() {\n  const contentDir = path.join(process.cwd(), 'app/docs/content');\n  const backupDir = path.join(process.cwd(), 'backups');\n  const timestamp = new Date().toISOString().replace(/:/g, '-');\n  const backupFile = path.join(backupDir, `content-backup-${timestamp}.zip`);\n\n  // Ensure backup directory exists\n  if (!fs.existsSync(backupDir)) {\n    fs.mkdirSync(backupDir, { recursive: true });\n  }\n\n  const output = fs.createWriteStream(backupFile);\n  const archive = archiver('zip', { zlib: { level: 9 } });\n\n  return new Promise((resolve, reject) => {\n    output.on('close', () => {\n      console.log(`Backup created: ${backupFile} (${archive.pointer()} bytes)`);\n      resolve(backupFile);\n    });\n\n    archive.on('error', reject);\n    archive.pipe(output);\n    archive.directory(contentDir, false);\n    archive.finalize();\n  });\n}\n\n// Run backup\nif (require.main === module) {\n  backupContent().catch(console.error);\n}\n```\n\n### Database Backup\n\nAutomate database backups:\n\n```bash\n#!/bin/bash\n# scripts/backup-db.sh\n\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nBACKUP_DIR=\"./backups/db\"\nBACKUP_FILE=\"$BACKUP_DIR/backup_$TIMESTAMP.sql\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Create database backup\npg_dump $DATABASE_URL > $BACKUP_FILE\n\n# Compress backup\ngzip $BACKUP_FILE\n\n# Keep only last 30 backups\nfind $BACKUP_DIR -name \"backup_*.sql.gz\" -type f -mtime +30 -delete\n\necho \"Database backup completed: $BACKUP_FILE.gz\"\n```\n\n## Deployment Checklist\n\n### Pre-deployment\n\n- [ ] **Environment variables** configured\n- [ ] **Build succeeds** without warnings\n- [ ] **All tests pass** (unit, integration, e2e)\n- [ ] **Security scan** completed\n- [ ] **Performance audit** with Lighthouse\n- [ ] **Accessibility audit** completed\n- [ ] **Content review** completed\n- [ ] **Backup** created\n\n### Post-deployment\n\n- [ ] **Smoke tests** pass\n- [ ] **Performance metrics** within targets\n- [ ] **Error rates** normal\n- [ ] **CDN** cache populated\n- [ ] **Analytics** tracking\n- [ ] **Search engines** notified\n- [ ] **Team** notified\n\n### Rollback Preparation\n\n- [ ] **Previous version** tagged\n- [ ] **Rollback procedure** documented\n- [ ] **Database migration** reversible\n- [ ] **Feature flags** configured\n- [ ] **Monitoring** alerts configured\n\n## Advanced Configuration\n\n### Multi-environment Setup\n\nConfigure different environments:\n\n```typescript\n// lib/config.ts\ninterface Config {\n  apiUrl: string;\n  databaseUrl: string;\n  cacheEnabled: boolean;\n  analyticsEnabled: boolean;\n}\n\nconst configs: Record<string, Config> = {\n  development: {\n    apiUrl: 'http://localhost:3000/api',\n    databaseUrl: process.env.DEV_DATABASE_URL!,\n    cacheEnabled: false,\n    analyticsEnabled: false,\n  },\n  staging: {\n    apiUrl: 'https://staging-docs.yoursite.com/api',\n    databaseUrl: process.env.STAGING_DATABASE_URL!,\n    cacheEnabled: true,\n    analyticsEnabled: false,\n  },\n  production: {\n    apiUrl: 'https://docs.yoursite.com/api',\n    databaseUrl: process.env.DATABASE_URL!,\n    cacheEnabled: true,\n    analyticsEnabled: true,\n  },\n};\n\nexport const config = configs[process.env.NODE_ENV] || configs.development;\n```\n\n### Feature Flags\n\nImplement feature flag system:\n\n```typescript\n// lib/feature-flags.ts\ninterface FeatureFlags {\n  newMindMap: boolean\n  darkModeToggle: boolean\n  searchFilters: boolean\n  commentSystem: boolean\n}\n\nexport class FeatureFlagManager {\n  private flags: FeatureFlags\n\n  constructor() {\n    this.flags = {\n      newMindMap: process.env.FEATURE_NEW_MINDMAP === 'true',\n      darkModeToggle: process.env.FEATURE_DARK_MODE === 'true',\n      searchFilters: process.env.FEATURE_SEARCH_FILTERS === 'true',\n      commentSystem: process.env.FEATURE_COMMENTS === 'true'\n    }\n  }\n\n  isEnabled(flag: keyof FeatureFlags): boolean {\n    return this.flags[flag] || false\n  }\n}\n\nexport const featureFlags = new FeatureFlagManager()\n\n// Usage in components\nfunction DocumentationGraph() {\n  const useNewMindMap = featureFlags.isEnabled('newMindMap')\n\n  return useNewMindMap ? <NewMindMap /> : <LegacyMindMap />\n}\n```\n\n## Next Steps\n\n- **[Platform-specific guides](./platforms/cloudflare)** - Detailed deployment instructions\n- **[Monitoring setup](../user-guide/troubleshooting)** - Error tracking and analytics\n- **[Security best practices](../developer-guides/best-practices)** - Advanced security configuration\n",
    "deployment/platforms/cloudflare": "# Deploying to Cloudflare Pages\n\nCloudflare Pages is the **recommended hosting platform** for this documentation template. It offers excellent performance, global CDN, automatic SSL, and seamless integration with GitHub.\n\n## Quick Deploy\n\nDeploy this documentation site to Cloudflare Pages in one click:\n\n[![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/your-username/your-repo)\n\n> **Note**: Replace `your-username/your-repo` with your actual GitHub repository URL. The button will automatically detect your repository settings and guide you through the deployment process.\n\n## Why Cloudflare Pages?\n\n✅ **Free Tier**: Generous limits for documentation sites  \n✅ **Global CDN**: Ultra-fast loading worldwide  \n✅ **Automatic SSL**: HTTPS enabled by default  \n✅ **Git Integration**: Deploy automatically from GitHub  \n✅ **Preview Deployments**: Test changes before going live  \n✅ **Custom Domains**: Use your own domain for free  \n✅ **Edge Functions**: Add server-side functionality\n\n## Prerequisites\n\nBefore deploying, ensure you have:\n\n- A **GitHub repository** with your documentation site\n- A **Cloudflare account** (free at [cloudflare.com](https://cloudflare.com))\n- Your site **builds successfully** locally with `npm run build`\n\n## Deployment Steps\n\n### Step 1: Connect Your Repository\n\n1. **Sign in to Cloudflare**\n   - Go to [dash.cloudflare.com](https://dash.cloudflare.com)\n   - Navigate to **Pages** in the sidebar\n\n2. **Create a New Project**\n   - Click **\"Create a project\"**\n   - Select **\"Connect to Git\"**\n   - Choose **GitHub** as your Git provider\n\n3. **Authorize Cloudflare**\n   - Click **\"Connect GitHub\"**\n   - Authorize Cloudflare to access your repositories\n   - Select the repository containing your documentation site\n\n### Step 2: Configure Build Settings\n\nConfigure your project with these **exact settings**:\n\n```yaml\n# Build Configuration\nBuild command: npm run build\nBuild output directory: .next\nRoot directory: / (leave empty)\n\n# Environment Variables\nNODE_VERSION: 18\nNPM_VERSION: 9\n```\n\n**Important Build Settings:**\n\n- **Framework preset**: Next.js (Static HTML Export)\n- **Node.js version**: 18 or higher\n- **Build command**: `npm run build`\n- **Build directory**: `.next`\n\n### Step 3: Set Environment Variables\n\nAdd these environment variables in the Cloudflare Pages dashboard:\n\n```bash\n# Required for Next.js build\nNODE_ENV=production\nNEXT_TELEMETRY_DISABLED=1\n\n# Optional: Custom configuration\nNEXT_PUBLIC_SITE_NAME=Your Documentation Site\nNEXT_PUBLIC_SITE_URL=https://your-domain.pages.dev\n```\n\nTo add environment variables:\n\n1. Go to your project in Cloudflare Pages\n2. Click **Settings** → **Environment variables**\n3. Add each variable with **Production** scope\n\n### Step 4: Advanced Configuration\n\nCreate a `next.config.js` file optimized for Cloudflare:\n\n```javascript\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Enable static export for Cloudflare Pages\n  output: 'export',\n\n  // Disable image optimization for static export\n  images: {\n    unoptimized: true,\n  },\n\n  // Optional: Add base path if deploying to subdirectory\n  // basePath: '/docs',\n\n  // Trailing slash for better static hosting\n  trailingSlash: true,\n\n  // Optimize for static hosting\n  exportPathMap: async function (defaultPathMap) {\n    return {\n      '/': { page: '/' },\n      '/docs': { page: '/docs' },\n      // Add other routes as needed\n    };\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n### Step 5: Deploy\n\n1. **Trigger Deployment**\n   - Cloudflare automatically builds when you push to your main branch\n   - Or click **\"Deploy site\"** in the dashboard\n\n2. **Monitor Build**\n   - Watch the build log in real-time\n   - Typical build time: 2-5 minutes\n\n3. **Access Your Site**\n   - Your site will be available at: `https://your-project.pages.dev`\n   - Cloudflare provides a random subdomain\n\n## Custom Domain Setup\n\n### Step 1: Add Custom Domain\n\n1. **In Cloudflare Pages**\n   - Go to your project\n   - Click **Custom domains** tab\n   - Click **\"Set up a custom domain\"**\n\n2. **Enter Your Domain**\n   - Type your domain (e.g., `docs.yourdomain.com`)\n   - Click **\"Continue\"**\n\n### Step 2: DNS Configuration\n\n**Option A: Domain managed by Cloudflare**\n\n```bash\n# DNS records are added automatically\n# Just verify the CNAME record exists\n```\n\n**Option B: External DNS provider**\n\n```bash\n# Add this CNAME record to your DNS provider:\nType: CNAME\nName: docs (or your subdomain)\nValue: your-project.pages.dev\nTTL: Auto (or 300)\n```\n\n### Step 3: SSL Certificate\n\n- SSL certificates are **automatically provisioned**\n- Usually takes 10-15 minutes to activate\n- Supports wildcard certificates for subdomains\n\n## Automatic Deployments\n\n### Branch-based Deployments\n\nConfigure automatic deployments:\n\n```yaml\n# Production Branch: main\n# Preview Branches: develop, staging, feature/*\n\n# Every push to 'main' → Production deployment\n# Every push to other branches → Preview deployment\n```\n\n### Preview Deployments\n\nEach pull request gets a unique preview URL:\n\n- `https://pr-123.your-project.pages.dev`\n- Perfect for testing changes before merging\n- Automatically deleted when PR is closed\n\n## Performance Optimization\n\n### Build Optimization\n\nOptimize your build for faster deployments:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"build:analyze\": \"ANALYZE=true next build\",\n    \"build:static\": \"next build && next export\"\n  }\n}\n```\n\n### Cloudflare Features\n\nEnable these Cloudflare features for better performance:\n\n1. **Auto Minify**\n   - Dashboard → Speed → Optimization\n   - Enable JavaScript, CSS, and HTML minification\n\n2. **Brotli Compression**\n   - Automatically enabled for Pages\n   - Better compression than gzip\n\n3. **HTTP/3**\n   - Enabled by default\n   - Faster connection establishment\n\n## Monitoring and Analytics\n\n### Built-in Analytics\n\nCloudflare provides free analytics:\n\n- **Page views** and **unique visitors**\n- **Geographic distribution**\n- **Performance metrics**\n- **Error tracking**\n\nAccess analytics:\n\n1. Go to your Pages project\n2. Click **Analytics** tab\n3. View real-time and historical data\n\n### Web Analytics (Enhanced)\n\nFor more detailed analytics:\n\n1. Enable **Cloudflare Web Analytics**\n2. Add the tracking script to your site\n3. Get detailed user behavior insights\n\n## Troubleshooting\n\n### Common Build Issues\n\n**Build fails with \"Command not found\"**\n\n```bash\n# Solution: Ensure package.json has correct scripts\n{\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"dev\": \"next dev\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n**Static export fails**\n\n```bash\n# Solution: Check next.config.js settings\nmodule.exports = {\n  output: 'export',\n  images: { unoptimized: true }\n}\n```\n\n**404 errors on page refresh**\n\n```bash\n# Solution: Add _redirects file to public folder\n/* /index.html 200\n```\n\n### Performance Issues\n\n**Slow build times**\n\n```bash\n# Solutions:\n1. Enable Cloudflare build cache\n2. Optimize dependencies\n3. Use lighter base Docker image\n```\n\n**Large bundle size**\n\n```bash\n# Solutions:\n1. Run: npm run build:analyze\n2. Remove unused dependencies\n3. Enable tree shaking\n```\n\n## Advanced Features\n\n### Edge Functions\n\nAdd server-side functionality with Cloudflare Workers:\n\n```javascript\n// functions/api/hello.js\nexport function onRequest(context) {\n  return new Response('Hello from the edge!');\n}\n```\n\n### Headers and Redirects\n\nCreate `public/_headers` and `public/_redirects`:\n\n```bash\n# _headers\n/*\n  X-Frame-Options: DENY\n  X-Content-Type-Options: nosniff\n  Referrer-Policy: strict-origin-when-cross-origin\n\n# _redirects\n/old-path/* /new-path/:splat 301\n/docs/* /documentation/:splat 301\n```\n\n## Cost Considerations\n\n### Free Plan Limits\n\nCloudflare Pages Free Plan includes:\n\n- **Unlimited requests**\n- **Unlimited bandwidth**\n- **500 builds per month**\n- **20,000 files per deployment**\n- **25MB file size limit**\n\n### Pro Plan Benefits ($20/month)\n\nIf you need more:\n\n- **5,000 builds per month**\n- **Additional collaborators**\n- **Enhanced security features**\n- **Priority support**\n\n## Best Practices\n\n### Repository Structure\n\n```\nyour-docs-repo/\n├── .github/workflows/    # GitHub Actions (optional)\n├── app/                  # Next.js app\n├── public/              # Static assets\n├── package.json         # Dependencies\n├── next.config.js       # Next.js config\n└── README.md           # Documentation\n```\n\n### Environment Management\n\n- Use **production** environment variables for live site\n- Use **preview** environment variables for testing\n- Never commit sensitive data to repository\n\n### Security\n\n- Enable **bot fight mode** in Cloudflare\n- Use **security headers** for protection\n- Regularly update dependencies\n\nYour documentation site is now live on Cloudflare Pages! 🚀\n\n**Next Steps:**\n\n- [Set up custom domain](../overview#custom-domains)\n- [Configure analytics](../production-setup#analytics)\n- [Optimize performance](../production-setup#performance)\n",
    "deployment/platforms/vercel": "# Vercel Deployment\n\nComplete guide to deploying your documentation site on Vercel.\n\n## Quick Start\n\n### 1. Install Vercel CLI\n\n```bash\nnpm install -g vercel\n```\n\n### 2. Login to Vercel\n\n```bash\nvercel login\n```\n\n### 3. Deploy\n\n```bash\nvercel --prod\n```\n\n## Automatic GitHub Deployment\n\n### 1. Connect Repository\n\n1. Go to [Vercel Dashboard](https://vercel.com/dashboard)\n2. Click **\"New Project\"**\n3. Import your GitHub repository\n4. Configure build settings\n\n### 2. Build Configuration\n\nVercel auto-detects Next.js projects, but you can customize:\n\n```json\n{\n  \"buildCommand\": \"npm run build\",\n  \"outputDirectory\": \"out\",\n  \"installCommand\": \"npm ci\",\n  \"devCommand\": \"npm run dev\"\n}\n```\n\n### 3. Environment Variables\n\nAdd environment variables in Vercel dashboard:\n\n- `NEXT_PUBLIC_SITE_URL=https://your-site.vercel.app`\n- `NEXT_PUBLIC_BACKGROUND_TYPE=dither`\n- `NODE_VERSION=18`\n\n## Custom Domain Setup\n\n### 1. Add Domain\n\nIn Vercel dashboard:\n\n1. Go to project **Settings** → **Domains**\n2. Add your custom domain\n3. Configure DNS records\n\n### 2. DNS Configuration\n\nFor `docs.yoursite.com`:\n\n```\nCNAME docs.yoursite.com cname.vercel-dns.com\n```\n\nFor root domain `yoursite.com`:\n\n```\nA @ 76.76.19.19\nAAAA @ 2606:4700:4700::1111\n```\n\n### 3. SSL Certificate\n\nVercel automatically provisions SSL certificates via Let's Encrypt.\n\n## Advanced Configuration\n\n### vercel.json\n\nCreate `vercel.json` for advanced configuration:\n\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"package.json\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"out\"\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/docs/(.*)\",\n      \"dest\": \"/docs/$1\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/$1\"\n    }\n  ],\n  \"headers\": [\n    {\n      \"source\": \"/fonts/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"Cache-Control\",\n          \"value\": \"public, max-age=31536000, immutable\"\n        }\n      ]\n    },\n    {\n      \"source\": \"/_next/static/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"Cache-Control\",\n          \"value\": \"public, max-age=31536000, immutable\"\n        }\n      ]\n    }\n  ],\n  \"redirects\": [\n    {\n      \"source\": \"/old-docs/(.*)\",\n      \"destination\": \"/docs/$1\",\n      \"permanent\": true\n    }\n  ]\n}\n```\n\n### Security Headers\n\nAdd security headers:\n\n```json\n{\n  \"headers\": [\n    {\n      \"source\": \"/(.*)\",\n      \"headers\": [\n        {\n          \"key\": \"X-Frame-Options\",\n          \"value\": \"DENY\"\n        },\n        {\n          \"key\": \"X-Content-Type-Options\",\n          \"value\": \"nosniff\"\n        },\n        {\n          \"key\": \"Referrer-Policy\",\n          \"value\": \"strict-origin-when-cross-origin\"\n        },\n        {\n          \"key\": \"Strict-Transport-Security\",\n          \"value\": \"max-age=31536000; includeSubDomains\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Environment Configuration\n\n### Development Environment\n\n```bash\n# .env.local\nNEXT_PUBLIC_SITE_URL=http://localhost:3000\nNEXT_PUBLIC_BACKGROUND_TYPE=wave\n```\n\n### Production Environment\n\nSet in Vercel dashboard:\n\n```bash\nNEXT_PUBLIC_SITE_URL=https://docs.yoursite.com\nNEXT_PUBLIC_BACKGROUND_TYPE=dither\nNEXT_PUBLIC_GA_ID=G-XXXXXXXXXX\nNODE_ENV=production\n```\n\n### Environment-specific Builds\n\n```javascript\n// next.config.js\nmodule.exports = {\n  env: {\n    CUSTOM_KEY: process.env.CUSTOM_KEY,\n  },\n\n  // Different configs per environment\n  ...(process.env.VERCEL_ENV === 'production' && {\n    // Production-only config\n    productionBrowserSourceMaps: false,\n  }),\n\n  ...(process.env.VERCEL_ENV === 'preview' && {\n    // Preview/staging config\n    basePath: process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : '',\n  }),\n};\n```\n\n## Performance Optimization\n\n### Edge Network\n\nVercel automatically distributes your site globally:\n\n- **Global CDN** with 40+ edge locations\n- **Smart routing** to nearest edge\n- **Automatic compression** (Gzip/Brotli)\n\n### Image Optimization\n\nEnable Vercel's image optimization:\n\n```typescript\n// next.config.js\nmodule.exports = {\n  images: {\n    domains: ['example.com'],\n    formats: ['image/avif', 'image/webp'],\n\n    // For static export, disable optimization\n    unoptimized: process.env.VERCEL_ENV !== 'production',\n  },\n};\n```\n\n### Analytics Integration\n\nEnable Vercel Analytics:\n\n```bash\nnpm install @vercel/analytics\n```\n\n```typescript\n// pages/_app.tsx\nimport { Analytics } from '@vercel/analytics/react'\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <Analytics />\n    </>\n  )\n}\n```\n\n## Branch Deployments\n\n### Preview Deployments\n\nVercel creates preview deployments for every push:\n\n- **Feature branches** get unique URLs\n- **Pull requests** include deployment previews\n- **Staging** environments for testing\n\n### Branch-specific Configuration\n\n```json\n{\n  \"github\": {\n    \"deploymentEnabled\": {\n      \"main\": true,\n      \"staging\": true\n    }\n  },\n  \"alias\": [\n    {\n      \"domain\": \"docs-staging.yoursite.com\",\n      \"deployment\": {\n        \"VERCEL_GIT_COMMIT_REF\": \"staging\"\n      }\n    }\n  ]\n}\n```\n\n## CI/CD Integration\n\n### GitHub Actions with Vercel\n\n```yaml\n# .github/workflows/vercel.yml\nname: Vercel Deployment\n\non:\n  push:\n    branches: [main, staging]\n  pull_request:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Build project\n        run: npm run build\n\n      - name: Deploy to Vercel\n        uses: amondnet/vercel-action@v25\n        with:\n          vercel-token: ${{ secrets.VERCEL_TOKEN }}\n          vercel-org-id: ${{ secrets.ORG_ID }}\n          vercel-project-id: ${{ secrets.PROJECT_ID }}\n          vercel-args: '--prod'\n```\n\n### Custom Build Scripts\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"build:vercel\": \"npm run test && npm run build\",\n    \"vercel-build\": \"npm run build:vercel\"\n  }\n}\n```\n\n## Monitoring and Debugging\n\n### Vercel Functions Logs\n\nMonitor function execution:\n\n```bash\n# View logs\nvercel logs\n\n# Tail logs in real-time\nvercel logs --follow\n```\n\n### Performance Monitoring\n\nTrack Core Web Vitals:\n\n```typescript\n// lib/vercel-analytics.ts\nexport function reportWebVitals(metric: any) {\n  // Vercel Analytics\n  if (window.va) {\n    window.va('track', 'web-vital', {\n      name: metric.name,\n      value: metric.value,\n      id: metric.id,\n    });\n  }\n\n  // Custom tracking\n  fetch('/api/analytics', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(metric),\n  });\n}\n```\n\n### Error Tracking\n\n```typescript\n// lib/error-tracking.ts\nexport function setupErrorTracking() {\n  if (typeof window === 'undefined') return;\n\n  window.addEventListener('error', (event) => {\n    fetch('/api/errors', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: event.error?.stack,\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n      }),\n    });\n  });\n}\n```\n\n## Database Integration\n\n### Vercel Storage Options\n\n1. **Vercel Postgres** - Serverless PostgreSQL\n2. **Vercel KV** - Redis-compatible key-value store\n3. **Vercel Blob** - File storage\n\n### Example: Vercel KV Setup\n\n```bash\nnpm install @vercel/kv\n```\n\n```typescript\n// lib/kv.ts\nimport { kv } from '@vercel/kv';\n\nexport async function getCachedData(key: string) {\n  return await kv.get(key);\n}\n\nexport async function setCachedData(key: string, data: any, ttl = 3600) {\n  return await kv.setex(key, ttl, JSON.stringify(data));\n}\n\n// Usage in API routes\nexport async function GET(request: Request) {\n  const cached = await getCachedData('docs-data');\n\n  if (cached) {\n    return Response.json(JSON.parse(cached));\n  }\n\n  const data = await fetchDocumentationData();\n  await setCachedData('docs-data', data);\n\n  return Response.json(data);\n}\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**Build Failures:**\n\n```bash\n# Check build logs\nvercel logs --since 1h\n\n# Local build test\nnpm run build\n```\n\n**Domain Configuration:**\n\n```bash\n# Verify DNS propagation\ndig docs.yoursite.com\n\n# Check certificate status\ncurl -I https://docs.yoursite.com\n```\n\n**Function Timeouts:**\n\n```typescript\n// Increase timeout in vercel.json\n{\n  \"functions\": {\n    \"app/api/**/*.ts\": {\n      \"maxDuration\": 30\n    }\n  }\n}\n```\n\n### Debug Mode\n\nEnable debug logging:\n\n```bash\n# Environment variable\nDEBUG=1 vercel dev\n\n# Or in vercel.json\n{\n  \"env\": {\n    \"DEBUG\": \"1\"\n  }\n}\n```\n\n### Performance Issues\n\n**Slow builds:**\n\n```json\n{\n  \"installCommand\": \"npm ci --prefer-offline\",\n  \"buildCommand\": \"npm run build --max-old-space-size=4096\"\n}\n```\n\n**Large bundle size:**\n\n```bash\n# Analyze bundle\nnpm run build && npx @next/bundle-analyzer\n```\n\n## Cost Optimization\n\n### Free Tier Limits\n\nVercel Hobby plan includes:\n\n- **100GB** bandwidth per month\n- **1000** build executions per month\n- **10GB-hours** function execution time\n\n### Pro Plan Benefits\n\nFor production sites:\n\n- **1TB** bandwidth\n- **Advanced analytics**\n- **Team collaboration**\n- **Priority support**\n\n### Optimization Tips\n\n1. **Static Generation** - Use `getStaticProps` for pre-rendering\n2. **Image Optimization** - Use Next.js Image component\n3. **Bundle Analysis** - Regular bundle size monitoring\n4. **Caching** - Implement proper cache headers\n\n## Security Best Practices\n\n### Environment Variables\n\n- Use Vercel dashboard for secrets\n- Different configs per environment\n- Never commit sensitive data\n\n### Content Security Policy\n\n```typescript\n// middleware.ts\nexport function middleware(request: NextRequest) {\n  const response = NextResponse.next();\n\n  response.headers.set(\n    'Content-Security-Policy',\n    \"default-src 'self'; script-src 'self' 'unsafe-inline' vercel.live\"\n  );\n\n  return response;\n}\n```\n\n### Rate Limiting\n\n```typescript\n// lib/rate-limit.ts\nimport { kv } from '@vercel/kv';\n\nexport async function rateLimit(request: Request) {\n  const ip = request.headers.get('x-forwarded-for') || 'anonymous';\n  const key = `rate_limit:${ip}`;\n\n  const current = await kv.incr(key);\n\n  if (current === 1) {\n    await kv.expire(key, 60); // 1 minute window\n  }\n\n  if (current > 60) {\n    // 60 requests per minute\n    throw new Error('Rate limit exceeded');\n  }\n}\n```\n\n## Migration Guide\n\n### From Other Platforms\n\n**From Netlify:**\n\n1. Export existing build configuration\n2. Update `vercel.json` with redirects/headers\n3. Migrate environment variables\n4. Update DNS records\n\n**From Cloudflare Pages:**\n\n1. Import Git repository\n2. Configure build settings\n3. Set up custom domains\n4. Update CI/CD workflows\n\n### Zero-downtime Migration\n\n1. **Set up Vercel** deployment alongside existing\n2. **Test thoroughly** on preview URL\n3. **Update DNS** with low TTL\n4. **Monitor** for issues\n5. **Rollback** if needed\n\n## Next Steps\n\n- **[Netlify Deployment](./netlify)** - Alternative platform guide\n- **[Production Setup](../production-setup)** - Advanced configuration\n- **[Monitoring](../../user-guide/troubleshooting)** - Error tracking and analytics\n",
    "deployment/platforms/netlify": "# Netlify Deployment\n\nComplete guide to deploying your documentation site on Netlify.\n\n## Quick Start\n\n### 1. Install Netlify CLI\n\n```bash\nnpm install -g netlify-cli\n```\n\n### 2. Login to Netlify\n\n```bash\nnetlify login\n```\n\n### 3. Deploy\n\n```bash\nnetlify deploy --prod --dir=out\n```\n\n## Automatic GitHub Deployment\n\n### 1. Connect Repository\n\n1. Go to [Netlify Dashboard](https://app.netlify.com)\n2. Click **\"New site from Git\"**\n3. Connect your GitHub repository\n4. Configure build settings\n\n### 2. Build Configuration\n\nConfigure build settings in Netlify dashboard:\n\n```bash\n# Build command\nnpm run build\n\n# Publish directory\nout\n\n# Environment variables\nNODE_VERSION=18\nNEXT_PUBLIC_SITE_URL=https://your-site.netlify.app\n```\n\n### 3. netlify.toml Configuration\n\nCreate `netlify.toml` for advanced configuration:\n\n```toml\n[build]\n  publish = \"out\"\n  command = \"npm run build\"\n\n[build.environment]\n  NODE_VERSION = \"18\"\n  NPM_VERSION = \"8\"\n\n[[redirects]]\n  from = \"/old-docs/*\"\n  to = \"/docs/:splat\"\n  status = 301\n\n[[redirects]]\n  from = \"/docs/*\"\n  to = \"/docs/:splat\"\n  status = 200\n\n[[headers]]\n  for = \"/fonts/*\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"/_next/static/*\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n    Strict-Transport-Security = \"max-age=31536000; includeSubDomains\"\n```\n\n## Custom Domain Setup\n\n### 1. Add Domain\n\nIn Netlify dashboard:\n\n1. Go to **Site settings** → **Domain management**\n2. Add custom domain\n3. Configure DNS\n\n### 2. DNS Configuration\n\nFor `docs.yoursite.com`:\n\n```\nCNAME docs.yoursite.com your-site.netlify.app\n```\n\nFor root domain with Netlify DNS:\n\n```\nA @ 75.2.60.5\nAAAA @ 2600:1800:4000:1::\n```\n\n### 3. SSL Certificate\n\nNetlify provides automatic HTTPS with Let's Encrypt certificates.\n\n## Environment Configuration\n\n### Development Environment\n\n```bash\n# .env.local\nNEXT_PUBLIC_SITE_URL=http://localhost:3000\nNEXT_PUBLIC_BACKGROUND_TYPE=wave\n```\n\n### Production Environment\n\nSet in Netlify dashboard under **Site settings** → **Environment variables**:\n\n```bash\nNEXT_PUBLIC_SITE_URL=https://docs.yoursite.com\nNEXT_PUBLIC_BACKGROUND_TYPE=dither\nNEXT_PUBLIC_GA_ID=G-XXXXXXXXXX\nNODE_ENV=production\n```\n\n### Branch-specific Variables\n\n```toml\n# netlify.toml\n[context.production.environment]\n  NEXT_PUBLIC_ENVIRONMENT = \"production\"\n\n[context.deploy-preview.environment]\n  NEXT_PUBLIC_ENVIRONMENT = \"preview\"\n\n[context.branch-deploy.environment]\n  NEXT_PUBLIC_ENVIRONMENT = \"development\"\n```\n\n## Advanced Features\n\n### Form Handling\n\nNetlify provides built-in form handling:\n\n```html\n<!-- Contact form example -->\n<form name=\"contact\" method=\"POST\" data-netlify=\"true\">\n  <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n  <p>\n    <label>Name: <input type=\"text\" name=\"name\" required /></label>\n  </p>\n  <p>\n    <label>Email: <input type=\"email\" name=\"email\" required /></label>\n  </p>\n  <p>\n    <label>Message: <textarea name=\"message\" required></textarea></label>\n  </p>\n  <p>\n    <button type=\"submit\">Send</button>\n  </p>\n</form>\n```\n\n### Serverless Functions\n\nCreate serverless functions for dynamic features:\n\n```typescript\n// netlify/functions/api.ts\nimport { Handler } from '@netlify/functions';\n\nexport const handler: Handler = async (event, context) => {\n  const { httpMethod, path, body } = event;\n\n  if (httpMethod === 'POST' && path === '/api/contact') {\n    const data = JSON.parse(body || '{}');\n\n    // Process form submission\n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ success: true }),\n    };\n  }\n\n  return {\n    statusCode: 404,\n    body: JSON.stringify({ error: 'Not found' }),\n  };\n};\n```\n\n### Analytics Integration\n\nEnable Netlify Analytics:\n\n```toml\n# netlify.toml\n[build]\n  command = \"npm run build\"\n\n[build.environment]\n  NETLIFY_ANALYTICS = \"true\"\n```\n\n## Performance Optimization\n\n### Asset Optimization\n\nNetlify automatically provides:\n\n- **Global CDN** with 100+ edge locations\n- **Image optimization** with automatic WebP conversion\n- **Asset minification** for CSS and JS\n- **Brotli compression**\n\n### Build Optimization\n\nOptimize build performance:\n\n```toml\n[build]\n  command = \"npm ci && npm run build\"\n\n[build.environment]\n  NODE_OPTIONS = \"--max-old-space-size=4096\"\n  NPM_CONFIG_PRODUCTION = \"false\"\n```\n\n### Caching Strategy\n\nConfigure intelligent caching:\n\n```toml\n[[headers]]\n  for = \"/*.js\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"/*.css\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"/*.html\"\n  [headers.values]\n    Cache-Control = \"public, max-age=3600, must-revalidate\"\n```\n\n## Branch Deployments\n\n### Deploy Previews\n\nNetlify creates deploy previews for:\n\n- **Pull requests** get unique URLs\n- **Branch deploys** for feature testing\n- **Split testing** capabilities\n\n### Branch-specific Configuration\n\n```toml\n# Production\n[context.production]\n  command = \"npm run build:production\"\n\n# Deploy previews\n[context.deploy-preview]\n  command = \"npm run build:preview\"\n\n# Branch deploys\n[context.branch-deploy]\n  command = \"npm run build:development\"\n```\n\n## CI/CD Integration\n\n### GitHub Actions with Netlify\n\n```yaml\n# .github/workflows/netlify.yml\nname: Netlify Deployment\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Build project\n        run: npm run build\n\n      - name: Deploy to Netlify\n        uses: nwtgck/actions-netlify@v2.0\n        with:\n          publish-dir: './out'\n          production-branch: main\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          deploy-message: 'Deploy from GitHub Actions'\n        env:\n          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}\n```\n\n### Netlify Build Plugins\n\nUse build plugins for enhanced functionality:\n\n```toml\n# netlify.toml\n[[plugins]]\n  package = \"@netlify/plugin-lighthouse\"\n\n  [plugins.inputs.thresholds]\n    performance = 0.9\n    accessibility = 0.9\n    best-practices = 0.9\n    seo = 0.9\n\n[[plugins]]\n  package = \"netlify-plugin-submit-sitemap\"\n\n  [plugins.inputs]\n    baseUrl = \"https://docs.yoursite.com\"\n    sitemapPath = \"/sitemap.xml\"\n    providers = [\n      \"google\",\n      \"bing\"\n    ]\n```\n\n## Monitoring and Analytics\n\n### Netlify Analytics\n\nBuilt-in server-side analytics:\n\n- **Page views** and unique visitors\n- **Top pages** and referrers\n- **Bandwidth** usage\n- **Geographic** distribution\n\n### Performance Monitoring\n\nTrack Core Web Vitals:\n\n```typescript\n// lib/netlify-analytics.ts\nexport function reportWebVitals(metric: any) {\n  // Netlify Analytics (built-in)\n  if (window.netlifyAnalytics) {\n    window.netlifyAnalytics.track('web-vital', {\n      name: metric.name,\n      value: metric.value,\n      id: metric.id,\n    });\n  }\n\n  // Custom tracking\n  fetch('/.netlify/functions/analytics', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(metric),\n  });\n}\n```\n\n### Error Tracking\n\n```typescript\n// netlify/functions/error-tracking.ts\nimport { Handler } from '@netlify/functions';\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod !== 'POST') {\n    return { statusCode: 405, body: 'Method Not Allowed' };\n  }\n\n  const error = JSON.parse(event.body || '{}');\n\n  // Log error (could send to external service)\n  console.error('Client error:', error);\n\n  return {\n    statusCode: 200,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ received: true }),\n  };\n};\n```\n\n## Security Features\n\n### Security Headers\n\nComprehensive security configuration:\n\n```toml\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    Content-Security-Policy = \"default-src 'self'; script-src 'self' 'unsafe-inline' https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: https:; connect-src 'self' https://www.google-analytics.com\"\n    X-Frame-Options = \"DENY\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n    Strict-Transport-Security = \"max-age=31536000; includeSubDomains; preload\"\n    Permissions-Policy = \"camera=(), microphone=(), geolocation=()\"\n```\n\n### Access Control\n\nProtect sensitive areas:\n\n```toml\n# Password protect staging\n[[context.branch-deploy.headers]]\n  for = \"/*\"\n  [context.branch-deploy.headers.values]\n    Basic-Auth = \"staging:$STAGING_PASSWORD\"\n\n# IP restrictions (Netlify Pro)\n[[headers]]\n  for = \"/admin/*\"\n  [headers.values]\n    X-Forwarded-For = \"192.168.1.0/24\"\n```\n\n## Form Processing\n\n### Contact Forms\n\nProcess form submissions:\n\n```typescript\n// netlify/functions/contact.ts\nimport { Handler } from '@netlify/functions';\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod !== 'POST') {\n    return { statusCode: 405, body: 'Method Not Allowed' };\n  }\n\n  const { name, email, message } = JSON.parse(event.body || '{}');\n\n  // Validate input\n  if (!name || !email || !message) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error: 'Missing required fields' }),\n    };\n  }\n\n  // Process form (send email, save to database, etc.)\n  try {\n    await sendEmail({ name, email, message });\n\n    return {\n      statusCode: 200,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ success: true }),\n    };\n  } catch (error) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Failed to send message' }),\n    };\n  }\n};\n```\n\n### Spam Protection\n\nImplement spam protection:\n\n```html\n<!-- Honeypot field -->\n<form name=\"contact\" method=\"POST\" data-netlify=\"true\">\n  <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n\n  <!-- Honeypot (hidden from users) -->\n  <p style=\"display: none;\">\n    <input name=\"bot-field\" />\n  </p>\n\n  <!-- reCAPTCHA -->\n  <div data-netlify-recaptcha=\"true\"></div>\n\n  <button type=\"submit\">Send</button>\n</form>\n```\n\n## Database Integration\n\n### Netlify Databases\n\nIntegration options:\n\n1. **FaunaDB** - Serverless, globally distributed\n2. **MongoDB Atlas** - Cloud MongoDB\n3. **Supabase** - Open source Firebase alternative\n4. **PlanetScale** - Serverless MySQL\n\n### Example: FaunaDB Integration\n\n```typescript\n// lib/fauna.ts\nimport faunadb from 'faunadb';\n\nconst client = new faunadb.Client({\n  secret: process.env.FAUNA_SECRET_KEY!,\n});\n\nexport async function getDocuments() {\n  const query = faunadb.query;\n\n  try {\n    const result = await client.query(\n      query.Map(\n        query.Paginate(query.Documents(query.Collection('documents'))),\n        query.Lambda('ref', query.Get(query.Var('ref')))\n      )\n    );\n\n    return result;\n  } catch (error) {\n    console.error('Fauna query error:', error);\n    throw error;\n  }\n}\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**Build Failures:**\n\n```bash\n# Check build logs in Netlify dashboard\n# Or use CLI\nnetlify build --debug\n```\n\n**Routing Issues:**\n\n```toml\n# Fix SPA routing\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n  conditions = {Role = [\"admin\"]}\n```\n\n**Function Errors:**\n\n```bash\n# Test functions locally\nnetlify dev\n```\n\n### Debug Mode\n\nEnable debug logging:\n\n```toml\n[build]\n  command = \"DEBUG=* npm run build\"\n\n[build.environment]\n  DEBUG = \"netlify*\"\n```\n\n### Performance Issues\n\n**Slow builds:**\n\n```toml\n[build]\n  command = \"npm ci --prefer-offline && npm run build\"\n\n[build.environment]\n  NPM_CONFIG_PREFER_OFFLINE = \"true\"\n  NPM_CONFIG_CACHE = \".npm\"\n```\n\n## Cost Optimization\n\n### Free Tier Limits\n\nNetlify free plan includes:\n\n- **100GB** bandwidth per month\n- **300** build minutes per month\n- **125k** serverless function invocations\n\n### Pro Plan Benefits\n\nFor production sites:\n\n- **1TB** bandwidth\n- **Advanced build features**\n- **Analytics and forms**\n- **Identity and Git Gateway**\n\n### Optimization Tips\n\n1. **Build optimization** - Efficient dependency installation\n2. **Function efficiency** - Optimize serverless functions\n3. **Asset compression** - Use built-in optimization\n4. **Caching** - Proper cache headers\n\n## Migration Guide\n\n### From Other Platforms\n\n**From Vercel:**\n\n1. Export build configuration\n2. Convert `vercel.json` to `netlify.toml`\n3. Migrate environment variables\n4. Update DNS records\n\n**From GitHub Pages:**\n\n1. Import repository to Netlify\n2. Configure build command\n3. Set up custom domain\n4. Update DNS\n\n### Zero-downtime Migration\n\n1. **Set up Netlify** deployment in parallel\n2. **Test thoroughly** on deploy preview\n3. **Configure domain** with DNS failover\n4. **Monitor** performance and errors\n5. **Rollback** if issues occur\n\n## Best Practices\n\n### Performance\n\n- Use build plugins for optimization\n- Implement proper caching headers\n- Monitor Core Web Vitals\n- Optimize images and fonts\n\n### Security\n\n- Configure security headers\n- Use environment variables for secrets\n- Implement rate limiting\n- Regular security audits\n\n### Monitoring\n\n- Enable Netlify Analytics\n- Set up error tracking\n- Monitor build performance\n- Track user engagement\n\n## Next Steps\n\n- **[Cloudflare Pages](./cloudflare)** - Alternative platform guide\n- **[Production Setup](../production-setup)** - Advanced configuration\n- **[Monitoring](../../user-guide/troubleshooting)** - Error tracking and analytics\n"
  },
  "paths": [
    "getting-started/introduction",
    "getting-started/quick-start",
    "getting-started/installation",
    "user-guide/basic-usage",
    "user-guide/advanced-features",
    "user-guide/configuration",
    "user-guide/troubleshooting",
    "user-guide/chatbot",
    "api-reference/overview",
    "api-reference/authentication",
    "api-reference/endpoints",
    "developer-guides/code-examples",
    "developer-guides/best-practices",
    "developer-guides/contributing",
    "developer-guides/design-system",
    "developer-guides/ui-configuration",
    "developer-guides/icon-customization",
    "deployment/overview",
    "deployment/production-setup",
    "deployment/platforms/cloudflare",
    "deployment/platforms/vercel",
    "deployment/platforms/netlify"
  ],
  "count": 22
}
