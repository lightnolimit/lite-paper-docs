# Lite Paper Documentation - Full Content

> Complete documentation content for AI ingestion. This file contains all documentation in a single, structured format.


## Getting Started


### Introduction

URL: /docs/getting-started/introduction

# Welcome to Your Documentation Site

This is a **modern, interactive documentation template** built with Next.js 15, featuring an innovative Obsidian-style mindmap visualization and a beautiful, responsive design.

## What This Template Provides

This documentation site template offers:

- **📚 Modern Documentation Framework**: Built with Next.js 15 and TypeScript
- **🎨 Beautiful UI**: Clean, responsive design with dark/light mode support
- **🧭 Interactive Navigation**: File tree sidebar with mindmap visualization
- **⚡ Fast Performance**: Optimized for speed with static generation
- **🔍 Smart Search**: Built-in search functionality
- **📱 Mobile-First**: Responsive design that works on all devices
- **🎭 Background Animations**: Dynamic visual effects to enhance user experience

## Key Features

### Interactive Mindmap

Our unique documentation graph shows the relationships between your content pages, inspired by Obsidian's graph view. Navigate your documentation visually and discover connections between related topics.

### Flexible Content Structure

Organize your documentation with a hierarchical structure:

- **Getting Started**: Onboarding and quick setup
- **User Guides**: Detailed usage instructions
- **API Reference**: Technical documentation
- **Developer Resources**: Code examples and best practices
- **Deployment**: Platform-specific deployment guides

### Easy Customization

- Modify content by editing markdown files
- Customize styling through CSS variables
- Add new sections through the data structure
- Deploy anywhere (Cloudflare, Vercel, Netlify)

## Perfect For

This template is ideal for:

- **Product Documentation**: Software and API docs
- **Knowledge Bases**: Internal team documentation
- **Project Wikis**: Open source project documentation
- **Personal Blogs**: Technical writing and tutorials
- **Educational Content**: Course materials and guides

Ready to get started? Check out the [Quick Start Guide](./quick-start) to set up your documentation site in minutes!

## Features

Our documentation template includes:

- 🎨 Modern, responsive design
- 🔍 Fast search functionality
- 📱 Mobile-friendly interface
- 🌙 Dark/light mode support
- 📊 Interactive elements
- 🔗 Cross-references and links

## Getting Help

If you need assistance:

1. Check the troubleshooting guide
2. Search our documentation
3. Reach out to our support team

---

_This template is designed to be customized for your specific project needs._


---


### Quick Start

URL: /docs/getting-started/quick-start

# Quick Start Guide

Get your documentation site up and running in just a few minutes! This guide will walk you through cloning the template, customizing it, and deploying it.

## Prerequisites

Before you begin, make sure you have:

- **Node.js 18+** installed on your system
- **npm** or **yarn** package manager
- A **Git** client for version control
- A **GitHub** account (for deployment automation)

## Step 1: Clone the Template

```bash
# Clone the repository
git clone https://github.com/your-username/documentation-template.git
cd documentation-template

# Install dependencies
npm install
```

## Step 2: Start Development Server

```bash
# Start the development server
npm run dev

# Your site will be available at:
# http://localhost:3000
```

The development server includes:

- **Hot reload** for instant updates
- **Error overlay** for debugging
- **TypeScript checking** in real-time

## Step 3: Customize Your Content

### Update Site Configuration

Edit the main configuration in `app/data/documentation.ts`:

```typescript
export const documentationTree: FileItem[] = [
  {
    type: 'directory',
    name: 'Your Section Name',
    path: 'your-section',
    children: [
      {
        type: 'file',
        name: 'Your Page.md',
        path: 'your-section/your-page',
      },
    ],
  },
];
```

### Create Your Content

Add markdown files in `app/docs/content/`:

```markdown
# Your Page Title

Your content here! You can use:

- Standard markdown syntax
- Code blocks with syntax highlighting
- Tables, lists, and links
- Images and media
```

### Customize Styling

Modify the visual appearance:

- **Colors**: Edit CSS variables in `app/globals.css`
- **Fonts**: Update font imports and CSS
- **Layout**: Modify component styling
- **Animations**: Adjust motion components

## Step 4: Test Your Changes

Before deploying, test your site:

```bash
# Build for production
npm run build

# Start production server
npm start
```

Verify that:

- ✅ All pages load correctly
- ✅ Navigation works properly
- ✅ Mindmap displays your content
- ✅ Responsive design works on mobile
- ✅ Dark/light mode toggles correctly

## Step 5: Deploy to Cloudflare

The easiest way to deploy is using Cloudflare Pages:

1. **Connect Repository**
   - Go to [Cloudflare Pages](https://pages.cloudflare.com)
   - Connect your GitHub repository

2. **Configure Build**

   ```
   Build command: npm run build
   Build directory: .next
   Node.js version: 18+
   ```

3. **Deploy**
   - Cloudflare will automatically build and deploy
   - Your site will be live at `your-project.pages.dev`

## Alternative Deployment Options

### Vercel

```bash
# Install Vercel CLI
npm i -g vercel

# Deploy
vercel
```

### Netlify

```bash
# Install Netlify CLI
npm i -g netlify-cli

# Deploy
netlify deploy --prod
```

### Static Export

For static hosting:

```bash
# Build static version
npm run build && npm run export
```

## What's Next?

Now that your documentation site is running:

1. 📖 Read the [Installation Guide](./installation) for detailed setup
2. 📚 Check the [User Guide](../user-guide/basic-usage) for content management
3. 🚀 Explore [Deployment Options](../../deployment/overview) for production setup
4. 🛠️ Browse [Developer Guides](../../developer-guides/code-examples) for advanced customization

Need help? Every section in this documentation includes detailed examples and troubleshooting tips!


---


### Installation

URL: /docs/getting-started/installation

# Installation Guide

This comprehensive guide covers everything you need to know to install and set up your documentation site template.

## System Requirements

### Minimum Requirements

- **Node.js**: Version 18.0 or higher
- **RAM**: 4GB minimum (8GB recommended)
- **Storage**: 1GB free space
- **OS**: Windows 10+, macOS 10.15+, or Linux (Ubuntu 18.04+)

### Recommended Development Environment

- **Node.js**: Latest LTS version (20.x)
- **Package Manager**: npm 9+ or yarn 3+
- **Editor**: VS Code with TypeScript and React extensions
- **Terminal**: Modern shell (zsh, fish, or PowerShell)

## Prerequisites

### 1. Install Node.js

Choose your installation method:

**Option A: Official Installer**

```bash
# Download from https://nodejs.org
# Verify installation
node --version  # Should be v18.0.0 or higher
npm --version   # Should be 9.0.0 or higher
```

**Option B: Node Version Manager (Recommended)**

```bash
# Install nvm (macOS/Linux)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash

# Install and use Node.js LTS
nvm install --lts
nvm use --lts
```

**Option C: Package Managers**

```bash
# macOS with Homebrew
brew install node

# Ubuntu/Debian
sudo apt-get update
sudo apt-get install nodejs npm

# Windows with Chocolatey
choco install nodejs
```

### 2. Install Git

```bash
# macOS with Homebrew
brew install git

# Ubuntu/Debian
sudo apt-get install git

# Windows
# Download from https://git-scm.com/download/win
```

### 3. Set Up Your Environment

```bash
# Configure Git (first time only)
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Verify Git installation
git --version
```

## Installation Methods

### Method 1: Clone from GitHub (Recommended)

```bash
# 1. Clone the repository
git clone https://github.com/your-username/documentation-template.git
cd documentation-template

# 2. Install dependencies
npm install

# 3. Start development server
npm run dev
```

### Method 2: Fork and Clone

```bash
# 1. Fork the repository on GitHub (click "Fork" button)
# 2. Clone your fork
git clone https://github.com/YOUR_USERNAME/documentation-template.git
cd documentation-template

# 3. Add upstream remote (for updates)
git remote add upstream https://github.com/original-owner/documentation-template.git

# 4. Install dependencies
npm install
```

### Method 3: Download ZIP

```bash
# 1. Download ZIP from GitHub
# 2. Extract to your desired location
# 3. Open terminal in extracted folder
cd documentation-template-main

# 4. Install dependencies
npm install
```

## Project Structure

After installation, your project structure will look like this:

```
documentation-template/
├── app/                          # Next.js app directory
│   ├── components/              # React components
│   │   ├── DocumentationGraph.tsx  # Interactive mindmap
│   │   ├── FileTree.tsx         # Navigation sidebar
│   │   └── ...                  # Other components
│   ├── docs/                    # Documentation system
│   │   ├── content/             # Markdown content files
│   │   └── components/          # Doc-specific components
│   ├── data/                    # Configuration data
│   │   └── documentation.ts     # Site structure
│   └── globals.css              # Global styles
├── public/                      # Static assets
│   └── assets/                  # Images, icons, etc.
├── .next/                       # Build output (auto-generated)
├── package.json                 # Dependencies and scripts
├── next.config.js               # Next.js configuration
├── tailwind.config.js           # Tailwind CSS config
└── tsconfig.json                # TypeScript configuration
```

## Configuration

### 1. Environment Variables

Create a `.env.local` file in the root directory:

```bash
# .env.local
NEXT_PUBLIC_SITE_NAME="Your Documentation Site"
NEXT_PUBLIC_SITE_URL="https://your-domain.com"
NEXT_PUBLIC_GITHUB_URL="https://github.com/your-username/your-repo"
```

### 2. Site Configuration

Edit `app/data/documentation.ts` to customize your site structure:

```typescript
export const documentationTree: FileItem[] = [
  {
    type: 'directory',
    name: 'Getting Started',
    path: 'getting-started',
    children: [
      {
        type: 'file',
        name: 'Introduction.md',
        path: 'getting-started/introduction',
      },
      // Add more files...
    ],
  },
  // Add more sections...
];
```

### 3. Styling Configuration

Customize colors and theme in `app/globals.css`:

```css
:root {
  --primary-color: #3b82f6; /* Blue */
  --secondary-color: #64748b; /* Gray */
  --accent-color: #10b981; /* Green */
  --background-color: #ffffff; /* White */
  --text-color: #1f2937; /* Dark Gray */
}

[data-theme='dark'] {
  --background-color: #111827; /* Dark */
  --text-color: #f9fafb; /* Light Gray */
}
```

## Available Scripts

Once installed, you can use these npm scripts:

```bash
# Development
npm run dev          # Start development server
npm run build        # Build for production
npm run start        # Start production server
npm run lint         # Run ESLint
npm run type-check   # Run TypeScript checks

# Deployment
npm run export       # Export static files
npm run analyze      # Analyze bundle size
```

## Troubleshooting

### Common Issues

**Issue**: `Cannot find module` errors

```bash
# Solution: Clear cache and reinstall
rm -rf node_modules package-lock.json
npm install
```

**Issue**: TypeScript errors during build

```bash
# Solution: Check TypeScript configuration
npm run type-check
```

**Issue**: Port already in use

```bash
# Solution: Use different port
npm run dev -- --port 3001
```

**Issue**: Permission errors (macOS/Linux)

```bash
# Solution: Fix npm permissions
sudo chown -R $(whoami) ~/.npm
```

### Development Tips

1. **Use TypeScript**: The template is fully typed for better development experience
2. **Hot Reload**: Changes to components and content update automatically
3. **Error Overlay**: Development server shows helpful error messages
4. **Browser Dev Tools**: Use React Developer Tools for debugging

### Performance Optimization

```bash
# Enable SWC compiler (faster builds)
# Already configured in next.config.js

# Analyze bundle size
npm run analyze

# Optimize images
# Use next/image component for automatic optimization
```

## Verification

Verify your installation is working correctly:

```bash
# 1. Start development server
npm run dev

# 2. Open browser to http://localhost:3000
# 3. Check that all features work:
#    - Navigation sidebar
#    - Mindmap visualization
#    - Dark/light mode toggle
#    - Responsive design
```

## Next Steps

Your installation is complete! Here's what to do next:

1. 📝 **Customize Content**: Add your own markdown files
2. 🎨 **Style Your Site**: Modify colors and layout
3. 🚀 **Deploy**: Choose your hosting platform
4. 📊 **Analytics**: Add tracking if needed

Continue to the [Quick Start Guide](./quick-start) to begin customizing your site!


---


## User Guide


### Basic Usage

URL: /docs/user-guide/basic-usage

# Basic Usage

Learn how to create and manage content in your documentation site template. This guide covers the essential tasks you'll need to get your documentation up and running.

## Content Management

### Understanding the Structure

Your documentation site uses a **hierarchical structure** defined in `app/data/documentation.ts`:

```typescript
export const documentationTree: FileItem[] = [
  {
    type: 'directory', // Section folder
    name: 'Getting Started', // Display name
    path: 'getting-started', // URL path
    children: [
      // Files in this section
      {
        type: 'file',
        name: 'Introduction.md',
        path: 'getting-started/introduction',
      },
    ],
  },
];
```

### Creating New Content

#### 1. Add a New Section

To add a new documentation section:

```typescript
// In app/data/documentation.ts
{
  type: 'directory',
  name: 'Your New Section',
  path: 'your-new-section',
  children: [
    {
      type: 'file',
      name: 'Overview.md',
      path: 'your-new-section/overview'
    }
  ]
}
```

#### 2. Create the Content File

Create the corresponding markdown file:

```bash
# Create the directory
mkdir -p app/docs/content/your-new-section

# Create the markdown file
touch app/docs/content/your-new-section/overview.md
```

#### 3. Write Your Content

```markdown
# Overview

Welcome to your new section! You can use:

- **Headers** for structure
- **Lists** for organization
- **Code blocks** for examples
- **Links** to other pages
- **Images** and media

## Subsection

Your content here...
```

### Content File Locations

All content files are stored in `app/docs/content/` with paths matching your configuration:

```
app/docs/content/
├── getting-started/
│   ├── introduction.md
│   ├── quick-start.md
│   └── installation.md
├── user-guide/
│   ├── basic-usage.md
│   ├── advanced-features.md
│   └── configuration.md
└── your-new-section/
    └── overview.md
```

## Navigation Features

### File Tree Sidebar

The left sidebar shows your documentation structure:

- **📁 Directories** - Expandable sections
- **📄 Files** - Individual pages
- **🎯 Current Page** - Highlighted in the tree
- **🔍 Search** - Type to filter content

### Interactive Mindmap

The **Documentation Map** at the bottom of the sidebar:

- **Visual Navigation** - See page relationships
- **Node Colors** - Files (purple) vs directories (blue)
- **Current Page** - Highlighted with pulsing border
- **Click to Navigate** - Click any node to jump to that page
- **Connected Pages** - Shows related content links

### Breadcrumb Navigation

At the top of each page:

- Shows your current location
- Click any segment to navigate up
- Automatically generated from file structure

## Writing Content

### Markdown Syntax

Your content supports full Markdown syntax:

````markdown
# H1 Header

## H2 Header

### H3 Header

**Bold text** and _italic text_

- Unordered lists

1. Ordered lists

`inline code` and code blocks:

```javascript
function example() {
  return 'Hello, world!';
}
```
````

[Links](./other-page) to other pages

![Images](./image.png) with alt text

````

### Code Blocks with Syntax Highlighting

Support for multiple languages:

```typescript
// TypeScript
interface User {
  name: string;
  email: string;
}
````

```bash
# Bash commands
npm install
npm run dev
```

```css
/* CSS styling */
.my-class {
  color: blue;
  font-size: 16px;
}
```

### Linking Between Pages

Use relative paths to link between documentation pages:

```markdown
<!-- Link to other pages -->

[Installation Guide](./installation)
[User Guide](../user-guide/basic-usage)
[API Reference](../../api-reference/overview)

<!-- Link to sections within a page -->

[Go to Content Management](#content-management)
```

### Adding Images

Store images in the `public/assets/` directory:

```markdown
![Documentation Screenshot](/assets/images/screenshot.png)
![Diagram](/assets/diagrams/flow-chart.svg)
```

## Customization

### Theme and Styling

#### Color Scheme

Modify colors in `app/globals.css`:

```css
:root {
  --primary-color: #3b82f6; /* Blue */
  --secondary-color: #64748b; /* Gray */
  --accent-color: #10b981; /* Green */
}

[data-theme='dark'] {
  --primary-color: #60a5fa; /* Lighter blue for dark mode */
}
```

#### Typography

Change fonts and text styling:

```css
:root {
  --font-family: 'Inter', sans-serif;
  --font-mono: 'JetBrains Mono', monospace;
  --font-size-base: 16px;
  --line-height: 1.6;
}
```

### Background Animations

Toggle between different background effects in the settings menu:

- **Wave** - Animated wave patterns
- **Geometric** - Moving geometric shapes
- **Particles** - Floating particle system
- **Grid** - Animated grid overlay
- **None** - Solid color background

### Mobile Responsiveness

The template is fully responsive:

- **Mobile-first design**
- **Collapsible sidebar** on small screens
- **Touch-friendly navigation**
- **Optimized fonts and spacing**

## Content Organization Tips

### Best Practices

1. **Logical Hierarchy**

   ```
   Getting Started → User Guide → Advanced Features → API Reference
   ```

2. **Clear Naming**
   - Use descriptive section names
   - Keep file names concise but clear
   - Use kebab-case for paths

3. **Cross-references**
   - Link related topics together
   - Create "See also" sections
   - Use the mindmap to visualize connections

4. **Progressive Disclosure**
   - Start with basics in "Getting Started"
   - Build complexity gradually
   - Reference advanced topics from basics

### Content Templates

#### New Feature Documentation

```markdown
# Feature Name

Brief description of what this feature does.

## When to Use

Explain the use cases and scenarios.

## How to Use

Step-by-step instructions.

## Examples

Practical examples with code.

## Troubleshooting

Common issues and solutions.

## Related Topics

- [Link to related feature](./related)
- [Link to API reference](../api/endpoint)
```

#### Tutorial Template

```markdown
# Tutorial: Doing Something

What you'll learn and accomplish.

## Prerequisites

What readers need before starting.

## Step-by-Step Guide

### Step 1: Setup

Instructions...

### Step 2: Implementation

Code examples...

### Step 3: Testing

Verification steps...

## Next Steps

Where to go from here.
```

## Publishing Workflow

### Local Development

```bash
# Make your changes
npm run dev

# Test your content
# Preview in browser at localhost:3000

# Check for build errors
npm run build
```

### Version Control

```bash
# Stage your changes
git add .

# Commit with descriptive message
git commit -m "Add new user guide section"

# Push to repository
git push origin main
```

### Automatic Deployment

If connected to Cloudflare Pages:

1. Push changes to your main branch
2. Cloudflare automatically builds and deploys
3. Changes are live in 2-5 minutes

## Troubleshooting

### Common Issues

**Page not showing in navigation**

- Check that the file path matches the configuration in `documentation.ts`
- Ensure the markdown file exists in the correct directory

**Broken links**

- Use relative paths: `./page` or `../section/page`
- Check spelling and case sensitivity

**Images not loading**

- Store images in `public/assets/`
- Use absolute paths: `/assets/images/photo.jpg`

**Mindmap not showing connections**

- Connections are automatically generated based on folder structure
- Add manual connections by linking between pages

### Getting Help

- Check the [Configuration Guide](./configuration) for advanced setup
- Review [Troubleshooting](./troubleshooting) for specific issues
- Explore [Code Examples](../developer-guides/code-examples) for customization

Your documentation site is now ready to use! Start adding your content and customizing the design to match your needs.


---


### Advanced Features

URL: /docs/user-guide/advanced-features

# Advanced Features

Explore the powerful advanced capabilities of our documentation platform.

## Interactive Components

### Documentation Graph Visualization

Our documentation features an interactive mind map that visualizes the structure of all documentation pages:

```tsx
import { DocumentationGraph } from '../components/DocumentationGraph';

function MyPage() {
  return (
    <DocumentationGraph
      currentPath="user-guide/advanced-features"
      onNodeClick={(path) => {
        // Navigate to the selected documentation page
        router.push(`/docs/${path}`);
      }}
      className="w-full h-96"
    />
  );
}
```

**Live Example:**
The documentation graph you can see in our navigation demonstrates real-time visualization of our actual documentation structure, with:

- Interactive nodes representing each documentation page
- Dynamic connections showing relationships
- Smooth animations and hover effects
- Click-to-navigate functionality

### Theme Switching System

Real-time theme switching with smooth transitions:

```tsx
import { useTheme } from '../providers/ThemeProvider';

function ThemeDemo() {
  const { isDarkMode, toggleTheme, prefersReducedMotion } = useTheme();

  return (
    <div className="p-4 rounded-lg doc-card">
      <h3>Current Theme: {isDarkMode ? 'Dark' : 'Light'}</h3>
      <button
        onClick={toggleTheme}
        className="mt-2 px-4 py-2 rounded bg-primary-color text-background-color"
      >
        Switch to {isDarkMode ? 'Light' : 'Dark'} Mode
      </button>
      <p className="mt-2 text-muted-color">Motion: {prefersReducedMotion ? 'Reduced' : 'Full'}</p>
    </div>
  );
}
```

**Current Implementation:**

- Automatic system preference detection
- Smooth color transitions with CSS variables
- Persistent theme storage in localStorage
- Reduced motion support for accessibility

### Interactive Background Systems

Multiple animated background options with real-time switching:

```tsx
import { BackgroundSelector } from '../components/BackgroundSelector';

// Current background types available:
const backgrounds = [
  'wave', // Animated wave patterns with mouse interaction
  'stars', // 3D star field with cursor effects
  'dither', // Shader-based dithering effects
  'solid', // Static background for reduced motion
];

function BackgroundDemo() {
  return (
    <div className="settings-panel">
      <h4>Background Style</h4>
      <BackgroundSelector className="flex gap-2" />
    </div>
  );
}
```

**Working Features:**

- Wave background: Real-time mouse interaction with elastic deformation
- Stars background: 3D WebGL star field with subtle cursor influence
- Dither background: GPU-accelerated dithering patterns
- Automatic fallback to solid backgrounds for reduced motion preferences

## Advanced Configuration

### Typography System

Our documentation uses a carefully designed typography scale:

```css
/* Real CSS variables from our system */
:root {
  --title-font: 'Urbanist', sans-serif;
  --body-font: 'Urbanist', sans-serif;
  --mono-font: 'MapleMono', 'SF Mono', monospace;

  /* Light mode colors */
  --text-color: #1f2937;
  --text-secondary: #374151;
  --muted-color: #6b7280;
}

.dark {
  /* Dark mode colors */
  --text-color: #f8fafc;
  --text-secondary: #e2e8f0;
  --muted-color: #94a3b8;
}
```

**Typography Features:**

- High contrast ratios for accessibility (WCAG AA compliant)
- Optimized line heights for reading (1.75 for body text)
- Proper font loading with `font-display: swap`
- Responsive scaling across devices

### Code Block System

Enhanced syntax highlighting with multiple language support:

```tsx
import { CodeBlock } from '../components/CodeBlock';

const codeExamples = [
  {
    language: 'typescript',
    code: `interface DocumentationPage {
  title: string;
  path: string;
  content: string;
  lastModified: Date;
}`,
    label: 'TypeScript',
  },
  {
    language: 'javascript',
    code: `const config = {
  theme: 'auto',
  animations: true,
  background: 'wave'
};`,
    label: 'JavaScript',
  },
];

function CodeDemo() {
  return (
    <CodeBlock
      snippets={codeExamples}
      title="Configuration Examples"
      defaultLanguage="typescript"
      showLineNumbers={true}
    />
  );
}
```

**Features:**

- Multi-language syntax highlighting (powered by Prism.js)
- One-click copy functionality
- Tab-based language switching
- Dark/light theme adaptation
- Line number support

### Settings System

Real settings persistence and state management:

```tsx
import { SettingsMenu } from '../components/SettingsMenu';

// Actual settings that work in our app:
const availableSettings = {
  theme: ['light', 'dark', 'system'],
  motion: ['full', 'reduced'],
  background: ['wave', 'stars', 'dither', 'solid'],
};

function Settings() {
  return <SettingsMenu className="relative" isCompact={false} />;
}
```

**Live Settings:**

- Theme persistence across browser sessions
- Motion preference detection and respect
- Background type switching with page reload
- Dropdown animations with reduced motion support

## Performance Optimizations

### Real Performance Metrics

Our documentation site implements several performance optimizations:

**Bundle Optimization:**

- **Code Splitting**: Routes are dynamically imported
  - Main bundle: ~102kB (gzipped)
  - Docs pages: ~419kB (includes syntax highlighting)
- **Tree Shaking**: Unused code eliminated automatically
- **Static Generation**: All routes pre-rendered at build time

**Asset Optimization:**

- **Font Loading**: WOFF2 format with `font-display: swap`
  - Urbanist: ~42KB per variant
  - Urbanist: ~42KB per variant
  - MapleMono: ~17MB (loaded on demand for code blocks)
- **Image Optimization**: Next.js automatic WebP/AVIF conversion
- **Static Assets**: Served from CDN with proper caching headers

**JavaScript Performance:**

```tsx
// Lazy loading for heavy components
const DocumentationGraph = dynamic(() => import('../components/DocumentationGraph'), {
  ssr: false,
});

// Background components loaded on demand
const BackgroundComponents = {
  wave: dynamic(() => import('../components/WaveBackground'), { ssr: false }),
  stars: dynamic(() => import('../components/StarsBackground'), { ssr: false }),
};
```

### Animation Performance

**Optimized Animations:**

- CSS transforms instead of layout changes
- `requestAnimationFrame` for smooth updates
- Hardware acceleration with `transform3d`
- Automatic animation disabling for reduced motion preferences

**Real Performance Data:**

- 60 FPS animations on modern devices
- <16ms frame times for smooth interactions
- Graceful degradation on lower-end devices
- Zero animation overhead when motion is reduced

## Accessibility Features

### Motion Sensitivity

Our platform respects user preferences for reduced motion:

```tsx
import { useTheme } from '../providers/ThemeProvider';

function MotionAwareComponent() {
  const { prefersReducedMotion } = useTheme();

  const animations = prefersReducedMotion
    ? {
        // Static fallbacks
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        transition: { duration: 0.05 },
      }
    : {
        // Full animations
        initial: { opacity: 0, y: 20 },
        animate: { opacity: 1, y: 0 },
        transition: { duration: 0.3, ease: 'easeOut' },
      };

  return <motion.div {...animations}>Content adapts to user preferences</motion.div>;
}
```

**Accessibility Features:**

- Automatic `prefers-reduced-motion` detection
- Keyboard navigation support throughout
- Screen reader compatible markup
- High contrast mode support
- Focus indicators for all interactive elements

### Real Accessibility Testing

**WCAG Compliance:**

- Color contrast ratios exceed WCAG AA standards
- All interactive elements have focus indicators
- Semantic HTML structure for screen readers
- Proper heading hierarchy maintained

**Keyboard Navigation:**

- Tab order follows logical reading flow
- All functionality accessible via keyboard
- Custom focus management for modal dialogs
- Escape key handling for dismissible components

---

**Related Documentation:**

- [Basic Usage](./basic-usage) - Getting started with core features
- [Configuration](./configuration) - Customizing your experience
- [Code Examples](../developer-guides/code-examples) - Implementation details
- [Icon Customization](../developer-guides/icon-customization) - Adding custom icons


---


### Configuration

URL: /docs/user-guide/configuration

# Configuration

Customize your project settings and behavior.

## Configuration Files

### Main Config

```json
{
  "name": "my-project",
  "version": "1.0.0",
  "description": "My awesome project",
  "main": "index.js",
  "config": {
    "environment": "development",
    "debug": true,
    "features": {
      "analytics": true,
      "notifications": false
    }
  }
}
```

### Environment Variables

```bash
# .env.local
NODE_ENV=development
API_URL=http://localhost:3000/api
DATABASE_URL=postgresql://user:pass@localhost:5432/db
SECRET_KEY=your-secret-key
```

## Settings

| Setting   | Type    | Default | Description          |
| --------- | ------- | ------- | -------------------- |
| `debug`   | boolean | `false` | Enable debug mode    |
| `port`    | number  | `3000`  | Server port          |
| `timeout` | number  | `5000`  | Request timeout (ms) |
| `cache`   | boolean | `true`  | Enable caching       |

## Advanced Options

### Custom Middleware

```javascript
// middleware.js
export default function customMiddleware(options) {
  return (req, res, next) => {
    // Custom logic here
    console.log(`Request: ${req.method} ${req.url}`);
    next();
  };
}
```

### Plugin Configuration

```javascript
// plugins.config.js
export default {
  plugins: [
    'essential-plugin',
    ['advanced-plugin', { option: 'value' }],
    {
      name: 'custom-plugin',
      config: { enabled: true },
    },
  ],
};
```

---

_Having issues? See our [troubleshooting guide](./troubleshooting)._


---


### Troubleshooting

URL: /docs/user-guide/troubleshooting

# Troubleshooting

Common issues and solutions for your documentation site.

## Build Issues

### Static Export Errors

If you encounter errors during static export:

```bash
# Clear build cache
rm -rf .next
npm run build
```

**Common solutions:**

- Check for dynamic imports that need `ssr: false`
- Verify all paths in `generateStaticParams` are valid
- Ensure no server-side only code in client components

### Font Loading Issues

If custom fonts aren't loading:

1. **Check font paths** in `globals.css`
2. **Verify font files** exist in `public/fonts/`
3. **Add proper font-display** values for performance

```css
@font-face {
  font-family: 'YourFont';
  src: url('/fonts/your-font.woff2') format('woff2');
  font-display: swap; /* Important for performance */
}
```

## Performance Issues

### Slow Page Loading

If pages load slowly:

1. **Optimize images** - Use Next.js Image component
2. **Reduce bundle size** - Check for unused imports
3. **Enable compression** in your hosting provider

### Animation Performance

If animations are choppy:

1. **Use CSS transforms** instead of changing layout properties
2. **Enable hardware acceleration** with `transform3d(0,0,0)`
3. **Respect reduced motion** preferences

```css
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
}
```

## Content Issues

### Markdown Not Rendering

If markdown content isn't displaying:

1. **Check file extensions** - Should be `.md`
2. **Verify frontmatter** format
3. **Check for syntax errors** in markdown

### Search Not Working

If the documentation search isn't functioning:

1. **Verify search index** is being built
2. **Check for JavaScript errors** in browser console
3. **Ensure search component** is properly imported

## Deployment Issues

### Cloudflare Pages

Common Cloudflare deployment issues:

```bash
# Build command
npm run build

# Output directory
out
```

**Environment variables:**

- `NODE_VERSION=18`
- `NPM_VERSION=8`

### Vercel Deployment

For Vercel deployment issues:

```json
// vercel.json
{
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "out"
      }
    }
  ]
}
```

## Browser Compatibility

### Modern Browser Features

This template uses modern web features:

- **CSS Custom Properties** (IE 11+)
- **Flexbox** (IE 11+)
- **ES6+ JavaScript** (Chrome 51+, Firefox 54+, Safari 10+)

For older browser support, consider:

- Adding polyfills
- Using PostCSS with autoprefixer
- Transpiling JavaScript with Babel

## Getting Help

If you're still experiencing issues:

1. **Check the console** for error messages
2. **Review the documentation** thoroughly
3. **Search existing issues** on GitHub
4. **Create a new issue** with detailed information:
   - Browser version
   - Node.js version
   - Error messages
   - Steps to reproduce

## Debug Mode

Enable debug mode for additional logging:

```bash
# Development
npm run dev

# Check browser console for debug information
# Press Ctrl+Shift+D to toggle debug cursor (development only)
```

## Performance Monitoring

Monitor your site's performance:

1. **Lighthouse** - Built into Chrome DevTools
2. **WebPageTest** - Detailed performance analysis
3. **Core Web Vitals** - Google's performance metrics

### Optimization Checklist

- [ ] Images optimized and properly sized
- [ ] Fonts loading efficiently
- [ ] CSS/JS minified in production
- [ ] Unused code removed
- [ ] Caching headers configured
- [ ] CDN configured (if applicable)

## Common Error Messages

### "Page is missing param in generateStaticParams"

This occurs when a route is referenced but not included in static generation:

1. **Check documentation.ts** for invalid paths
2. **Verify content files** exist for all referenced paths
3. **Update generateStaticParams** to include all valid routes

### "Module not found"

Usually indicates:

- Missing dependency installation
- Incorrect import path
- Case sensitivity issues (especially on Linux/macOS)

```bash
# Reinstall dependencies
rm -rf node_modules package-lock.json
npm install
```


---


### Chatbot

URL: /docs/user-guide/chatbot

# Documentation Chatbot

The documentation site includes an intelligent chatbot assistant that can help you find information, answer questions, and navigate the documentation more effectively.

## Overview

The chatbot uses **Retrieval-Augmented Generation (RAG)** technology to:

- Search through all documentation content
- Provide contextual answers with source references
- Suggest related topics and pages
- Guide you to the most relevant information

## How to Use

### Opening the Chatbot

The chatbot is available on every page of the documentation:

1. **Click the chat button** in the bottom-right corner of any page
2. **Keyboard shortcut**: Press `Ctrl/Cmd + K` to open search, then select "Ask AI"
3. The chat interface will slide up from the bottom

### Asking Questions

The chatbot understands natural language questions about:

**General inquiries:**

- "How do I customize the theme?"
- "What background options are available?"
- "How to add new icons?"

**Technical questions:**

- "Show me code examples for the navigation component"
- "How do I deploy this documentation site?"
- "What are the performance optimization features?"

**Navigation help:**

- "Where can I find the API documentation?"
- "Show me the getting started guide"
- "What's in the developer guides section?"

### Understanding Responses

Each chatbot response includes:

1. **Main Answer**: Contextual response based on your question
2. **Source Links**: Direct links to relevant documentation pages
3. **Related Topics**: Suggestions for additional reading
4. **Code Examples**: When applicable, working code snippets

## Features

### Smart Search

The chatbot performs intelligent keyword matching:

- **Title prioritization**: Matches in page titles score higher
- **Content relevance**: Searches through all documentation content
- **Contextual understanding**: Understands related terms and concepts

### Response Types

The chatbot adapts its responses based on your question:

**How-to Questions**

```
Q: "How do I add custom icons?"
A: Based on the documentation, here's how you can add custom icons:

1. Visit iconify.design and find your desired icon
2. Save the SVG file to /public/assets/icons/
3. Import and use in your components...

For more detailed information, check the Icon Customization section.
```

**Definition Questions**

```
Q: "What is the theme system?"
A: Based on the documentation:

The theme system provides automatic dark/light mode switching
with smooth transitions, persistent storage, and reduced motion support...

You can find additional information in:
- UI Configuration
- Advanced Features
```

**Example Requests**

```
Q: "Show me navigation examples"
A: Here are relevant examples from the documentation:

**Navigation Component:**
Building a responsive navigation with search functionality...

**Code Examples:**
Real implementation of the theme provider...
```

### Source Attribution

Every response includes clickable source links:

- Links open in new tabs for easy reference
- Sources are ranked by relevance
- Up to 5 source documents per response

## Technical Implementation

### Backend API

The chatbot uses a RESTful API endpoint:

```typescript
POST /api/chat
{
  "query": "How do I customize themes?"
}

// Response
{
  "answer": "Based on the documentation...",
  "sources": [
    {
      "title": "UI Configuration",
      "path": "developer-guides/ui-configuration",
      "snippet": "Theme customization allows...",
      "relevanceScore": 85
    }
  ],
  "timestamp": "2024-01-15T10:30:00Z"
}
```

### Document Processing

The system automatically:

1. **Indexes all markdown files** in the documentation
2. **Splits content into chunks** for better search performance
3. **Scores relevance** based on keyword matches and context
4. **Generates contextual answers** based on found content

### Performance

- **Fast responses**: Typically under 500ms
- **Efficient search**: Keyword-based matching with scoring
- **Cached content**: Documentation is indexed at build time
- **Lightweight**: No external AI dependencies required

## Customization

### Adding Content Sources

To include additional content in chatbot responses:

1. **Add markdown files** to `/app/docs/content/`
2. **Include frontmatter** for better categorization:

   ```markdown
   ---
   title: 'Your Page Title'
   category: 'user-guide'
   ---

   # Your Content
   ```

3. **Rebuild the site** to index new content

### Modifying Responses

The response generation logic is in `/app/api/chat/route.ts`:

```typescript
function generateAnswer(query: string, sources: DocumentSource[]): string {
  // Custom logic for different question types
  if (queryLower.includes('how to')) {
    return generateHowToAnswer(query, sources);
  }
  // Add your own response patterns here
}
```

### Styling the Interface

The chatbot UI can be customized via CSS variables:

```css
/* Chatbot theming */
.chatbot-container {
  --chat-primary: var(--primary-color);
  --chat-background: var(--card-background);
  --chat-border: var(--border-color);
}
```

## Best Practices

### For Users

1. **Be specific**: "How to add icons?" vs "Icons?"
2. **Use natural language**: Ask questions as you would to a person
3. **Check sources**: Click through to referenced documentation
4. **Try variations**: Rephrase if you don't get the expected answer

### For Content Authors

1. **Clear headings**: Use descriptive section titles
2. **Good structure**: Organize content logically
3. **Include examples**: Practical code examples improve responses
4. **Update regularly**: Keep documentation current for better answers

## Accessibility

The chatbot is designed with accessibility in mind:

- **Keyboard navigation**: Full keyboard support
- **Screen readers**: Proper ARIA labels and structure
- **Motion preferences**: Respects `prefers-reduced-motion`
- **High contrast**: Works with high contrast modes
- **Focus management**: Proper focus handling for modal interface

## Privacy

The chatbot operates entirely on your documentation content:

- **No external APIs**: All processing happens locally
- **No data collection**: Questions and responses are not stored
- **No tracking**: No analytics or user behavior tracking
- **Offline capable**: Works without internet connection

## Troubleshooting

### Common Issues

**Chatbot doesn't respond:**

- Check browser console for JavaScript errors
- Ensure JavaScript is enabled
- Try refreshing the page

**Poor search results:**

- Try different keywords or phrases
- Check if the topic exists in documentation
- Use more specific terms

**Interface doesn't appear:**

- Check if the chat button is visible (bottom-right)
- Try different screen sizes/devices
- Clear browser cache

### Performance Issues

**Slow responses:**

- Check network connectivity
- Ensure adequate device memory
- Close other browser tabs

**Search not finding content:**

- Verify content exists in `/app/docs/content/`
- Check if build includes new content
- Confirm file extensions are `.md`

---

**Related Documentation:**

- [Advanced Features](./advanced-features) - More platform capabilities
- [Configuration](./configuration) - Site customization options
- [Code Examples](../developer-guides/code-examples) - Implementation details


---


## API Reference


### Overview

URL: /docs/api-reference/overview

# API Reference Overview

Complete reference for the documentation system API and components.

## Getting Started with the API

This documentation system provides several APIs and components that you can extend and customize:

### Component API

The main components available for customization:

- **DocumentationGraph** - Interactive mind map visualization
- **FileTree** - Navigation sidebar component
- **ThemeProvider** - Theme and motion preference management
- **BackgroundSelector** - Background animation controls

### Configuration API

Key configuration files:

- `app/data/documentation.ts` - Site structure definition
- `app/globals.css` - Theme colors and styling
- `next.config.js` - Build and deployment settings
- `tailwind.config.js` - Utility classes and theme

## Core Concepts

### File Structure

```
app/
├── components/          # Reusable UI components
├── docs/               # Documentation system
│   ├── content/        # Markdown content files
│   └── components/     # Doc-specific components
├── data/               # Configuration and data
└── providers/          # React context providers
```

### Routing System

The documentation uses Next.js dynamic routing:

```typescript
// Route: /docs/[...slug]
// Maps to: app/docs/content/{slug}.md
```

### Theme System

Theme management through CSS custom properties:

```css
:root {
  --primary-color: #678d58; /* Matcha green */
  --background-color: #f3f5f0;
}

.dark {
  --primary-color: #ff85a1; /* Sakura pink */
  --background-color: #0f0f12;
}
```

## Component Props

### DocumentationGraph

Interactive mind map component for visualizing documentation structure.

```typescript
interface DocumentationGraphProps {
  currentPath?: string; // Current active page
  onNodeClick?: (path: string) => void; // Node click handler
  className?: string; // Additional CSS classes
}
```

**Features:**

- Theme-aware colors
- Search functionality with relevance scoring
- Reduced motion support
- Responsive design

### FileTree

Navigation component for the documentation sidebar.

```typescript
interface FileTreeProps {
  items: FileItem[]; // Documentation structure
  onSelect: (item: FileItem) => void; // Selection handler
  currentPath?: string; // Current active page
}

interface FileItem {
  name: string; // Display name
  path: string; // URL path
  type: 'file' | 'directory'; // Item type
  children?: FileItem[]; // Nested items
}
```

### ThemeProvider

Context provider for theme and accessibility preferences.

```typescript
interface ThemeContextType {
  isDarkMode: boolean; // Current theme state
  toggleTheme: () => void; // Theme toggle function
  prefersReducedMotion: boolean; // Motion preference
  toggleReducedMotion: () => void; // Motion toggle function
}
```

## Customization Hooks

### useTheme()

Access theme and motion preferences:

```typescript
import { useTheme } from '../providers/ThemeProvider';

function MyComponent() {
  const {
    isDarkMode,
    toggleTheme,
    prefersReducedMotion,
    toggleReducedMotion
  } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className={isDarkMode ? 'dark-styles' : 'light-styles'}
    >
      Toggle Theme
    </button>
  );
}
```

## Styling API

### CSS Custom Properties

Theme-aware styling using CSS variables:

```css
.my-component {
  background-color: var(--card-color);
  color: var(--text-color);
  border: 1px solid var(--border-color);
}
```

### Available Variables

| Variable             | Light Mode | Dark Mode | Purpose              |
| -------------------- | ---------- | --------- | -------------------- |
| `--primary-color`    | #678D58    | #FF85A1   | Primary theme color  |
| `--background-color` | #F3F5F0    | #0F0F12   | Page background      |
| `--card-color`       | #FFFFFF    | #1A1A1F   | Card backgrounds     |
| `--text-color`       | #2E3A23    | #F0F0F5   | Primary text         |
| `--border-color`     | #222       | #bbb      | Borders and dividers |

### Font Variables

```css
:root {
  --title-font: 'Urbanist', sans-serif;
  --body-font: 'Urbanist', sans-serif;
  --mono-font: 'MapleMono', 'SF Mono', monospace;
}
```

## Advanced Usage

### Custom Background Components

Create your own animated background:

```typescript
import React from 'react';

const CustomBackground = React.memo(() => {
  return (
    <div className="fixed inset-0 z-0 pointer-events-none">
      {/* Your custom background implementation */}
    </div>
  );
});

export default CustomBackground;
```

### Extending the Mind Map

Customize the documentation graph:

```typescript
// In your component
<DocumentationGraph
  currentPath={currentPath}
  onNodeClick={(path) => {
    // Custom navigation logic
    router.push(`/docs/${path}`);
    analytics.track('mindmap_navigation', { path });
  }}
  className="custom-mindmap-styles"
/>
```

### Adding New Content Types

Extend the FileItem type for new content:

```typescript
interface ExtendedFileItem extends FileItem {
  icon?: string; // Custom icon
  description?: string; // Item description
  tags?: string[]; // Content tags
}
```

## Performance Considerations

### Reduced Motion

Always respect user motion preferences:

```typescript
const { prefersReducedMotion } = useTheme();

const animations = prefersReducedMotion
  ? {}
  : {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      transition: { duration: 0.3 },
    };
```

### Code Splitting

Use dynamic imports for heavy components:

```typescript
const HeavyComponent = dynamic(() => import('./HeavyComponent'), { ssr: false });
```

## Next Steps

- **[Authentication Guide](./authentication)** - Implement user authentication
- **[Endpoints Reference](./endpoints)** - Available API endpoints
- **[Code Examples](../developer-guides/code-examples)** - Practical implementation examples


---


### Authentication

URL: /docs/api-reference/authentication

# Authentication

Learn how to authenticate API requests to access protected resources.

## Overview

The API uses token-based authentication to secure endpoints and protect user data. All authenticated requests must include a valid API token in the request headers.

## Getting Started

### 1. Obtain an API Token

To get started with API authentication:

1. Create an account or log in to your existing account
2. Navigate to the API settings in your dashboard
3. Generate a new API token
4. Store the token securely - you won't be able to see it again

### 2. Include Token in Requests

Include your API token in the `Authorization` header of all API requests:

```bash
curl -H "Authorization: Bearer YOUR_API_TOKEN" \
  https://api.example.com/v1/resource
```

## Authentication Methods

### Bearer Token

The recommended authentication method using the Authorization header:

```javascript
const response = await fetch('https://api.example.com/v1/resource', {
  headers: {
    'Authorization': 'Bearer YOUR_API_TOKEN',
    'Content-Type': 'application/json'
  }
});
```

### API Key Parameter

For certain endpoints, you can also pass the API key as a query parameter:

```
GET https://api.example.com/v1/resource?api_key=YOUR_API_TOKEN
```

� **Note**: This method is less secure and should only be used when header-based authentication is not possible.

## Token Management

### Token Expiration

- API tokens are valid for 90 days by default
- You can configure custom expiration periods in your account settings
- Expired tokens will return a `401 Unauthorized` error

### Regenerating Tokens

To regenerate a token:

1. Go to your API settings
2. Find the token you want to regenerate
3. Click "Regenerate"
4. Update your applications with the new token

### Revoking Tokens

You can revoke a token at any time:

1. Navigate to API settings
2. Find the token to revoke
3. Click "Revoke"
4. The token will immediately become invalid

## Security Best Practices

### Token Storage

- **Never** commit tokens to version control
- Store tokens in environment variables
- Use secret management services in production
- Rotate tokens regularly

### HTTPS Only

All API requests must be made over HTTPS. Requests over HTTP will be rejected.

### Rate Limiting

Authenticated requests have higher rate limits than unauthenticated requests:

- **Authenticated**: 1000 requests per hour
- **Unauthenticated**: 60 requests per hour

## Error Handling

### Common Authentication Errors

| Status Code | Error | Description |
|------------|-------|-------------|
| 401 | Unauthorized | Invalid or missing token |
| 403 | Forbidden | Token lacks required permissions |
| 429 | Too Many Requests | Rate limit exceeded |

### Error Response Format

```json
{
  "error": {
    "code": "UNAUTHORIZED",
    "message": "Invalid authentication token",
    "details": "The provided token has expired or is invalid"
  }
}
```

## OAuth 2.0 (Coming Soon)

We're working on OAuth 2.0 support for third-party integrations. This will enable:

- User authorization flows
- Scoped permissions
- Refresh tokens
- Third-party app integration

## Need Help?

If you're experiencing authentication issues:

1. Verify your token is correct and hasn't expired
2. Check you're using HTTPS
3. Ensure you're not exceeding rate limits
4. Contact support if issues persist

---


### Endpoints

URL: /docs/api-reference/endpoints

# API Endpoints

Reference for all available API endpoints in the documentation system.

## Base URL

```
Development: http://localhost:3000
Production: https://your-domain.com
```

## Documentation Endpoints

### GET /docs/[...slug]

Retrieve documentation page content.

**Parameters:**

- `slug` (array): Path segments for the documentation page

**Example:**

```
GET /docs/getting-started/introduction
GET /docs/api-reference/overview
```

**Response:**

```json
{
  "content": "# Introduction\n\nWelcome to the documentation...",
  "path": "getting-started/introduction",
  "title": "Introduction",
  "lastModified": "2024-01-15T10:30:00Z"
}
```

### GET /api/docs/search

Search documentation content.

**Query Parameters:**

- `q` (string): Search query
- `limit` (number): Maximum results (default: 10)

**Example:**

```
GET /api/docs/search?q=installation&limit=5
```

**Response:**

```json
{
  "results": [
    {
      "title": "Installation Guide",
      "path": "getting-started/installation",
      "excerpt": "Complete installation instructions...",
      "score": 0.95
    }
  ],
  "total": 5,
  "query": "installation"
}
```

## Configuration Endpoints

### GET /api/config/theme

Get current theme configuration.

**Response:**

```json
{
  "themes": {
    "light": {
      "primary": "#678D58",
      "background": "#F3F5F0",
      "text": "#2E3A23"
    },
    "dark": {
      "primary": "#FF85A1",
      "background": "#0F0F12",
      "text": "#F0F0F5"
    }
  },
  "current": "light"
}
```

### POST /api/config/theme

Update theme preferences.

**Request Body:**

```json
{
  "theme": "dark",
  "reduceMotion": false
}
```

**Response:**

```json
{
  "success": true,
  "theme": "dark",
  "reduceMotion": false
}
```

### GET /api/config/navigation

Get navigation structure.

**Response:**

```json
{
  "navigation": [
    {
      "name": "Getting Started",
      "path": "getting-started",
      "type": "directory",
      "children": [
        {
          "name": "Introduction",
          "path": "getting-started/introduction",
          "type": "file"
        }
      ]
    }
  ]
}
```

## Analytics Endpoints

### POST /api/analytics/page-view

Track page views.

**Request Body:**

```json
{
  "path": "/docs/getting-started/introduction",
  "referrer": "https://google.com",
  "userAgent": "Mozilla/5.0...",
  "timestamp": "2024-01-15T10:30:00Z"
}
```

**Response:**

```json
{
  "success": true,
  "id": "pageview_123456"
}
```

### POST /api/analytics/search

Track search queries.

**Request Body:**

```json
{
  "query": "installation guide",
  "results": 5,
  "timestamp": "2024-01-15T10:30:00Z"
}
```

**Response:**

```json
{
  "success": true,
  "id": "search_123456"
}
```

### GET /api/analytics/popular

Get popular content.

**Query Parameters:**

- `period` (string): Time period (day, week, month)
- `limit` (number): Maximum results (default: 10)

**Response:**

```json
{
  "pages": [
    {
      "path": "/docs/getting-started/introduction",
      "title": "Introduction",
      "views": 1250,
      "growth": 15.3
    }
  ],
  "period": "week",
  "total": 10
}
```

## Feedback Endpoints

### POST /api/feedback

Submit page feedback.

**Request Body:**

```json
{
  "path": "/docs/getting-started/introduction",
  "type": "helpful" | "not-helpful" | "suggestion",
  "message": "This page was very helpful!",
  "rating": 5,
  "email": "user@example.com" // optional
}
```

**Response:**

```json
{
  "success": true,
  "id": "feedback_123456",
  "message": "Thank you for your feedback!"
}
```

### GET /api/feedback/summary

Get feedback summary for a page.

**Query Parameters:**

- `path` (string): Page path

**Response:**

```json
{
  "path": "/docs/getting-started/introduction",
  "rating": 4.5,
  "totalFeedback": 45,
  "helpful": 38,
  "notHelpful": 7,
  "suggestions": 12
}
```

## Export Endpoints

### GET /api/export/pdf

Export documentation as PDF.

**Query Parameters:**

- `paths` (array): Pages to include
- `format` (string): Output format (pdf, epub)

**Response:**
Binary PDF file or job ID for async processing.

### GET /api/export/json

Export documentation structure as JSON.

**Response:**

```json
{
  "meta": {
    "exportDate": "2024-01-15T10:30:00Z",
    "version": "1.0.0",
    "totalPages": 45
  },
  "pages": [
    {
      "path": "getting-started/introduction",
      "title": "Introduction",
      "content": "# Introduction\n\n...",
      "lastModified": "2024-01-10T10:30:00Z"
    }
  ]
}
```

## Webhook Endpoints

### POST /api/webhooks/github

Handle GitHub webhook for automatic updates.

**Headers:**

- `X-GitHub-Event`: Event type
- `X-Hub-Signature-256`: HMAC signature

**Request Body:**
GitHub webhook payload

**Response:**

```json
{
  "success": true,
  "processed": ["docs/getting-started/introduction.md"],
  "message": "Documentation updated successfully"
}
```

### POST /api/webhooks/content-update

Trigger content rebuild.

**Request Body:**

```json
{
  "paths": ["getting-started/introduction"],
  "source": "cms",
  "timestamp": "2024-01-15T10:30:00Z"
}
```

**Response:**

```json
{
  "success": true,
  "jobId": "rebuild_123456",
  "estimatedTime": "30s"
}
```

## Error Handling

### Standard Error Response

All endpoints return errors in this format:

```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid request parameters",
    "details": {
      "field": "query",
      "issue": "Required parameter missing"
    }
  },
  "timestamp": "2024-01-15T10:30:00Z",
  "requestId": "req_123456"
}
```

### HTTP Status Codes

| Code | Meaning               |
| ---- | --------------------- |
| 200  | Success               |
| 201  | Created               |
| 400  | Bad Request           |
| 401  | Unauthorized          |
| 403  | Forbidden             |
| 404  | Not Found             |
| 429  | Rate Limited          |
| 500  | Internal Server Error |

## Rate Limiting

API endpoints are rate limited to prevent abuse:

| Endpoint Type    | Limit     |
| ---------------- | --------- |
| Read operations  | 1000/hour |
| Write operations | 100/hour  |
| Search           | 60/minute |
| Analytics        | 500/hour  |

Rate limit headers are included in responses:

```
X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 999
X-RateLimit-Reset: 1705312200
```

## Authentication

Some endpoints require authentication. Include the token in the Authorization header:

```
Authorization: Bearer your-jwt-token
```

## SDKs and Clients

### JavaScript/TypeScript SDK

```typescript
import { DocsAPI } from '@your-org/docs-sdk';

const api = new DocsAPI({
  baseURL: 'https://your-domain.com',
  apiKey: 'your-api-key',
});

// Search documentation
const results = await api.search('installation guide');

// Get page content
const page = await api.getPage('getting-started/introduction');

// Submit feedback
await api.submitFeedback({
  path: '/docs/getting-started/introduction',
  type: 'helpful',
  rating: 5,
});
```

### Python SDK

```python
from docs_api import DocsClient

client = DocsClient(
    base_url='https://your-domain.com',
    api_key='your-api-key'
)

# Search documentation
results = client.search('installation guide')

# Get page content
page = client.get_page('getting-started/introduction')

# Submit feedback
client.submit_feedback({
    'path': '/docs/getting-started/introduction',
    'type': 'helpful',
    'rating': 5
})
```

## OpenAPI Specification

The complete OpenAPI specification is available at:

```
GET /api/openapi.json
```

This can be used with tools like:

- Swagger UI
- Postman
- Insomnia
- OpenAPI Generator

## Webhook Security

### Signature Verification

Verify webhook signatures to ensure authenticity:

```typescript
import crypto from 'crypto';

function verifySignature(payload: string, signature: string, secret: string): boolean {
  const hmac = crypto.createHmac('sha256', secret);
  hmac.update(payload);
  const digest = `sha256=${hmac.digest('hex')}`;

  return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(digest));
}
```

## Examples

### Curl Examples

```bash
# Search documentation
curl "https://your-domain.com/api/docs/search?q=installation"

# Get page content
curl "https://your-domain.com/docs/api-reference/overview"

# Submit feedback
curl -X POST "https://your-domain.com/api/feedback" \
  -H "Content-Type: application/json" \
  -d '{"path": "/docs/getting-started", "type": "helpful", "rating": 5}'
```

### JavaScript Fetch Examples

```javascript
// Search documentation
const searchResults = await fetch('/api/docs/search?q=installation').then((res) => res.json());

// Submit feedback
const feedback = await fetch('/api/feedback', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    path: '/docs/getting-started',
    type: 'helpful',
    rating: 5,
  }),
}).then((res) => res.json());
```

## Next Steps

- **[Authentication Guide](./authentication)** - Implement API authentication
- **[Code Examples](../developer-guides/code-examples)** - Practical API usage examples
- **[Overview](./overview)** - API architecture and concepts


---


## Developer Guides


### Code Examples

URL: /docs/developer-guides/code-examples

# Code Examples

Welcome to the comprehensive code examples section! Here you'll find practical examples of how to build and customize features in your documentation site using Next.js, React, and modern web technologies.

## Getting Started

Let's start with a simple example of adding a new documentation page:

```typescript
// types/documentation.ts
export interface DocumentationPage {
  title: string;
  path: string;
  content: string;
  lastModified: Date;
  category: string;
}

// Adding a new page to the documentation structure
const newPage: DocumentationPage = {
  title: 'My New Feature',
  path: 'developer-guides/my-new-feature',
  content: '# My New Feature\n\nDetailed documentation content...',
  lastModified: new Date(),
  category: 'developer-guides',
};
```

## Theme System Examples

Here's how to implement and customize the theme system:

```typescript|css|javascript
// TypeScript - Theme Provider Implementation
'use client';

import { createContext, useContext, useEffect, useState } from 'react';

interface ThemeContextType {
  isDarkMode: boolean;
  toggleTheme: () => void;
  prefersReducedMotion: boolean;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);

  useEffect(() => {
    // Check system preferences
    const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');

    setIsDarkMode(darkModeQuery.matches);
    setPrefersReducedMotion(motionQuery.matches);

    // Load saved preference
    const saved = localStorage.getItem('theme');
    if (saved) {
      setIsDarkMode(saved === 'dark');
      document.documentElement.classList.toggle('dark', saved === 'dark');
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDarkMode;
    setIsDarkMode(newTheme);
    localStorage.setItem('theme', newTheme ? 'dark' : 'light');
    document.documentElement.classList.toggle('dark', newTheme);
  };

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleTheme, prefersReducedMotion }}>
      {children}
    </ThemeContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};
---
/* CSS - Theme Variables and Transitions */
:root {
  /* Light theme colors */
  --background-color: #FAFBF9;
  --text-color: #1F2937;
  --text-secondary: #374151;
  --muted-color: #6B7280;
  --card-background: #FFFFFF;
  --border-color: #E5E7EB;

  /* Typography */
  --title-font: 'Urbanist', sans-serif;
  --body-font: 'Urbanist', sans-serif;
  --mono-font: 'MapleMono', 'SF Mono', monospace;

  /* Transitions */
  --theme-transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease;
}

.dark {
  /* Dark theme colors */
  --background-color: #0B0D0F;
  --text-color: #F8FAFC;
  --text-secondary: #E2E8F0;
  --muted-color: #94A3B8;
  --card-background: #111317;
  --border-color: #1F2937;
}

/* Smooth transitions for all theme changes */
* {
  transition: var(--theme-transition);
}

/* Reduced motion preferences */
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none;
    animation: none;
  }
}
---
// JavaScript - Dynamic Background System
class BackgroundManager {
  constructor() {
    this.currentBackground = 'wave';
    this.canvas = null;
    this.animationId = null;
  }

  init(canvasElement) {
    this.canvas = canvasElement;
    this.setupCanvas();
    this.startAnimation();
  }

  setupCanvas() {
    const ctx = this.canvas.getContext('2d');
    const resizeCanvas = () => {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
  }

  startAnimation() {
    const animate = (timestamp) => {
      this.render(timestamp);
      this.animationId = requestAnimationFrame(animate);
    };

    animate(0);
  }

  render(timestamp) {
    const ctx = this.canvas.getContext('2d');
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    switch (this.currentBackground) {
      case 'wave':
        this.renderWave(ctx, timestamp);
        break;
      case 'stars':
        this.renderStars(ctx, timestamp);
        break;
      case 'dither':
        this.renderDither(ctx, timestamp);
        break;
    }
  }

  switchBackground(type) {
    this.currentBackground = type;
    localStorage.setItem('backgroundType', type);
  }
}

// Usage
const backgroundManager = new BackgroundManager();
backgroundManager.init(document.getElementById('background-canvas'));
```

## Navigation Component

Building a responsive navigation with search functionality:

```tsx
'use client';

import { useState, useRef, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { documentationTree } from '../data/documentation';

interface SearchResult {
  title: string;
  path: string;
  category: string;
  snippet?: string;
}

export function Navigation() {
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const searchRef = useRef<HTMLInputElement>(null);
  const router = useRouter();

  // Search functionality
  useEffect(() => {
    if (searchQuery.length > 2) {
      const results = searchDocumentation(searchQuery);
      setSearchResults(results);
    } else {
      setSearchResults([]);
    }
  }, [searchQuery]);

  const searchDocumentation = (query: string): SearchResult[] => {
    const results: SearchResult[] = [];
    const searchTerm = query.toLowerCase();

    const searchInTree = (items: any[]) => {
      items.forEach((item) => {
        if (item.type === 'file') {
          const title = item.name.replace('.md', '');
          if (title.toLowerCase().includes(searchTerm)) {
            results.push({
              title,
              path: item.path,
              category: item.path.split('/')[0],
            });
          }
        } else if (item.children) {
          searchInTree(item.children);
        }
      });
    };

    searchInTree(documentationTree);
    return results.slice(0, 10); // Limit results
  };

  const handleSearchSelect = (result: SearchResult) => {
    router.push(`/docs/${result.path}`);
    setIsSearchOpen(false);
    setSearchQuery('');
  };

  return (
    <nav className="sticky top-0 z-50 bg-background-color border-b border-border-color">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-12">
          {/* Logo */}
          <div className="flex items-center">
            <h1 className="text-xl font-bold text-text-color">Documentation</h1>
          </div>

          {/* Search */}
          <div className="relative">
            <button
              onClick={() => setIsSearchOpen(true)}
              className="flex items-center gap-2 px-3 py-2 text-sm text-muted-color border border-border-color rounded-lg hover:border-text-color transition-colors"
            >
              <SearchIcon className="w-4 h-4" />
              Search docs...
              <kbd className="hidden sm:inline-block text-xs border border-border-color rounded px-1">
                ⌘K
              </kbd>
            </button>

            {/* Search Modal */}
            {isSearchOpen && (
              <div className="fixed inset-0 bg-black/50 z-50 flex items-start justify-center pt-[20vh]">
                <div className="bg-card-background border border-border-color rounded-lg w-full max-w-lg mx-4">
                  <div className="p-4 border-b border-border-color">
                    <input
                      ref={searchRef}
                      type="text"
                      placeholder="Search documentation..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full bg-transparent text-text-color placeholder-muted-color border-none outline-none"
                      autoFocus
                    />
                  </div>

                  {searchResults.length > 0 && (
                    <div className="max-h-80 overflow-y-auto">
                      {searchResults.map((result, index) => (
                        <button
                          key={index}
                          onClick={() => handleSearchSelect(result)}
                          className="w-full text-left p-4 hover:bg-background-color transition-colors border-b border-border-color last:border-b-0"
                        >
                          <div className="font-medium text-text-color">{result.title}</div>
                          <div className="text-sm text-muted-color">{result.category}</div>
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Theme Toggle */}
          <ThemeToggle />
        </div>
      </div>
    </nav>
  );
}

function SearchIcon({ className }: { className?: string }) {
  return (
    <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
      />
    </svg>
  );
}
```

## Documentation Graph Component

Creating an interactive visualization of documentation structure:

```tsx
'use client';

import { useEffect, useRef, useState } from 'react';
import { documentationTree } from '../data/documentation';

interface GraphNode {
  id: string;
  label: string;
  path: string;
  x: number;
  y: number;
  connections: string[];
  category: string;
}

export function DocumentationGraph({
  currentPath,
  onNodeClick,
  className,
}: {
  currentPath?: string;
  onNodeClick?: (path: string) => void;
  className?: string;
}) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [nodes, setNodes] = useState<GraphNode[]>([]);
  const [hoveredNode, setHoveredNode] = useState<string | null>(null);

  useEffect(() => {
    const graphNodes = buildGraphFromTree();
    setNodes(graphNodes);
  }, []);

  useEffect(() => {
    if (nodes.length > 0) {
      drawGraph();
    }
  }, [nodes, hoveredNode, currentPath]);

  const buildGraphFromTree = (): GraphNode[] => {
    const nodes: GraphNode[] = [];
    const centerX = 400;
    const centerY = 300;
    let nodeIndex = 0;

    const processItem = (item: any, angle: number, radius: number, parentId?: string) => {
      if (item.type === 'file') {
        const x = centerX + Math.cos(angle) * radius;
        const y = centerY + Math.sin(angle) * radius;

        const node: GraphNode = {
          id: item.path,
          label: item.name.replace('.md', ''),
          path: item.path,
          x,
          y,
          connections: parentId ? [parentId] : [],
          category: item.path.split('/')[0],
        };

        nodes.push(node);
      } else if (item.children) {
        // Add directory node
        const x = centerX + Math.cos(angle) * (radius * 0.6);
        const y = centerY + Math.sin(angle) * (radius * 0.6);

        const dirNode: GraphNode = {
          id: item.path,
          label: item.name,
          path: item.path,
          x,
          y,
          connections: [],
          category: 'directory',
        };

        nodes.push(dirNode);

        // Process children
        item.children.forEach((child: any, index: number) => {
          const childAngle = angle + (index - item.children.length / 2) * 0.3;
          processItem(child, childAngle, radius + 100, item.path);
        });
      }
    };

    documentationTree.forEach((section, index) => {
      const angle = (index / documentationTree.length) * Math.PI * 2;
      processItem(section, angle, 150);
    });

    return nodes;
  };

  const drawGraph = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw connections
    ctx.strokeStyle = 'rgba(156, 163, 175, 0.3)';
    ctx.lineWidth = 1;

    nodes.forEach((node) => {
      node.connections.forEach((connectionId) => {
        const connectedNode = nodes.find((n) => n.id === connectionId);
        if (connectedNode) {
          ctx.beginPath();
          ctx.moveTo(node.x, node.y);
          ctx.lineTo(connectedNode.x, connectedNode.y);
          ctx.stroke();
        }
      });
    });

    // Draw nodes
    nodes.forEach((node) => {
      const isHovered = hoveredNode === node.id;
      const isCurrent = currentPath === node.path;

      // Node circle
      ctx.beginPath();
      ctx.arc(node.x, node.y, isHovered ? 8 : 6, 0, Math.PI * 2);

      if (isCurrent) {
        ctx.fillStyle = '#3B82F6';
      } else if (node.category === 'directory') {
        ctx.fillStyle = '#8B5CF6';
      } else {
        ctx.fillStyle = '#6B7280';
      }

      ctx.fill();

      // Label
      ctx.fillStyle = '#374151';
      ctx.font = '12px system-ui';
      ctx.textAlign = 'center';
      ctx.fillText(node.label, node.x, node.y + 20);
    });
  };

  const handleCanvasClick = (event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    // Find clicked node
    const clickedNode = nodes.find((node) => {
      const distance = Math.sqrt(Math.pow(x - node.x, 2) + Math.pow(y - node.y, 2));
      return distance <= 8;
    });

    if (clickedNode && onNodeClick) {
      onNodeClick(clickedNode.path);
    }
  };

  const handleCanvasMouseMove = (event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    // Find hovered node
    const hoveredNode = nodes.find((node) => {
      const distance = Math.sqrt(Math.pow(x - node.x, 2) + Math.pow(y - node.y, 2));
      return distance <= 8;
    });

    setHoveredNode(hoveredNode?.id || null);
    canvas.style.cursor = hoveredNode ? 'pointer' : 'default';
  };

  return (
    <div className={className}>
      <canvas
        ref={canvasRef}
        width={800}
        height={600}
        onClick={handleCanvasClick}
        onMouseMove={handleCanvasMouseMove}
        className="w-full h-full border border-border-color rounded-lg"
      />
    </div>
  );
}
```

## Code Block Component

Advanced syntax highlighting with copy functionality:

```tsx
'use client';

import { useState } from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark, oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { useTheme } from '../providers/ThemeProvider';

interface CodeSnippet {
  language: string;
  code: string;
  label: string;
}

interface CodeBlockProps {
  snippets: CodeSnippet[];
  title?: string;
  defaultLanguage?: string;
  showLineNumbers?: boolean;
  className?: string;
}

export function CodeBlock({
  snippets,
  title,
  defaultLanguage,
  showLineNumbers = false,
  className = '',
}: CodeBlockProps) {
  const { isDarkMode } = useTheme();
  const [activeTab, setActiveTab] = useState(defaultLanguage || snippets[0]?.language || '');
  const [copied, setCopied] = useState(false);

  const activeSnippet = snippets.find((s) => s.language === activeTab) || snippets[0];

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(activeSnippet.code);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  };

  return (
    <div
      className={`bg-card-background border border-border-color rounded-lg overflow-hidden ${className}`}
    >
      {title && (
        <div className="px-4 py-2 border-b border-border-color">
          <h4 className="text-sm font-medium text-text-color">{title}</h4>
        </div>
      )}

      {snippets.length > 1 && (
        <div className="flex items-center justify-between px-4 py-2 border-b border-border-color bg-background-color">
          <div className="flex gap-1">
            {snippets.map((snippet) => (
              <button
                key={snippet.language}
                onClick={() => setActiveTab(snippet.language)}
                className={`px-3 py-1 text-xs rounded transition-colors ${
                  activeTab === snippet.language
                    ? 'bg-text-color text-background-color'
                    : 'text-muted-color hover:text-text-color'
                }`}
              >
                {snippet.label}
              </button>
            ))}
          </div>

          <button
            onClick={copyToClipboard}
            className="text-xs text-muted-color hover:text-text-color transition-colors"
          >
            {copied ? 'Copied!' : 'Copy'}
          </button>
        </div>
      )}

      <div className="relative">
        <SyntaxHighlighter
          language={activeSnippet.language}
          style={isDarkMode ? oneDark : oneLight}
          showLineNumbers={showLineNumbers}
          customStyle={{
            margin: 0,
            padding: '1rem',
            background: 'transparent',
            fontSize: '0.875rem',
          }}
        >
          {activeSnippet.code}
        </SyntaxHighlighter>

        {snippets.length === 1 && (
          <button
            onClick={copyToClipboard}
            className="absolute top-2 right-2 p-2 text-xs text-muted-color hover:text-text-color transition-colors bg-background-color rounded border border-border-color"
          >
            {copied ? 'Copied!' : 'Copy'}
          </button>
        )}
      </div>
    </div>
  );
}
```

## Testing Examples

Unit and integration tests for documentation components:

```typescript
// __tests__/components/Navigation.test.tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Navigation } from '../components/Navigation';
import { ThemeProvider } from '../providers/ThemeProvider';

const MockedNavigation = () => (
  <ThemeProvider>
    <Navigation />
  </ThemeProvider>
);

describe('Navigation Component', () => {
  it('renders navigation with search functionality', () => {
    render(<MockedNavigation />);

    expect(screen.getByText('Documentation')).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/search docs/i)).toBeInTheDocument();
  });

  it('opens search modal when search button is clicked', async () => {
    render(<MockedNavigation />);

    const searchButton = screen.getByText('Search docs...');
    fireEvent.click(searchButton);

    await waitFor(() => {
      expect(screen.getByPlaceholderText('Search documentation...')).toBeInTheDocument();
    });
  });

  it('filters search results based on query', async () => {
    render(<MockedNavigation />);

    // Open search
    fireEvent.click(screen.getByText('Search docs...'));

    // Type search query
    const searchInput = screen.getByPlaceholderText('Search documentation...');
    fireEvent.change(searchInput, { target: { value: 'installation' } });

    await waitFor(() => {
      expect(screen.getByText('Installation')).toBeInTheDocument();
    });
  });
});
```

## Performance Optimization Examples

```typescript
// utils/performance.ts
export class PerformanceMonitor {
  private static instance: PerformanceMonitor;
  private metrics: Map<string, number[]> = new Map();

  static getInstance(): PerformanceMonitor {
    if (!PerformanceMonitor.instance) {
      PerformanceMonitor.instance = new PerformanceMonitor();
    }
    return PerformanceMonitor.instance;
  }

  measureRender(componentName: string, renderTime: number) {
    if (!this.metrics.has(componentName)) {
      this.metrics.set(componentName, []);
    }

    const times = this.metrics.get(componentName)!;
    times.push(renderTime);

    // Keep only last 100 measurements
    if (times.length > 100) {
      times.shift();
    }
  }

  getAverageRenderTime(componentName: string): number {
    const times = this.metrics.get(componentName);
    if (!times || times.length === 0) return 0;

    return times.reduce((sum, time) => sum + time, 0) / times.length;
  }

  logPerformanceReport() {
    console.group('Performance Report');
    this.metrics.forEach((times, componentName) => {
      const avg = this.getAverageRenderTime(componentName);
      console.log(`${componentName}: ${avg.toFixed(2)}ms average`);
    });
    console.groupEnd();
  }
}

// Custom hook for measuring component render time
import { useEffect } from 'react';

export function useRenderTime(componentName: string) {
  useEffect(() => {
    const start = performance.now();

    return () => {
      const end = performance.now();
      const renderTime = end - start;
      PerformanceMonitor.getInstance().measureRender(componentName, renderTime);
    };
  });
}
```

## Build and Deployment

Real deployment configuration for Next.js:

```javascript
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },

  // Enable static export
  output: 'export',

  // Disable image optimization for static export
  images: {
    unoptimized: true,
  },

  // Custom webpack configuration
  webpack: (config, { dev, isServer }) => {
    // Optimize bundle size
    if (!dev && !isServer) {
      config.optimization.splitChunks = {
        chunks: 'all',
        cacheGroups: {
          default: false,
          vendors: false,
          vendor: {
            name: 'vendor',
            chunks: 'all',
            test: /node_modules/,
            priority: 20,
          },
          common: {
            name: 'common',
            minChunks: 2,
            chunks: 'all',
            priority: 10,
            reuseExistingChunk: true,
            enforce: true,
          },
        },
      };
    }

    return config;
  },

  // Environment variables
  env: {
    NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',
  },
};

module.exports = nextConfig;
```

## Error Handling

Robust error handling for documentation features:

```typescript
// utils/errorHandler.ts
export class DocumentationError extends Error {
  constructor(
    message: string,
    public code: string,
    public statusCode: number = 500
  ) {
    super(message);
    this.name = 'DocumentationError';
  }
}

export function handleDocumentationError(error: unknown): DocumentationError {
  if (error instanceof DocumentationError) {
    return error;
  }

  if (error instanceof Error) {
    return new DocumentationError(error.message, 'UNKNOWN_ERROR');
  }

  return new DocumentationError('An unknown error occurred', 'UNKNOWN_ERROR');
}

// Error boundary for React components
'use client';

import React from 'react';

interface Props {
  children: React.ReactNode;
  fallback?: React.ComponentType<{ error: Error }>;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class DocumentationErrorBoundary extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Documentation Error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      const FallbackComponent = this.props.fallback || DefaultErrorFallback;
      return <FallbackComponent error={this.state.error!} />;
    }

    return this.props.children;
  }
}

function DefaultErrorFallback({ error }: { error: Error }) {
  return (
    <div className="p-8 text-center">
      <h2 className="text-2xl font-bold text-red-600 mb-4">
        Something went wrong
      </h2>
      <p className="text-gray-600 mb-4">
        {error.message}
      </p>
      <button
        onClick={() => window.location.reload()}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Reload Page
      </button>
    </div>
  );
}
```

---

**Related Documentation:**

- [Advanced Features](../user-guide/advanced-features) - Advanced platform capabilities
- [Best Practices](./best-practices) - Development guidelines
- [Icon Customization](./icon-customization) - Adding custom icons
- [UI Configuration](./ui-configuration) - Theme and layout customization


---


### Best Practices

URL: /docs/developer-guides/best-practices

# Best Practices

Essential guidelines for maintaining and extending your documentation system.

## Code Organization

### Component Structure

Organize components with clear responsibilities:

```
components/
├── ui/              # Basic UI components (Button, Input, etc.)
├── features/        # Feature-specific components
├── layouts/         # Layout components
└── providers/       # Context providers
```

### File Naming Conventions

- **Components**: PascalCase (`DocumentationGraph.tsx`)
- **Utilities**: camelCase (`formatDate.ts`)
- **Constants**: SCREAMING_SNAKE_CASE (`API_ENDPOINTS.ts`)
- **Types**: PascalCase with suffix (`UserInterface.ts`)

### Import Organization

```typescript
// External libraries
import React from 'react';
import { motion } from 'framer-motion';

// Internal utilities
import { formatDate } from '@/lib/utils';

// Components
import { Button } from '@/components/ui/Button';
import { ThemeProvider } from '@/providers/ThemeProvider';

// Types
import type { DocumentationItem } from '@/types';
```

## Performance Optimization

### Component Optimization

Use React's performance features effectively:

```typescript
import React, { memo, useMemo, useCallback } from 'react'

const OptimizedComponent = memo(({ data, onUpdate }) => {
  // Memoize expensive calculations
  const processedData = useMemo(() => {
    return data.map(item => transformItem(item))
  }, [data])

  // Memoize event handlers
  const handleClick = useCallback((id: string) => {
    onUpdate(id)
  }, [onUpdate])

  return (
    <div>
      {processedData.map(item => (
        <Item
          key={item.id}
          data={item}
          onClick={handleClick}
        />
      ))}
    </div>
  )
})
```

### Image Optimization

Use Next.js Image component for optimal performance:

```typescript
import Image from 'next/image'

// Good: Optimized with proper sizing
<Image
  src="/hero-image.jpg"
  alt="Hero image"
  width={800}
  height={600}
  priority={true} // For above-the-fold images
  placeholder="blur"
  blurDataURL="data:image/jpeg;base64,..."
/>

// Avoid: Regular img tags for external images
<img src="/hero-image.jpg" alt="Hero" />
```

### Bundle Optimization

Dynamic imports for code splitting:

```typescript
// Component-level splitting
const HeavyComponent = dynamic(
  () => import('@/components/HeavyComponent'),
  {
    ssr: false,
    loading: () => <Skeleton />
  }
)

// Route-level splitting
const AdminPage = dynamic(() => import('@/pages/admin'))
```

## Accessibility (a11y)

### Semantic HTML

Use appropriate HTML elements:

```typescript
// Good: Semantic structure
<main>
  <header>
    <h1>Page Title</h1>
    <nav aria-label="Main navigation">
      <ul>
        <li><a href="/docs">Documentation</a></li>
      </ul>
    </nav>
  </header>

  <section aria-labelledby="section-title">
    <h2 id="section-title">Section Title</h2>
    <p>Content...</p>
  </section>
</main>

// Avoid: Generic divs for everything
<div>
  <div>Page Title</div>
  <div>
    <div>Documentation</div>
  </div>
</div>
```

### ARIA Labels and Descriptions

Provide context for screen readers:

```typescript
<button
  aria-label="Close sidebar"
  aria-expanded={isOpen}
  aria-controls="sidebar"
  onClick={toggleSidebar}
>
  <CloseIcon aria-hidden="true" />
</button>

<input
  aria-describedby="search-help"
  placeholder="Search documents..."
/>
<div id="search-help" className="sr-only">
  Search through all documentation pages
</div>
```

### Motion Preferences

Respect user motion preferences:

```typescript
const { prefersReducedMotion } = useTheme()

const animations = prefersReducedMotion ? {
  // No animations
} : {
  initial: { opacity: 0, y: 20 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.3 }
}

<motion.div {...animations}>
  Content
</motion.div>
```

### Focus Management

Handle focus for dynamic content:

```typescript
import { useRef, useEffect } from 'react'

function Modal({ isOpen, onClose }) {
  const firstFocusableRef = useRef<HTMLButtonElement>(null)

  useEffect(() => {
    if (isOpen && firstFocusableRef.current) {
      firstFocusableRef.current.focus()
    }
  }, [isOpen])

  return (
    <div role="dialog" aria-modal="true">
      <button
        ref={firstFocusableRef}
        onClick={onClose}
      >
        Close
      </button>
    </div>
  )
}
```

## Error Handling

### Error Boundaries

Implement error boundaries for graceful failures:

```typescript
import React, { Component, ErrorInfo, ReactNode } from 'react'

interface Props {
  children: ReactNode
  fallback?: ReactNode
}

interface State {
  hasError: boolean
  error?: Error
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  }

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error }
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo)

    // Send to error reporting service
    if (typeof window !== 'undefined') {
      // Analytics or error tracking
    }
  }

  public render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <details>
            {this.state.error?.message}
          </details>
        </div>
      )
    }

    return this.props.children
  }
}
```

### Async Error Handling

Handle asynchronous operations safely:

```typescript
import { useState, useEffect } from 'react';

function useAsyncData<T>(fetchFunction: () => Promise<T>) {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    let cancelled = false;

    fetchFunction()
      .then((result) => {
        if (!cancelled) {
          setData(result);
          setError(null);
        }
      })
      .catch((err) => {
        if (!cancelled) {
          setError(err);
          setData(null);
        }
      })
      .finally(() => {
        if (!cancelled) {
          setLoading(false);
        }
      });

    return () => {
      cancelled = true;
    };
  }, []);

  return { data, loading, error };
}
```

## Type Safety

### Strict TypeScript Configuration

```json
// tsconfig.json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "exactOptionalPropertyTypes": true
  }
}
```

### Interface Design

Create clear, extensible interfaces:

```typescript
// Base interface
interface BaseItem {
  id: string;
  createdAt: Date;
  updatedAt: Date;
}

// Specific interfaces extending base
interface DocumentationPage extends BaseItem {
  title: string;
  content: string;
  path: string;
  tags: string[];
}

// Union types for variants
type NavigationItem =
  | { type: 'page'; page: DocumentationPage }
  | { type: 'separator'; label: string }
  | { type: 'external'; url: string; label: string };
```

### Type Guards

Implement type guards for runtime safety:

```typescript
function isDocumentationPage(item: unknown): item is DocumentationPage {
  return (
    typeof item === 'object' &&
    item !== null &&
    'title' in item &&
    'content' in item &&
    'path' in item &&
    typeof (item as any).title === 'string'
  );
}

// Usage
if (isDocumentationPage(data)) {
  // TypeScript knows data is DocumentationPage here
  console.log(data.title);
}
```

## Testing Strategies

### Unit Testing

Test components in isolation:

```typescript
// Component test
import { render, screen, fireEvent } from '@testing-library/react'
import { ThemeProvider } from '@/providers/ThemeProvider'
import { DocumentationGraph } from '@/components/DocumentationGraph'

describe('DocumentationGraph', () => {
  function renderWithTheme(component: React.ReactElement) {
    return render(
      <ThemeProvider>
        {component}
      </ThemeProvider>
    )
  }

  test('renders search input', () => {
    renderWithTheme(
      <DocumentationGraph currentPath="test" onNodeClick={jest.fn()} />
    )

    expect(screen.getByPlaceholderText(/search/i)).toBeInTheDocument()
  })

  test('calls onNodeClick when node is clicked', () => {
    const handleNodeClick = jest.fn()

    renderWithTheme(
      <DocumentationGraph currentPath="test" onNodeClick={handleNodeClick} />
    )

    const node = screen.getByText('Introduction')
    fireEvent.click(node)

    expect(handleNodeClick).toHaveBeenCalledWith('getting-started/introduction')
  })
})
```

### Integration Testing

Test component interactions:

```typescript
// Integration test
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { MemoryRouter } from 'react-router-dom'
import { DocumentationPage } from '@/pages/DocumentationPage'

describe('Documentation Page Integration', () => {
  test('navigation updates content', async () => {
    render(
      <MemoryRouter initialEntries={['/docs/getting-started']}>
        <DocumentationPage />
      </MemoryRouter>
    )

    // Click on a navigation item
    fireEvent.click(screen.getByText('Installation'))

    // Wait for content to update
    await waitFor(() => {
      expect(screen.getByText(/installation guide/i)).toBeInTheDocument()
    })
  })
})
```

### E2E Testing

Test complete user workflows:

```typescript
// e2e/navigation.spec.ts
import { test, expect } from '@playwright/test';

test('user can navigate documentation', async ({ page }) => {
  await page.goto('/docs');

  // Should load the introduction page by default
  await expect(page.locator('h1')).toContainText('Introduction');

  // Click on installation in sidebar
  await page.click('text=Installation');

  // Should navigate to installation page
  await expect(page).toHaveURL('/docs/getting-started/installation');
  await expect(page.locator('h1')).toContainText('Installation');

  // Mind map should be visible
  await expect(page.locator('[data-testid="mind-map"]')).toBeVisible();
});
```

## Security Considerations

### Content Security Policy

Implement CSP headers:

```typescript
// next.config.js
const securityHeaders = [
  {
    key: 'Content-Security-Policy',
    value: `
      default-src 'self';
      script-src 'self' 'unsafe-eval' 'unsafe-inline';
      style-src 'self' 'unsafe-inline';
      img-src 'self' data: https:;
      font-src 'self' data:;
    `
      .replace(/\s+/g, ' ')
      .trim(),
  },
];

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: securityHeaders,
      },
    ];
  },
};
```

### Input Sanitization

Sanitize user inputs:

```typescript
import DOMPurify from 'dompurify'

function sanitizeHTML(dirty: string): string {
  if (typeof window === 'undefined') {
    // Server-side: use a server-safe sanitizer
    return dirty // Implement server-side sanitization
  }

  return DOMPurify.sanitize(dirty)
}

// Usage in component
function UserContent({ htmlContent }: { htmlContent: string }) {
  const sanitizedContent = sanitizeHTML(htmlContent)

  return (
    <div
      dangerouslySetInnerHTML={{ __html: sanitizedContent }}
    />
  )
}
```

### Environment Variables

Secure environment variable handling:

```typescript
// lib/env.ts
function getRequiredEnvVar(key: string): string {
  const value = process.env[key];

  if (!value) {
    throw new Error(`Required environment variable ${key} is not set`);
  }

  return value;
}

export const env = {
  // Public variables (prefixed with NEXT_PUBLIC_)
  siteUrl: process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',

  // Private variables (server-side only)
  databaseUrl: getRequiredEnvVar('DATABASE_URL'),
  jwtSecret: getRequiredEnvVar('JWT_SECRET'),
} as const;
```

## Deployment Best Practices

### Build Optimization

Optimize for production builds:

```javascript
// next.config.js
module.exports = {
  // Static export for CDN deployment
  output: 'export',

  // Image optimization
  images: {
    unoptimized: true, // Required for static export
  },

  // Disable source maps in production
  productionBrowserSourceMaps: false,

  // Enable SWC minification
  swcMinify: true,

  // Optimize bundle
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['framer-motion'],
  },
};
```

### CI/CD Pipeline

Example GitHub Actions workflow:

```yaml
# .github/workflows/deploy.yml
name: Deploy Documentation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - run: npm ci
      - run: npm run lint
      - run: npm run type-check
      - run: npm run test
      - run: npm run build

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - run: npm ci
      - run: npm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: docs
          directory: out
```

## Monitoring and Analytics

### Performance Monitoring

Track Core Web Vitals:

```typescript
// lib/analytics.ts
export function reportWebVitals(metric: any) {
  // Google Analytics 4
  if (typeof gtag !== 'undefined') {
    gtag('event', metric.name, {
      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
      event_category: 'Web Vitals',
      event_label: metric.id,
      non_interaction: true,
    });
  }

  // Send to your analytics service
  fetch('/api/analytics/web-vitals', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(metric),
  });
}

// pages/_app.tsx
export { reportWebVitals };
```

### Error Tracking

Implement error tracking:

```typescript
// lib/error-tracking.ts
class ErrorTracker {
  static init() {
    window.addEventListener('error', this.handleError);
    window.addEventListener('unhandledrejection', this.handlePromiseRejection);
  }

  static handleError(event: ErrorEvent) {
    this.report({
      type: 'javascript',
      message: event.message,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
      stack: event.error?.stack,
    });
  }

  static handlePromiseRejection(event: PromiseRejectionEvent) {
    this.report({
      type: 'promise',
      message: event.reason?.message || 'Unhandled promise rejection',
      stack: event.reason?.stack,
    });
  }

  static report(error: any) {
    fetch('/api/errors', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        ...error,
        url: window.location.href,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString(),
      }),
    }).catch(() => {
      // Fail silently to avoid infinite loops
    });
  }
}

if (typeof window !== 'undefined') {
  ErrorTracker.init();
}
```

## Documentation Standards

### Code Documentation

Document complex logic:

````typescript
/**
 * Calculates relevance score for search results using TF-IDF algorithm
 *
 * @param query - The search query string
 * @param document - The document to score
 * @param corpus - All documents for IDF calculation
 * @returns Relevance score between 0 and 1
 *
 * @example
 * ```typescript
 * const score = calculateRelevance('react hooks', document, allDocuments)
 * console.log(score) // 0.85
 * ```
 */
function calculateRelevance(query: string, document: Document, corpus: Document[]): number {
  // Implementation details...
}
````

### API Documentation

Document all public APIs:

```typescript
/**
 * Configuration options for the documentation system
 */
export interface DocsConfig {
  /** Base URL for the documentation site */
  baseUrl: string;

  /** Theme configuration */
  theme: {
    /** Primary color for light mode (hex) */
    lightPrimary: string;
    /** Primary color for dark mode (hex) */
    darkPrimary: string;
  };

  /** Search configuration */
  search?: {
    /** Maximum number of results to show */
    maxResults?: number;
    /** Enable fuzzy search */
    fuzzy?: boolean;
  };
}
```

### README Templates

Maintain consistent documentation:

```markdown
# Component Name

Brief description of what this component does.

## Usage

\`\`\`typescript
import { ComponentName } from '@/components/ComponentName'

function App() {
return (
<ComponentName 
      prop1="value"
      prop2={42}
      onAction={handleAction}
    />
)
}
\`\`\`

## Props

| Prop  | Type   | Default | Description          |
| ----- | ------ | ------- | -------------------- |
| prop1 | string | -       | Description of prop1 |
| prop2 | number | 0       | Description of prop2 |

## Examples

### Basic Usage

[Example code]

### Advanced Usage

[Example code]
```

## Conclusion

Following these best practices will help you maintain a high-quality, accessible, and performant documentation system. Remember to:

- **Prioritize accessibility** from the start
- **Test thoroughly** at all levels
- **Monitor performance** in production
- **Document your code** for future maintainers
- **Keep security** in mind throughout development

For more specific guidance, refer to:

- **[Code Examples](./code-examples)** - Practical implementations
- **[Contributing Guide](./contributing)** - Collaboration guidelines
- **[Troubleshooting](../user-guide/troubleshooting)** - Common issues and solutions


---


### Contributing

URL: /docs/developer-guides/contributing

# Contributing

Thank you for your interest in contributing to the documentation system! This guide will help you get started.

## Getting Started

### Prerequisites

- Node.js 18+
- npm 8+
- Git

### Setup

1. **Fork the repository**
2. **Clone your fork**:

   ```bash
   git clone https://github.com/your-username/docs-template.git
   cd docs-template
   ```

3. **Install dependencies**:

   ```bash
   npm install
   ```

4. **Start development server**:

   ```bash
   npm run dev
   ```

5. **Open** http://localhost:3000

## Development Workflow

### Branch Naming

Use descriptive branch names:

- `feature/add-search-functionality`
- `fix/mobile-navigation-bug`
- `docs/update-api-reference`
- `refactor/simplify-theme-provider`

### Commit Messages

Follow conventional commit format:

```
type(scope): description

[optional body]

[optional footer]
```

**Types:**

- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation changes
- `style`: Code style changes
- `refactor`: Code refactoring
- `test`: Adding tests
- `chore`: Maintenance tasks

**Examples:**

```
feat(mindmap): add search functionality to documentation graph

fix(mobile): resolve sidebar close button positioning issue

docs(api): update endpoints documentation with new parameters
```

## Code Standards

### TypeScript

- Use strict type checking
- Prefer interfaces over types for object shapes
- Include JSDoc comments for public APIs

```typescript
/**
 * Configuration for the documentation graph component
 */
interface GraphConfig {
  /** Maximum number of nodes to display */
  maxNodes: number;
  /** Enable search functionality */
  enableSearch: boolean;
}
```

### React Components

- Use functional components with hooks
- Memoize expensive operations
- Follow the single responsibility principle

```typescript
import React, { memo, useMemo } from 'react'

interface Props {
  data: GraphData
  onNodeClick: (id: string) => void
}

export const DocumentationGraph = memo<Props>(({ data, onNodeClick }) => {
  const processedNodes = useMemo(() => {
    return data.nodes.map(processNode)
  }, [data.nodes])

  return (
    <svg>
      {processedNodes.map(node => (
        <Node key={node.id} data={node} onClick={onNodeClick} />
      ))}
    </svg>
  )
})
```

### CSS/Styling

- Use CSS custom properties for theming
- Follow BEM methodology for class names
- Ensure responsive design

```css
.documentation-graph {
  --graph-primary: var(--primary-color);
  --graph-background: var(--background-color);
}

.documentation-graph__node {
  fill: var(--graph-primary);
  transition: fill 0.2s ease;
}

.documentation-graph__node--active {
  fill: var(--accent-color);
}
```

## Testing

### Running Tests

```bash
# Unit tests
npm test

# E2E tests
npm run test:e2e

# Test coverage
npm run test:coverage
```

### Writing Tests

Write tests for:

- Component behavior
- User interactions
- Edge cases
- Accessibility features

```typescript
import { render, screen, fireEvent } from '@testing-library/react'
import { DocumentationGraph } from '../DocumentationGraph'

describe('DocumentationGraph', () => {
  const mockData = {
    nodes: [
      { id: '1', title: 'Introduction', x: 0, y: 0 }
    ]
  }

  test('renders nodes correctly', () => {
    render(
      <DocumentationGraph
        data={mockData}
        onNodeClick={jest.fn()}
      />
    )

    expect(screen.getByText('Introduction')).toBeInTheDocument()
  })

  test('calls onNodeClick when node is clicked', () => {
    const handleClick = jest.fn()

    render(
      <DocumentationGraph
        data={mockData}
        onNodeClick={handleClick}
      />
    )

    fireEvent.click(screen.getByText('Introduction'))
    expect(handleClick).toHaveBeenCalledWith('1')
  })
})
```

## Documentation

### Code Documentation

- Add JSDoc comments for all public functions and components
- Include usage examples
- Document complex algorithms

### Content Documentation

- Use clear, concise language
- Include code examples
- Add screenshots when helpful
- Keep content up to date

### API Documentation

Document all public APIs:

````typescript
/**
 * Theme provider for the documentation system
 *
 * @example
 * ```tsx
 * <ThemeProvider>
 *   <App />
 * </ThemeProvider>
 * ```
 */
export function ThemeProvider({ children }: { children: ReactNode }) {
  // Implementation
}
````

## Accessibility

### Requirements

All contributions must:

- Support keyboard navigation
- Include proper ARIA labels
- Respect motion preferences
- Meet WCAG 2.1 AA standards

### Testing Accessibility

```bash
# Install axe-core
npm install --save-dev @axe-core/react

# Run accessibility tests
npm run test:a11y
```

### Common Patterns

```typescript
// Keyboard navigation
<button
  onKeyDown={(e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      handleClick()
    }
  }}
>
  Action
</button>

// Screen reader support
<div
  role="region"
  aria-labelledby="section-title"
  aria-describedby="section-description"
>
  <h2 id="section-title">Section Title</h2>
  <p id="section-description">Description for screen readers</p>
</div>
```

## Performance

### Guidelines

- Use React.memo for expensive components
- Implement proper code splitting
- Optimize images and assets
- Monitor Core Web Vitals

### Profiling

```bash
# Build analysis
npm run analyze

# Performance testing
npm run lighthouse
```

## Pull Request Process

### Before Submitting

1. **Run all tests**: `npm run test:all`
2. **Check linting**: `npm run lint`
3. **Type check**: `npm run type-check`
4. **Build successfully**: `npm run build`
5. **Test accessibility**: `npm run test:a11y`

### PR Template

```markdown
## Description

Brief description of changes

## Type of Change

- [ ] Bug fix
- [ ] New feature
- [ ] Documentation update
- [ ] Performance improvement
- [ ] Code refactoring

## Testing

- [ ] Unit tests pass
- [ ] E2E tests pass
- [ ] Manual testing completed
- [ ] Accessibility testing completed

## Screenshots/GIFs

If applicable, add screenshots or GIFs

## Checklist

- [ ] Code follows style guidelines
- [ ] Self-review completed
- [ ] Documentation updated
- [ ] No new warnings/errors
```

### Review Process

1. **Automated checks** must pass
2. **Code review** by maintainers
3. **Accessibility review** if UI changes
4. **Performance review** for significant changes

## Issue Reporting

### Bug Reports

Use the bug report template:

```markdown
## Bug Description

Clear description of the bug

## Steps to Reproduce

1. Go to '...'
2. Click on '...'
3. See error

## Expected Behavior

What should have happened

## Actual Behavior

What actually happened

## Environment

- OS: [e.g., macOS 13.0]
- Browser: [e.g., Chrome 110]
- Node.js: [e.g., 18.12.0]
```

### Feature Requests

Use the feature request template:

```markdown
## Feature Description

Clear description of the feature

## Use Case

Why is this feature needed?

## Proposed Solution

How would you implement this?

## Alternatives Considered

Any alternative solutions?

## Additional Context

Screenshots, mockups, etc.
```

## Release Process

### Versioning

We follow [Semantic Versioning](https://semver.org/):

- **MAJOR**: Breaking changes
- **MINOR**: New features (backward compatible)
- **PATCH**: Bug fixes (backward compatible)

### Release Checklist

1. Update version in `package.json`
2. Update `CHANGELOG.md`
3. Create release tag
4. Update documentation
5. Deploy to production

## Community Guidelines

### Code of Conduct

- Be respectful and inclusive
- Welcome newcomers
- Focus on constructive feedback
- Help others learn

### Communication

- **GitHub Issues**: Bug reports and feature requests
- **Discussions**: Questions and general discussion
- **PR Reviews**: Code-specific feedback

## Getting Help

### Resources

- **Documentation**: `/docs`
- **Examples**: `/examples`
- **API Reference**: `/docs/api-reference`

### Contact

- **Issues**: GitHub Issues
- **Questions**: GitHub Discussions
- **Security**: security@your-domain.com

## Development Tips

### Useful Commands

```bash
# Development
npm run dev              # Start dev server
npm run dev:turbo        # Start with turbo mode

# Testing
npm run test             # Run unit tests
npm run test:watch       # Watch mode
npm run test:coverage    # With coverage
npm run test:e2e         # E2E tests

# Code Quality
npm run lint             # Lint code
npm run lint:fix         # Fix linting issues
npm run type-check       # TypeScript check
npm run format           # Format code

# Build
npm run build            # Production build
npm run analyze          # Bundle analysis
npm run lighthouse       # Performance audit
```

### Debug Mode

Enable debug features:

```bash
# Environment variable
DEBUG=true npm run dev

# Or in browser console
localStorage.setItem('debugMode', 'true')
```

### Hot Reloading

For instant feedback during development:

- Component changes reload automatically
- CSS changes apply without refresh
- Content changes update in real-time

## Architecture Decisions

### Technology Choices

- **Next.js 13+**: App Router for better developer experience
- **TypeScript**: Type safety and better tooling
- **Framer Motion**: Smooth animations
- **Tailwind CSS**: Utility-first styling
- **React Testing Library**: Component testing

### Folder Structure

```
project/
├── app/                 # Next.js app directory
│   ├── components/      # Reusable components
│   ├── docs/           # Documentation pages
│   ├── providers/      # Context providers
│   └── globals.css     # Global styles
├── public/             # Static assets
├── tests/              # Test files
└── docs/               # Project documentation
```

## Future Roadmap

### Planned Features

- [ ] Full-text search with fuzzy matching
- [ ] Dark/light theme auto-switching
- [ ] PDF export functionality
- [ ] Multi-language support
- [ ] Analytics dashboard
- [ ] Comment system
- [ ] Version history

### Long-term Goals

- Improved performance
- Better accessibility
- Enhanced mobile experience
- Plugin system
- Advanced theming

Thank you for contributing to make documentation better for everyone! 🚀


---


### Design System

URL: /docs/developer-guides/design-system

# Design System Guide

A comprehensive guide to the design system, color palettes, typography, and components that make up the Phantasy documentation platform.

## Color Palettes

Our design system uses two primary color schemes that automatically adapt based on the user's theme preference, providing a cohesive visual experience across light and dark modes.

### Matcha Green (Light Mode)

The light mode uses a nature-inspired matcha green palette that promotes readability and calmness.

```ColorPalette
{
  "colors": [
    {
      "name": "Primary",
      "hex": "#678D58",
      "rgb": "103, 141, 88",
      "usage": "Primary actions, links, focus states"
    },
    {
      "name": "Secondary",
      "hex": "#A3C9A8",
      "rgb": "163, 201, 168",
      "usage": "Secondary elements, hover states"
    },
    {
      "name": "Accent",
      "hex": "#557153",
      "rgb": "85, 113, 83",
      "usage": "Accent elements, highlights"
    }
  ]
}
```

### Sakura Pink (Dark Mode)

The dark mode features a vibrant sakura pink palette that maintains excellent contrast while creating an engaging nighttime experience.

```ColorPalette
{
  "colors": [
    {
      "name": "Primary",
      "hex": "#FF85A1",
      "rgb": "255, 133, 161",
      "usage": "Primary actions, links, focus states"
    },
    {
      "name": "Secondary",
      "hex": "#FFC4DD",
      "rgb": "255, 196, 221",
      "usage": "Secondary elements, hover states"
    },
    {
      "name": "Accent",
      "hex": "#FF4989",
      "rgb": "255, 73, 137",
      "usage": "Accent elements, highlights"
    }
  ]
}
```

### Neutral Colors

Supporting colors that work across both themes for backgrounds, text, and borders.

```ColorPalette
{
  "colors": [
    {
      "name": "Light Background",
      "hex": "#FAFBF9",
      "rgb": "250, 251, 249",
      "usage": "Main background in light mode"
    },
    {
      "name": "Dark Background",
      "hex": "#0B0D0F",
      "rgb": "11, 13, 15",
      "usage": "Main background in dark mode"
    },
    {
      "name": "Text Color",
      "hex": "#1F2937",
      "rgb": "31, 41, 55",
      "usage": "Primary text color"
    },
    {
      "name": "Muted Text",
      "hex": "#6B7280",
      "rgb": "107, 114, 128",
      "usage": "Secondary text, captions"
    }
  ]
}
```

## Wallet Copy Button Component

Our design system includes interactive wallet address components with copy functionality. Here's how to implement them:

### Basic Wallet Address

```html
<code class="wallet-address" data-address="0x1234567890abcdef1234567890abcdef12345678">
  0x1234567890abcdef1234567890abcdef12345678
</code>
```

### Wallet Info Block

```html
<div class="wallet-info">
  <p class="profile-info">
    <strong>Ethereum:</strong>
    <code class="wallet-address" data-address="0x1234567890abcdef1234567890abcdef12345678">
      0x1234567890abcdef1234567890abcdef12345678
    </code>
  </p>
  <p class="profile-info">
    <strong>Bitcoin:</strong>
    <code class="wallet-address" data-address="bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh">
      bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
    </code>
  </p>
</div>
```

The wallet addresses automatically get copy buttons when processed by the content renderer. The copy functionality includes:

- **Instant clipboard access** - One-click copying
- **Visual feedback** - Button changes to checkmark when copied
- **Toast notification** - "Copied to clipboard!" message
- **Automatic reset** - Button returns to copy icon after 1.5 seconds

### CSS Classes for Wallet Components

```css
/* Wallet address styling */
.wallet-address {
  font-family: var(--mono-font);
  background-color: rgba(0, 0, 0, 0.05);
  padding: 0.4rem 0.8rem;
  padding-right: 2.5rem;
  border-radius: 4px;
  border: 1px solid var(--border-color);
  position: relative;
  display: inline-block;
  width: 100%;
  box-sizing: border-box;
}

/* Copy button styling */
.copy-button {
  background-color: rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
  cursor: pointer;
  padding: 4px 8px;
  border-radius: 4px;
  opacity: 0.9;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
}
```

## Design Tokens

### CSS Custom Properties

All colors are available as CSS custom properties that automatically adapt to the current theme:

```css
/* Primary colors (theme-aware) */
--primary-color: /* #678D58 (light) | #FF85A1 (dark) */ --secondary-color:
  /* #A3C9A8 (light) | #FFC4DD (dark) */
  --accent-color: /* #557153 (light) | #FF4989 (dark) */ /* Background colors */
  --background-color: /* #FAFBF9 (light) | #0B0D0F (dark) */
  --card-color: /* #FFFFFF (light) | #111317 (dark) */ /* Text colors */
  --text-color: /* #1F2937 (light) | #F8FAFC (dark) */
  --text-secondary: /* #374151 (light) | #E2E8F0 (dark) */
  --muted-color: /* #6B7280 (light) | #94A3B8 (dark) */ /* Border colors */
  --border-color: /* #222 (light) | #bbb (dark) */
  --border-soft: /* #f2f2f2 (light) | #23232a (dark) */
  --border-unified: /* #d1d5db (light) | #374151 (dark) */;
```

### RGB Values

For opacity and rgba() usage:

```css
/* RGB values for transparency effects */
--primary-color-rgb: /* 103, 141, 88 (light) | 255, 133, 161 (dark) */;
```

## Typography

### Font Families

The design system uses two primary font families:

<div style="margin: 2rem 0;">
  <div style="font-family: var(--title-font); font-size: 2rem; margin-bottom: 1rem; color: var(--text-color);">
    Urbanist - Display & Headings
  </div>
  <div style="font-family: var(--mono-font); font-size: 1.2rem; margin-bottom: 0.5rem; color: var(--text-secondary);">
    MapleMono - Code & Technical Text
  </div>
  <div style="font-family: var(--body-font); font-size: 1rem; color: var(--text-color);">
    Urbanist - Body text and general content for optimal readability.
  </div>
</div>

### Font Weights & Styles

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin: 2rem 0;">
  <div style="padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;">
    <div style="font-family: var(--title-font); font-weight: 300; font-size: 1.2rem; margin-bottom: 0.5rem;">Light (300)</div>
    <div style="font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);">Urbanist Light</div>
  </div>
  <div style="padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;">
    <div style="font-family: var(--title-font); font-weight: 400; font-size: 1.2rem; margin-bottom: 0.5rem;">Regular (400)</div>
    <div style="font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);">Urbanist Regular</div>
  </div>
  <div style="padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;">
    <div style="font-family: var(--title-font); font-weight: 700; font-size: 1.2rem; margin-bottom: 0.5rem;">Bold (700)</div>
    <div style="font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);">Urbanist Bold</div>
  </div>
  <div style="padding: 1rem; border: 1px solid var(--border-unified); border-radius: 8px;">
    <div style="font-family: var(--title-font); font-weight: 900; font-size: 1.2rem; margin-bottom: 0.5rem;">Black (900)</div>
    <div style="font-family: var(--mono-font); font-size: 0.8rem; color: var(--muted-color);">Urbanist Black</div>
  </div>
</div>

### CSS Font Classes

```css
/* Font family classes */
.font-title {
  font-family: var(--title-font);
} /* Urbanist */
.font-mono {
  font-family: var(--mono-font);
} /* MapleMono */

/* Heading styles */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--title-font);
}
```

## Component Examples

### Interactive Copy Buttons

The system includes reusable copy button functionality for various use cases:

#### Color Value Copy

```html
<!-- Example: Color value with copy functionality -->
<div
  style="background-color: var(--primary-color); padding: 1rem; border-radius: 8px; position: relative;"
>
  <code
    class="wallet-address"
    data-address="#678D58"
    style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3);"
  >
    #678D58
  </code>
</div>
```

#### API Key Copy

```html
<!-- Example: API key with copy functionality -->
<code class="wallet-address" data-address="sk-1234567890abcdef1234567890abcdef">
  sk-1234567890abcdef1234567890abcdef
</code>
```

### Notification Styles

The system includes styled notifications using our design tokens:

<div class="notification notification-info">
  <img src="/assets/icons/pixel-info-solid.svg" alt="Info" width="20" height="20" />
  <div>
    <strong>Info:</strong> This notification uses the design system's info styling with proper spacing and typography.
  </div>
</div>

<div class="notification notification-success">
  <img src="/assets/icons/pixel-check-solid.svg" alt="Success" width="20" height="20" />
  <div>
    <strong>Success:</strong> Success notifications maintain consistency with the overall design system.
  </div>
</div>

<div class="notification notification-warning">
  <img src="/assets/icons/pixel-warning-solid.svg" alt="Warning" width="20" height="20" />
  <div>
    <strong>Warning:</strong> Warning notifications use appropriate contrast ratios for accessibility.
  </div>
</div>

<div class="notification notification-error">
  <img src="/assets/icons/pixel-error-solid.svg" alt="Error" width="20" height="20" />
  <div>
    <strong>Error:</strong> Error notifications stand out while maintaining design consistency.
  </div>
</div>

## Spacing System

The design system uses a consistent spacing scale:

<div style="margin: 2rem 0;">
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <div style="width: 0.25rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;"></div>
    <code>0.25rem (4px)</code> - Minimal spacing
  </div>
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <div style="width: 0.5rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;"></div>
    <code>0.5rem (8px)</code> - Small spacing
  </div>
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <div style="width: 1rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;"></div>
    <code>1rem (16px)</code> - Base spacing
  </div>
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <div style="width: 1.5rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;"></div>
    <code>1.5rem (24px)</code> - Medium spacing
  </div>
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <div style="width: 2rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;"></div>
    <code>2rem (32px)</code> - Large spacing
  </div>
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <div style="width: 3rem; height: 2rem; background-color: var(--primary-color); margin-right: 1rem;"></div>
    <code>3rem (48px)</code> - Extra large spacing
  </div>
</div>

## Border Radius

Consistent border radius values across components:

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin: 2rem 0;">
  <div style="background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 4px; padding: 1rem; text-align: center;">
    <code>4px</code><br/>Small radius
  </div>
  <div style="background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 6px; padding: 1rem; text-align: center;">
    <code>6px</code><br/>Medium radius
  </div>
  <div style="background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 8px; padding: 1rem; text-align: center;">
    <code>8px</code><br/>Base radius
  </div>
  <div style="background-color: var(--card-color); border: 1px solid var(--border-unified); border-radius: 12px; padding: 1rem; text-align: center;">
    <code>12px</code><br/>Large radius
  </div>
</div>

## Accessibility

### Color Contrast

All color combinations meet WCAG 2.1 AA standards:

- **Text on Primary**: White text on primary colors meets 4.5:1 contrast ratio
- **Primary on Background**: Primary colors on background meet 3:1 contrast ratio for large text
- **Muted Text**: Secondary text colors maintain at least 4.5:1 contrast with backgrounds

### Reduced Motion

The design system respects user preferences for reduced motion:

```css
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
}
```

### Focus States

All interactive elements include visible focus indicators:

```css
input:focus,
button:focus {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}
```

## Implementation Guide

### Using Color Palettes in Components

1. **Always use CSS custom properties** instead of hardcoded colors
2. **Test in both light and dark modes** to ensure proper contrast
3. **Use semantic color names** rather than specific color values

```css
/* Good */
.my-component {
  background-color: var(--card-color);
  color: var(--text-color);
  border: 1px solid var(--border-unified);
}

/* Avoid */
.my-component {
  background-color: #ffffff;
  color: #1f2937;
  border: 1px solid #d1d5db;
}
```

### Adding Copy Functionality

To add copy buttons to any element:

1. **Add the data-address attribute** with the value to copy
2. **Use the wallet-address class** for styling
3. **The system automatically adds** copy buttons and functionality

```html
<code class="wallet-address" data-address="VALUE_TO_COPY"> Displayed Text </code>
```

### Adding New Colors

When extending the palette:

1. **Define both light and dark variants**
2. **Add RGB values for transparency**
3. **Test accessibility compliance**
4. **Document usage guidelines**

```css
:root {
  --new-color: #your-light-color;
  --new-color-rgb: r, g, b;
}

.dark {
  --new-color: #your-dark-color;
  --new-color-rgb: r, g, b;
}
```

## Resources

### Color Tools

- [Contrast Checker](https://webaim.org/resources/contrastchecker/) - Verify WCAG compliance
- [Coolors.co](https://coolors.co/) - Generate harmonious color palettes
- [Adobe Color](https://color.adobe.com/) - Advanced color theory tools

### Typography Resources

- [Google Fonts](https://fonts.google.com/) - Web font hosting
- [Font Squirrel](https://www.fontsquirrel.com/) - Font testing and optimization

### Design System Examples

- [Material Design](https://material.io/design/color/) - Google's design system
- [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/) - Apple's design principles
- [Atlassian Design System](https://atlassian.design/) - Enterprise design system example

---

This design system provides the foundation for consistent, accessible, and beautiful user interfaces across the Phantasy documentation platform.


---


### UI Configuration

URL: /docs/developer-guides/ui-configuration

# UI Configuration Guide

This documentation site includes configurable UI features that can be easily customized by users who fork the project. All UI configuration is centralized in the `app/config/ui.ts` file.

## Mobile File Tree Toggle

### Overview

The mobile file tree toggle is a floating action button that appears on mobile devices to provide quick access to the documentation sidebar. This feature can be enabled or disabled based on your preferences.

### Configuration

To configure the mobile file tree toggle, edit the `app/config/ui.ts` file:

```typescript
export const uiConfig: UIConfig = {
  // Enable or disable the floating mobile toggle button
  showMobileFileTreeToggle: false, // Change to true to enable

  // Position the toggle button
  mobileTogglePosition: 'bottom-left', // Options: 'bottom-left', 'bottom-right', 'top-left', 'top-right'
};
```

### Available Options

#### `showMobileFileTreeToggle`

- **Type**: `boolean`
- **Default**: `false`
- **Description**: Controls whether the floating mobile toggle button is visible on mobile devices

**When enabled (`true`)**:

- Shows a floating action button on mobile screens
- Button appears when the sidebar is hidden
- Provides quick access to the file tree

**When disabled (`false`)**:

- No floating button appears
- Users can still access the file tree via the navigation menu
- Cleaner mobile interface

#### `mobileTogglePosition`

- **Type**: `'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'`
- **Default**: `'bottom-left'`
- **Description**: Controls the position of the floating toggle button

**Position Options**:

- `'bottom-left'`: Bottom-left corner of the screen
- `'bottom-right'`: Bottom-right corner of the screen
- `'top-left'`: Top-left corner of the screen
- `'top-right'`: Top-right corner of the screen

### Usage Examples

#### Example 1: Enable with Bottom-Right Position

```typescript
export const uiConfig: UIConfig = {
  showMobileFileTreeToggle: true,
  mobileTogglePosition: 'bottom-right',
};
```

#### Example 2: Disable (Default)

```typescript
export const uiConfig: UIConfig = {
  showMobileFileTreeToggle: false,
  mobileTogglePosition: 'bottom-left', // Position doesn't matter when disabled
};
```

### Alternative Access Methods

When the mobile toggle is disabled, users can still access the file tree through:

1. **Navigation Menu**: Tap the hamburger menu (☰) in the top-right corner, then select "Show Documentation Tree"
2. **Desktop View**: The sidebar is always visible on desktop screens

### Implementation Details

The mobile toggle system uses:

- **Responsive Design**: Only appears on mobile screens (`< 768px width`)
- **State Management**: Automatically hides when sidebar is open
- **Accessibility**: Includes proper ARIA labels and keyboard navigation
- **Smooth Animations**: Uses Framer Motion for polished interactions
- **Theme Integration**: Adapts to light/dark mode automatically

### Why It's Disabled by Default

The mobile file tree toggle is disabled by default because:

1. **Clean Interface**: Provides a cleaner mobile experience without floating elements
2. **Alternative Access**: Users can access the file tree via the navigation menu
3. **Customizable**: Projects can easily enable it if needed for their specific use case
4. **Reduced Clutter**: Avoids visual competition with other floating elements

### Customization Tips

- **Brand Consistency**: Consider your brand's design language when choosing the position
- **User Flow**: Place the button where it won't interfere with content interaction
- **Testing**: Test on various mobile devices to ensure the position works well
- **Analytics**: If you have analytics, monitor usage to optimize placement

## File Structure

```
app/
├── config/
│   └── ui.ts                    # UI configuration file
├── docs/
│   └── components/
│       └── DocumentationPage.tsx # Uses the configuration
└── docs/
    └── content/
        └── developer-guides/
            └── ui-configuration.md # This file
```

## Future Enhancements

The UI configuration system is designed to be extensible. Future configuration options might include:

- Sidebar width preferences
- Default theme selection
- Animation preferences
- Content layout options
- Search behavior settings

To request new configuration options, please open an issue in the project repository.


---


### Icon Customization

URL: /docs/developer-guides/icon-customization

# Icon Customization Guide

## Overview

This documentation site supports custom icons throughout the interface. You can easily add new icons from [Iconify Design](https://iconify.design) or create your own custom SVG icons.

## Quick Start

### 1. Find Your Icon

Visit [iconify.design](https://iconify.design) and search for the icon you want:

1. Browse the icon library
2. Click on your desired icon
3. Select "SVG" from the copy options
4. Copy the SVG code

### 2. Add the Icon

Save your SVG file in the `/public/assets/icons/` directory:

```bash
# Example icon file structure
public/
  assets/
    icons/
      pixel-home.svg
      pixel-user.svg
      pixel-settings.svg
      your-new-icon.svg
```

### 3. Use the Icon

Import and use your icon in any component:

```tsx
import Image from 'next/image';

function MyComponent() {
  return <Image src="/assets/icons/your-new-icon.svg" alt="Description" width={20} height={20} />;
}
```

## Icon Standards

### Naming Convention

Follow these naming patterns for consistency:

- **Regular icons**: `icon-name.svg` (e.g., `home.svg`, `user.svg`)
- **Pixel art style**: `pixel-name.svg` (e.g., `pixel-home.svg`)
- **Brand icons**: `brand-name.svg` (e.g., `brand-github.svg`)

### Size Guidelines

| Use Case         | Recommended Size | Example                            |
| ---------------- | ---------------- | ---------------------------------- |
| Navigation icons | 20x20px          | Header buttons, menu items         |
| Content icons    | 16x16px          | Inline with text, small indicators |
| Feature icons    | 24x24px          | Section headers, callouts          |
| Large icons      | 32x32px+         | Hero sections, major features      |

### Color Standards

Icons should work with both light and dark themes:

```css
/* Theme-aware icon styling */
.icon {
  color: var(--icon-color);
  filter: none;
}

/* Dark mode adjustments for light icons */
.dark .icon-light {
  filter: invert(1);
}

/* Light mode adjustments for dark icons */
.icon-dark {
  filter: none;
}

.dark .icon-dark {
  filter: invert(1);
}
```

## Implementation Examples

### Navigation Icons

Add icons to the navigation menu:

```tsx
// In Navigation.tsx
const navItems = [
  {
    label: 'Home',
    href: '/',
    icon: '/assets/icons/pixel-home.svg',
  },
  {
    label: 'Docs',
    href: '/docs',
    icon: '/assets/icons/pixel-book.svg',
  },
];
```

### Content Icons

Use icons in documentation content:

```markdown
## Features

![Feature Icon](/assets/icons/pixel-star.svg) **Advanced Analytics**  
Get detailed insights into your data.

![Security Icon](/assets/icons/pixel-shield.svg) **Enterprise Security**  
Bank-level security for your applications.
```

### Interactive Icons

Create interactive icon components:

```tsx
'use client';

import { useState } from 'react';
import Image from 'next/image';

function ToggleIcon({
  activeIcon,
  inactiveIcon,
  isActive,
  onToggle,
}: {
  activeIcon: string;
  inactiveIcon: string;
  isActive: boolean;
  onToggle: () => void;
}) {
  return (
    <button
      onClick={onToggle}
      className="p-2 rounded-full transition-colors hover:bg-gray-100 dark:hover:bg-gray-800"
    >
      <Image
        src={isActive ? activeIcon : inactiveIcon}
        alt={isActive ? 'Active' : 'Inactive'}
        width={20}
        height={20}
        className="transition-opacity"
      />
    </button>
  );
}

// Usage
function MyComponent() {
  const [isLiked, setIsLiked] = useState(false);

  return (
    <ToggleIcon
      activeIcon="/assets/icons/pixel-heart-filled.svg"
      inactiveIcon="/assets/icons/pixel-heart-outline.svg"
      isActive={isLiked}
      onToggle={() => setIsLiked(!isLiked)}
    />
  );
}
```

## Advanced Customization

### CSS-Only Icons

For simple shapes, consider CSS-only icons:

```css
.arrow-right {
  width: 0;
  height: 0;
  border-left: 8px solid var(--primary-color);
  border-top: 4px solid transparent;
  border-bottom: 4px solid transparent;
}

.dot-indicator {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: var(--primary-color);
}
```

### Animated Icons

Add subtle animations to icons:

```css
.icon-animated {
  transition: transform 0.2s ease;
}

.icon-animated:hover {
  transform: scale(1.1);
}

.icon-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
```

### Icon Sprites

For better performance with many icons, consider SVG sprites:

```xml
<!-- icons-sprite.svg -->
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  <symbol id="home" viewBox="0 0 24 24">
    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
  </symbol>
  <symbol id="user" viewBox="0 0 24 24">
    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
  </symbol>
</svg>
```

```tsx
// Usage with sprites
function SpriteIcon({ id, size = 20 }: { id: string; size?: number }) {
  return (
    <svg width={size} height={size} className="fill-current">
      <use href={`/assets/icons/icons-sprite.svg#${id}`} />
    </svg>
  );
}
```

## Current Icon Inventory

The site currently includes these pixel-art style icons:

### Navigation & UI

- `pixel-cog-solid.svg` - Settings/configuration
- `pixel-home-solid.svg` - Home/dashboard
- `pixel-book-open-solid.svg` - Documentation
- `pixel-folder.svg` - File system

### Content & Features

- `pixel-quote-left-solid.svg` - Blockquotes
- `pixel-star-solid.svg` - Featured content
- `pixel-shield-solid.svg` - Security features
- `pixel-chart-solid.svg` - Analytics/data

### Social Media

- `pixel-instagram.svg` - Instagram
- `pixel-twitch.svg` - Twitch
- `pixel-tiktok.svg` - TikTok
- `pixel-x.svg` - X (Twitter)

## Best Practices

### Performance

- Use SVG for scalability
- Optimize SVG files with tools like [SVGO](https://github.com/svg/svgo)
- Consider icon sprites for multiple icons
- Use appropriate sizes to avoid scaling

### Accessibility

- Always include meaningful `alt` text
- Use ARIA labels for interactive icons
- Ensure sufficient color contrast
- Provide text alternatives when needed

### Consistency

- Maintain consistent visual style
- Use the same stroke width across icon sets
- Follow the site's color palette
- Test icons in both light and dark themes

### Organization

- Group related icons in subdirectories
- Use descriptive file names
- Document custom icons in this guide
- Version control icon assets

## Troubleshooting

### Common Issues

**Icon not displaying:**

- Check the file path is correct
- Ensure the SVG file is valid
- Verify Next.js can access the public directory

**Icon appears too small/large:**

- Adjust width and height props
- Check the SVG viewBox attribute
- Use CSS for responsive sizing

**Icon doesn't change color:**

- Ensure SVG uses `currentColor` or `fill="currentColor"`
- Check CSS targeting is correct
- Verify theme variables are applied

**Dark mode issues:**

- Test icons in both themes
- Use CSS filters for color inversion
- Consider separate icon variants

### Getting Help

If you encounter issues with icons:

1. Check the browser developer tools for errors
2. Validate your SVG syntax
3. Test the icon in isolation
4. Review similar working examples
5. Check the Next.js documentation for static assets

---

**Next Steps:**

- [UI Configuration](./ui-configuration) - Learn about theme and layout customization
- [Best Practices](./best-practices) - Follow development guidelines
- [Code Examples](./code-examples) - See practical implementations


---


## Deployment


### Overview

URL: /docs/deployment/overview

# Deployment Overview

Guide to deploying your documentation site to various hosting platforms.

## Supported Platforms

This documentation template supports deployment to several platforms:

- **[Cloudflare Pages](./platforms/cloudflare)** - Fast global CDN with edge functions
- **[Vercel](./platforms/vercel)** - Optimized for Next.js applications
- **[Netlify](./platforms/netlify)** - JAMstack platform with form handling
- **Static Hosting** - Any CDN or web server

## Build Process

The documentation site uses Next.js static export for optimal performance:

```bash
# Build for production
npm run build

# Output directory
out/
```

### Build Configuration

```javascript
// next.config.js
module.exports = {
  output: 'export', // Static export
  trailingSlash: false,
  images: {
    unoptimized: true, // Required for static export
  },
};
```

## Pre-deployment Checklist

Before deploying, ensure:

- [ ] **All tests pass**: `npm run test`
- [ ] **Build succeeds**: `npm run build`
- [ ] **No TypeScript errors**: `npm run type-check`
- [ ] **Linting passes**: `npm run lint`
- [ ] **Content is up to date**
- [ ] **Environment variables configured**

## Environment Variables

### Public Variables

These are included in the client bundle:

```bash
# Site configuration
NEXT_PUBLIC_SITE_URL=https://docs.yoursite.com
NEXT_PUBLIC_BACKGROUND_TYPE=dither

# Analytics
NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
```

### Build Variables

For build-time configuration:

```bash
# Node.js version
NODE_VERSION=18

# Build settings
NODE_ENV=production
```

## Performance Optimization

### Asset Optimization

The build process automatically:

- Minifies JavaScript and CSS
- Optimizes fonts with `font-display: swap`
- Generates static HTML for all pages
- Creates service worker for caching

### CDN Configuration

Recommended cache headers:

```
# Static assets (JS, CSS, fonts)
Cache-Control: public, max-age=31536000, immutable

# HTML pages
Cache-Control: public, max-age=3600, must-revalidate

# API responses
Cache-Control: public, max-age=300
```

## SSL/HTTPS

All platforms provide automatic HTTPS:

- **Cloudflare**: Universal SSL with flexible/full encryption
- **Vercel**: Automatic SSL certificates via Let's Encrypt
- **Netlify**: Automatic HTTPS with custom domains

### Security Headers

Configure security headers for production:

```
# Content Security Policy
Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'

# Strict Transport Security
Strict-Transport-Security: max-age=31536000; includeSubDomains

# X-Frame-Options
X-Frame-Options: DENY

# X-Content-Type-Options
X-Content-Type-Options: nosniff
```

## Custom Domains

### DNS Configuration

For custom domains, configure DNS:

```
# Root domain
yourdomain.com    A    192.0.2.1

# Subdomain
docs.yourdomain.com    CNAME    your-platform.com
```

### SSL Certificates

Most platforms handle SSL automatically, but you can:

- Use platform-provided certificates
- Upload custom certificates
- Use Cloudflare for additional SSL options

## Monitoring and Analytics

### Performance Monitoring

Track Core Web Vitals:

```javascript
// pages/_app.js
export function reportWebVitals(metric) {
  // Send to analytics service
  gtag('event', metric.name, {
    value: Math.round(metric.value),
    event_category: 'Web Vitals',
  });
}
```

### Error Tracking

Configure error reporting:

```javascript
// lib/error-tracking.js
if (typeof window !== 'undefined') {
  window.addEventListener('error', (event) => {
    // Send error to tracking service
    fetch('/api/errors', {
      method: 'POST',
      body: JSON.stringify({
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
      }),
    });
  });
}
```

## Deployment Automation

### GitHub Actions

Automate deployment with GitHub Actions:

```yaml
# .github/workflows/deploy.yml
name: Deploy Documentation

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: docs
          directory: out
```

### Continuous Deployment

Set up automatic deployments:

1. **Connect repository** to hosting platform
2. **Configure build settings**:
   - Build command: `npm run build`
   - Output directory: `out`
   - Node.js version: `18`
3. **Set environment variables**
4. **Enable automatic deployments** on push

## Rollback Strategy

### Version Control

Maintain deployment history:

- Tag releases: `git tag v1.2.3`
- Keep deployment logs
- Use platform rollback features

### Quick Rollback

Most platforms support instant rollback:

```bash
# Cloudflare Pages
wrangler pages deployment list
wrangler pages deployment rollback <deployment-id>

# Vercel
vercel --prod rollback
```

## Testing in Production

### Staging Environment

Deploy to staging before production:

```bash
# Staging deployment
npm run build:staging
npm run deploy:staging

# Production deployment
npm run build:production
npm run deploy:production
```

### Health Checks

Implement health check endpoints:

```javascript
// pages/api/health.js
export default function handler(req, res) {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version,
  });
}
```

## Troubleshooting

### Common Issues

**Build failures:**

- Check Node.js version compatibility
- Verify all dependencies are installed
- Review build logs for specific errors

**Routing issues:**

- Ensure `trailingSlash: false` in Next.js config
- Check `_redirects` or platform-specific routing

**Asset loading:**

- Verify `basePath` configuration
- Check CORS headers for external assets
- Ensure proper CDN configuration

### Debug Mode

Enable deployment debugging:

```bash
# Verbose build output
npm run build -- --debug

# Platform-specific debugging
DEBUG=true npm run deploy
```

## Security Considerations

### Build Security

- Use `npm ci` instead of `npm install`
- Audit dependencies: `npm audit`
- Keep build environment updated
- Use secrets for sensitive variables

### Runtime Security

- Configure CSP headers
- Enable HSTS
- Use secure cookie settings
- Validate all inputs

## Performance Targets

### Core Web Vitals Goals

- **LCP** (Largest Contentful Paint): < 2.5s
- **FID** (First Input Delay): < 100ms
- **CLS** (Cumulative Layout Shift): < 0.1

### Optimization Techniques

- Static generation for all pages
- Image optimization
- Font loading optimization
- Critical CSS inlining
- Service worker caching

## Cost Optimization

### Free Tier Limits

Most platforms offer generous free tiers:

- **Cloudflare Pages**: 500 builds/month, unlimited bandwidth
- **Vercel**: 100GB bandwidth, 100 builds/month
- **Netlify**: 300 build minutes, 100GB bandwidth

### Scaling Considerations

For high-traffic sites:

- Consider paid plans for better performance
- Implement advanced caching strategies
- Use analytics to optimize popular pages
- Consider edge functions for dynamic content

## Migration Guide

### From Other Platforms

Migrating from:

- **GitBook**: Export content to Markdown
- **Notion**: Use Notion API to export pages
- **Jekyll**: Convert front matter and layouts
- **Docusaurus**: Migrate content structure

### Platform Migration

Moving between hosting platforms:

1. **Export current deployment**
2. **Update DNS gradually**
3. **Test thoroughly**
4. **Monitor for issues**
5. **Update CI/CD pipelines**

## Next Steps

- **[Production Setup](./production-setup)** - Advanced configuration
- **[Platform Guides](./platforms/cloudflare)** - Platform-specific instructions
- **[Troubleshooting](../user-guide/troubleshooting)** - Common deployment issues


---


### Production Setup

URL: /docs/deployment/production-setup

# Production Setup

Advanced configuration for production deployment of your documentation site.

## Production Build Configuration

### Next.js Optimization

```javascript
// next.config.js
module.exports = {
  // Static export for optimal performance
  output: 'export',

  // Disable trailing slashes for cleaner URLs
  trailingSlash: false,

  // Image optimization (disabled for static export)
  images: {
    unoptimized: true,
    formats: ['image/avif', 'image/webp'],
  },

  // Optimize compilation
  swcMinify: true,

  // Experimental optimizations
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['framer-motion', '@react-three/fiber', '@react-three/drei'],
  },

  // Remove source maps in production
  productionBrowserSourceMaps: false,

  // Enable compression
  compress: true,

  // Optimize fonts
  optimizeFonts: true,
};
```

### Environment Variables

Create production environment configuration:

```bash
# .env.production
NEXT_PUBLIC_SITE_URL=https://docs.yoursite.com
NEXT_PUBLIC_BACKGROUND_TYPE=dither
NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
NODE_ENV=production
```

### Build Scripts

Optimize package.json scripts:

```json
{
  "scripts": {
    "build": "next build",
    "build:analyze": "ANALYZE=true next build",
    "build:production": "NODE_ENV=production next build",
    "precommit": "npm run lint && npm run type-check",
    "prebuild": "npm run precommit"
  }
}
```

## Security Hardening

### Content Security Policy

Implement strict CSP headers:

```javascript
// middleware.js
import { NextResponse } from 'next/server';

export function middleware(request) {
  const response = NextResponse.next();

  // Content Security Policy
  response.headers.set(
    'Content-Security-Policy',
    `
      default-src 'self';
      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com;
      style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
      font-src 'self' https://fonts.gstatic.com data:;
      img-src 'self' data: https:;
      connect-src 'self' https://www.google-analytics.com;
      frame-ancestors 'none';
      base-uri 'self';
      form-action 'self';
    `
      .replace(/\s+/g, ' ')
      .trim()
  );

  // Security headers
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');

  // HSTS
  response.headers.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');

  return response;
}

export const config = {
  matcher: '/((?!api|_next/static|_next/image|favicon.ico).*)',
};
```

### Input Sanitization

Sanitize user inputs and markdown content:

```typescript
// lib/sanitize.ts
import DOMPurify from 'isomorphic-dompurify'

interface SanitizeOptions {
  allowedTags?: string[]
  allowedAttributes?: Record<string, string[]>
}

export function sanitizeHTML(
  dirty: string,
  options: SanitizeOptions = {}
): string {
  const config = {
    ALLOWED_TAGS: options.allowedTags || [
      'p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li',
      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
      'code', 'pre', 'blockquote',
      'a', 'img'
    ],
    ALLOWED_ATTR: options.allowedAttributes || {
      'a': ['href', 'title'],
      'img': ['src', 'alt', 'width', 'height'],
      'code': ['class'],
      'pre': ['class']
    },
    ALLOW_DATA_ATTR: false,
    FORBID_SCRIPT: true,
    FORBID_TAGS: ['script', 'object', 'embed', 'iframe'],
  }

  return DOMPurify.sanitize(dirty, config)
}

// Usage in components
function SafeContent({ content }: { content: string }) {
  const sanitizedContent = sanitizeHTML(content)

  return (
    <div
      dangerouslySetInnerHTML={{ __html: sanitizedContent }}
      className="prose dark:prose-invert"
    />
  )
}
```

## Performance Optimization

### Bundle Analysis

Analyze and optimize bundle size:

```bash
# Install bundle analyzer
npm install --save-dev @next/bundle-analyzer

# Configure in next.config.js
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

module.exports = withBundleAnalyzer({
  // ... other config
})

# Run analysis
ANALYZE=true npm run build
```

### Code Splitting

Implement strategic code splitting:

```typescript
// Dynamic imports for heavy components
const DocumentationGraph = dynamic(
  () => import('@/components/DocumentationGraph'),
  {
    ssr: false,
    loading: () => <GraphSkeleton />
  }
)

// Route-level splitting for admin features
const AdminPanel = dynamic(
  () => import('@/components/admin/AdminPanel'),
  { ssr: false }
)

// Library splitting for large dependencies
const HeavyLibrary = dynamic(
  () => import('heavy-library').then(mod => mod.Component),
  { ssr: false }
)
```

### Image Optimization

Optimize images for production:

```typescript
// lib/image-optimization.ts
export function generateImageSrcSet(
  src: string,
  sizes: number[] = [640, 768, 1024, 1280, 1536]
): string {
  return sizes
    .map(size => `${src}?w=${size}&q=75 ${size}w`)
    .join(', ')
}

// Component usage
function OptimizedImage({ src, alt, ...props }) {
  const srcSet = generateImageSrcSet(src)

  return (
    <img
      src={src}
      srcSet={srcSet}
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
      alt={alt}
      loading="lazy"
      decoding="async"
      {...props}
    />
  )
}
```

### Font Optimization

Optimize font loading:

```css
/* globals.css */
@font-face {
  font-family: 'MapleMono';
  src: url('/fonts/MapleMono-NF-CN-Regular.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
  font-display: swap; /* Critical for performance */
}

/* Preload critical fonts */
```

```typescript
// pages/_document.tsx
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head>
        {/* Preload critical fonts */}
        <link
          rel="preload"
          href="/fonts/MapleMono-NF-CN-Regular.woff2"
          as="font"
          type="font/woff2"
          crossOrigin="anonymous"
        />

        {/* DNS prefetch for external resources */}
        <link rel="dns-prefetch" href="//www.google-analytics.com" />
        <link rel="dns-prefetch" href="//fonts.googleapis.com" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

## Monitoring and Analytics

### Performance Monitoring

Implement comprehensive performance tracking:

```typescript
// lib/performance.ts
interface PerformanceMetric {
  name: string;
  value: number;
  id: string;
  navigationType?: string;
}

export function trackWebVitals(metric: PerformanceMetric) {
  // Google Analytics 4
  if (typeof gtag !== 'undefined') {
    gtag('event', metric.name, {
      custom_parameter_name: 'web_vitals',
      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
      event_category: 'Web Vitals',
      event_label: metric.id,
      non_interaction: true,
    });
  }

  // Send to custom analytics endpoint
  fetch('/api/analytics/performance', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      metric: metric.name,
      value: metric.value,
      id: metric.id,
      url: window.location.pathname,
      timestamp: Date.now(),
    }),
  }).catch(() => {
    // Fail silently
  });
}

// Real User Monitoring
export function initRUM() {
  // Track navigation timing
  window.addEventListener('load', () => {
    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;

    trackWebVitals({
      name: 'TTFB',
      value: navigation.responseStart - navigation.requestStart,
      id: 'ttfb',
    });

    trackWebVitals({
      name: 'FCP',
      value: navigation.domContentLoadedEventStart - navigation.navigationStart,
      id: 'fcp',
    });
  });
}
```

### Error Tracking

Comprehensive error monitoring:

```typescript
// lib/error-tracking.ts
interface ErrorReport {
  message: string;
  stack?: string;
  url: string;
  userAgent: string;
  timestamp: string;
  userId?: string;
  sessionId: string;
}

class ErrorTracker {
  private sessionId: string;

  constructor() {
    this.sessionId = this.generateSessionId();
    this.setupErrorHandlers();
  }

  private generateSessionId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  private setupErrorHandlers(): void {
    // JavaScript errors
    window.addEventListener('error', (event) => {
      this.reportError({
        message: event.message,
        stack: event.error?.stack,
        url: window.location.href,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString(),
        sessionId: this.sessionId,
      });
    });

    // Promise rejections
    window.addEventListener('unhandledrejection', (event) => {
      this.reportError({
        message: `Unhandled Promise Rejection: ${event.reason}`,
        stack: event.reason?.stack,
        url: window.location.href,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString(),
        sessionId: this.sessionId,
      });
    });

    // React error boundary integration
    this.monitorReactErrors();
  }

  private async reportError(error: ErrorReport): Promise<void> {
    try {
      await fetch('/api/errors', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(error),
      });
    } catch (reportingError) {
      console.error('Failed to report error:', reportingError);
    }
  }

  private monitorReactErrors(): void {
    const originalConsoleError = console.error;
    console.error = (...args) => {
      const message = args.join(' ');
      if (message.includes('React')) {
        this.reportError({
          message: `React Error: ${message}`,
          url: window.location.href,
          userAgent: navigator.userAgent,
          timestamp: new Date().toISOString(),
          sessionId: this.sessionId,
        });
      }
      originalConsoleError.apply(console, args);
    };
  }
}

// Initialize in production only
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {
  new ErrorTracker();
}
```

## Caching Strategy

### CDN Configuration

Configure caching headers for optimal performance:

```typescript
// next.config.js
module.exports = {
  async headers() {
    return [
      {
        source: '/fonts/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {
        source: '/_next/static/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {
        source: '/(.*).html',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=3600, must-revalidate',
          },
        ],
      },
    ];
  },
};
```

### Service Worker

Implement service worker for offline support:

```typescript
// public/sw.js
const CACHE_NAME = 'docs-v1';
const STATIC_CACHE = [
  '/',
  '/docs',
  '/_next/static/css/app.css',
  '/_next/static/js/app.js',
  '/fonts/MapleMono-NF-CN-Regular.woff2',
];

self.addEventListener('install', (event) => {
  event.waitUntil(caches.open(CACHE_NAME).then((cache) => cache.addAll(STATIC_CACHE)));
});

self.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET') return;

  event.respondWith(
    caches.match(event.request).then((response) => {
      if (response) return response;

      return fetch(event.request).then((response) => {
        const responseClone = response.clone();
        caches.open(CACHE_NAME).then((cache) => cache.put(event.request, responseClone));
        return response;
      });
    })
  );
});
```

## Database and API Setup

### API Rate Limiting

Implement rate limiting for API endpoints:

```typescript
// lib/rate-limit.ts
import { NextRequest, NextResponse } from 'next/server';

interface RateLimitConfig {
  interval: number; // Time window in milliseconds
  uniqueTokenPerInterval: number; // Max requests per interval
}

const rateLimitMap = new Map();

export function rateLimit(config: RateLimitConfig) {
  return async (req: NextRequest) => {
    const token = req.ip || 'anonymous';
    const tokenCount = rateLimitMap.get(token) || [0, Date.now()];

    if (Date.now() - tokenCount[1] > config.interval) {
      rateLimitMap.set(token, [1, Date.now()]);
    } else {
      tokenCount[0]++;
      if (tokenCount[0] > config.uniqueTokenPerInterval) {
        return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 });
      }
      rateLimitMap.set(token, tokenCount);
    }

    return null; // Continue to handler
  };
}

// Usage in API routes
const limiter = rateLimit({
  interval: 60 * 1000, // 1 minute
  uniqueTokenPerInterval: 10, // 10 requests per minute
});

export async function POST(req: NextRequest) {
  const limitResult = await limiter(req);
  if (limitResult) return limitResult;

  // Handle request
}
```

### Database Connection

Optimize database connections:

```typescript
// lib/database.ts
import { Pool } from 'pg';

// Connection pooling for PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20, // Maximum number of connections
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

export async function query(text: string, params?: any[]) {
  const start = Date.now();

  try {
    const result = await pool.query(text, params);
    const duration = Date.now() - start;

    // Log slow queries
    if (duration > 1000) {
      console.warn(`Slow query detected: ${duration}ms`, { text, params });
    }

    return result;
  } catch (error) {
    console.error('Database query error:', error);
    throw error;
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  pool.end(() => {
    console.log('Database pool closed');
    process.exit(0);
  });
});
```

## Backup and Recovery

### Content Backup

Implement automated content backup:

```typescript
// scripts/backup-content.ts
import fs from 'fs';
import path from 'path';
import archiver from 'archiver';

async function backupContent() {
  const contentDir = path.join(process.cwd(), 'app/docs/content');
  const backupDir = path.join(process.cwd(), 'backups');
  const timestamp = new Date().toISOString().replace(/:/g, '-');
  const backupFile = path.join(backupDir, `content-backup-${timestamp}.zip`);

  // Ensure backup directory exists
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }

  const output = fs.createWriteStream(backupFile);
  const archive = archiver('zip', { zlib: { level: 9 } });

  return new Promise((resolve, reject) => {
    output.on('close', () => {
      console.log(`Backup created: ${backupFile} (${archive.pointer()} bytes)`);
      resolve(backupFile);
    });

    archive.on('error', reject);
    archive.pipe(output);
    archive.directory(contentDir, false);
    archive.finalize();
  });
}

// Run backup
if (require.main === module) {
  backupContent().catch(console.error);
}
```

### Database Backup

Automate database backups:

```bash
#!/bin/bash
# scripts/backup-db.sh

TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_DIR="./backups/db"
BACKUP_FILE="$BACKUP_DIR/backup_$TIMESTAMP.sql"

# Create backup directory
mkdir -p $BACKUP_DIR

# Create database backup
pg_dump $DATABASE_URL > $BACKUP_FILE

# Compress backup
gzip $BACKUP_FILE

# Keep only last 30 backups
find $BACKUP_DIR -name "backup_*.sql.gz" -type f -mtime +30 -delete

echo "Database backup completed: $BACKUP_FILE.gz"
```

## Deployment Checklist

### Pre-deployment

- [ ] **Environment variables** configured
- [ ] **Build succeeds** without warnings
- [ ] **All tests pass** (unit, integration, e2e)
- [ ] **Security scan** completed
- [ ] **Performance audit** with Lighthouse
- [ ] **Accessibility audit** completed
- [ ] **Content review** completed
- [ ] **Backup** created

### Post-deployment

- [ ] **Smoke tests** pass
- [ ] **Performance metrics** within targets
- [ ] **Error rates** normal
- [ ] **CDN** cache populated
- [ ] **Analytics** tracking
- [ ] **Search engines** notified
- [ ] **Team** notified

### Rollback Preparation

- [ ] **Previous version** tagged
- [ ] **Rollback procedure** documented
- [ ] **Database migration** reversible
- [ ] **Feature flags** configured
- [ ] **Monitoring** alerts configured

## Advanced Configuration

### Multi-environment Setup

Configure different environments:

```typescript
// lib/config.ts
interface Config {
  apiUrl: string;
  databaseUrl: string;
  cacheEnabled: boolean;
  analyticsEnabled: boolean;
}

const configs: Record<string, Config> = {
  development: {
    apiUrl: 'http://localhost:3000/api',
    databaseUrl: process.env.DEV_DATABASE_URL!,
    cacheEnabled: false,
    analyticsEnabled: false,
  },
  staging: {
    apiUrl: 'https://staging-docs.yoursite.com/api',
    databaseUrl: process.env.STAGING_DATABASE_URL!,
    cacheEnabled: true,
    analyticsEnabled: false,
  },
  production: {
    apiUrl: 'https://docs.yoursite.com/api',
    databaseUrl: process.env.DATABASE_URL!,
    cacheEnabled: true,
    analyticsEnabled: true,
  },
};

export const config = configs[process.env.NODE_ENV] || configs.development;
```

### Feature Flags

Implement feature flag system:

```typescript
// lib/feature-flags.ts
interface FeatureFlags {
  newMindMap: boolean
  darkModeToggle: boolean
  searchFilters: boolean
  commentSystem: boolean
}

export class FeatureFlagManager {
  private flags: FeatureFlags

  constructor() {
    this.flags = {
      newMindMap: process.env.FEATURE_NEW_MINDMAP === 'true',
      darkModeToggle: process.env.FEATURE_DARK_MODE === 'true',
      searchFilters: process.env.FEATURE_SEARCH_FILTERS === 'true',
      commentSystem: process.env.FEATURE_COMMENTS === 'true'
    }
  }

  isEnabled(flag: keyof FeatureFlags): boolean {
    return this.flags[flag] || false
  }
}

export const featureFlags = new FeatureFlagManager()

// Usage in components
function DocumentationGraph() {
  const useNewMindMap = featureFlags.isEnabled('newMindMap')

  return useNewMindMap ? <NewMindMap /> : <LegacyMindMap />
}
```

## Next Steps

- **[Platform-specific guides](./platforms/cloudflare)** - Detailed deployment instructions
- **[Monitoring setup](../user-guide/troubleshooting)** - Error tracking and analytics
- **[Security best practices](../developer-guides/best-practices)** - Advanced security configuration


---


## Platform Guides


### Cloudflare

URL: /docs/deployment/platforms/cloudflare

# Deploying to Cloudflare Pages

Cloudflare Pages is the **recommended hosting platform** for this documentation template. It offers excellent performance, global CDN, automatic SSL, and seamless integration with GitHub.

## Why Cloudflare Pages?

✅ **Free Tier**: Generous limits for documentation sites  
✅ **Global CDN**: Ultra-fast loading worldwide  
✅ **Automatic SSL**: HTTPS enabled by default  
✅ **Git Integration**: Deploy automatically from GitHub  
✅ **Preview Deployments**: Test changes before going live  
✅ **Custom Domains**: Use your own domain for free  
✅ **Edge Functions**: Add server-side functionality

## Prerequisites

Before deploying, ensure you have:

- A **GitHub repository** with your documentation site
- A **Cloudflare account** (free at [cloudflare.com](https://cloudflare.com))
- Your site **builds successfully** locally with `npm run build`

## Deployment Steps

### Step 1: Connect Your Repository

1. **Sign in to Cloudflare**
   - Go to [dash.cloudflare.com](https://dash.cloudflare.com)
   - Navigate to **Pages** in the sidebar

2. **Create a New Project**
   - Click **"Create a project"**
   - Select **"Connect to Git"**
   - Choose **GitHub** as your Git provider

3. **Authorize Cloudflare**
   - Click **"Connect GitHub"**
   - Authorize Cloudflare to access your repositories
   - Select the repository containing your documentation site

### Step 2: Configure Build Settings

Configure your project with these **exact settings**:

```yaml
# Build Configuration
Build command: npm run build
Build output directory: .next
Root directory: / (leave empty)

# Environment Variables
NODE_VERSION: 18
NPM_VERSION: 9
```

**Important Build Settings:**

- **Framework preset**: Next.js (Static HTML Export)
- **Node.js version**: 18 or higher
- **Build command**: `npm run build`
- **Build directory**: `.next`

### Step 3: Set Environment Variables

Add these environment variables in the Cloudflare Pages dashboard:

```bash
# Required for Next.js build
NODE_ENV=production
NEXT_TELEMETRY_DISABLED=1

# Optional: Custom configuration
NEXT_PUBLIC_SITE_NAME=Your Documentation Site
NEXT_PUBLIC_SITE_URL=https://your-domain.pages.dev
```

To add environment variables:

1. Go to your project in Cloudflare Pages
2. Click **Settings** → **Environment variables**
3. Add each variable with **Production** scope

### Step 4: Advanced Configuration

Create a `next.config.js` file optimized for Cloudflare:

```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Enable static export for Cloudflare Pages
  output: 'export',

  // Disable image optimization for static export
  images: {
    unoptimized: true,
  },

  // Optional: Add base path if deploying to subdirectory
  // basePath: '/docs',

  // Trailing slash for better static hosting
  trailingSlash: true,

  // Optimize for static hosting
  exportPathMap: async function (defaultPathMap) {
    return {
      '/': { page: '/' },
      '/docs': { page: '/docs' },
      // Add other routes as needed
    };
  },
};

module.exports = nextConfig;
```

### Step 5: Deploy

1. **Trigger Deployment**
   - Cloudflare automatically builds when you push to your main branch
   - Or click **"Deploy site"** in the dashboard

2. **Monitor Build**
   - Watch the build log in real-time
   - Typical build time: 2-5 minutes

3. **Access Your Site**
   - Your site will be available at: `https://your-project.pages.dev`
   - Cloudflare provides a random subdomain

## Custom Domain Setup

### Step 1: Add Custom Domain

1. **In Cloudflare Pages**
   - Go to your project
   - Click **Custom domains** tab
   - Click **"Set up a custom domain"**

2. **Enter Your Domain**
   - Type your domain (e.g., `docs.yourdomain.com`)
   - Click **"Continue"**

### Step 2: DNS Configuration

**Option A: Domain managed by Cloudflare**

```bash
# DNS records are added automatically
# Just verify the CNAME record exists
```

**Option B: External DNS provider**

```bash
# Add this CNAME record to your DNS provider:
Type: CNAME
Name: docs (or your subdomain)
Value: your-project.pages.dev
TTL: Auto (or 300)
```

### Step 3: SSL Certificate

- SSL certificates are **automatically provisioned**
- Usually takes 10-15 minutes to activate
- Supports wildcard certificates for subdomains

## Automatic Deployments

### Branch-based Deployments

Configure automatic deployments:

```yaml
# Production Branch: main
# Preview Branches: develop, staging, feature/*

# Every push to 'main' → Production deployment
# Every push to other branches → Preview deployment
```

### Preview Deployments

Each pull request gets a unique preview URL:

- `https://pr-123.your-project.pages.dev`
- Perfect for testing changes before merging
- Automatically deleted when PR is closed

## Performance Optimization

### Build Optimization

Optimize your build for faster deployments:

```json
{
  "scripts": {
    "build": "next build",
    "build:analyze": "ANALYZE=true next build",
    "build:static": "next build && next export"
  }
}
```

### Cloudflare Features

Enable these Cloudflare features for better performance:

1. **Auto Minify**
   - Dashboard → Speed → Optimization
   - Enable JavaScript, CSS, and HTML minification

2. **Brotli Compression**
   - Automatically enabled for Pages
   - Better compression than gzip

3. **HTTP/3**
   - Enabled by default
   - Faster connection establishment

## Monitoring and Analytics

### Built-in Analytics

Cloudflare provides free analytics:

- **Page views** and **unique visitors**
- **Geographic distribution**
- **Performance metrics**
- **Error tracking**

Access analytics:

1. Go to your Pages project
2. Click **Analytics** tab
3. View real-time and historical data

### Web Analytics (Enhanced)

For more detailed analytics:

1. Enable **Cloudflare Web Analytics**
2. Add the tracking script to your site
3. Get detailed user behavior insights

## Troubleshooting

### Common Build Issues

**Build fails with "Command not found"**

```bash
# Solution: Ensure package.json has correct scripts
{
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start"
  }
}
```

**Static export fails**

```bash
# Solution: Check next.config.js settings
module.exports = {
  output: 'export',
  images: { unoptimized: true }
}
```

**404 errors on page refresh**

```bash
# Solution: Add _redirects file to public folder
/* /index.html 200
```

### Performance Issues

**Slow build times**

```bash
# Solutions:
1. Enable Cloudflare build cache
2. Optimize dependencies
3. Use lighter base Docker image
```

**Large bundle size**

```bash
# Solutions:
1. Run: npm run build:analyze
2. Remove unused dependencies
3. Enable tree shaking
```

## Advanced Features

### Edge Functions

Add server-side functionality with Cloudflare Workers:

```javascript
// functions/api/hello.js
export function onRequest(context) {
  return new Response('Hello from the edge!');
}
```

### Headers and Redirects

Create `public/_headers` and `public/_redirects`:

```bash
# _headers
/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  Referrer-Policy: strict-origin-when-cross-origin

# _redirects
/old-path/* /new-path/:splat 301
/docs/* /documentation/:splat 301
```

## Cost Considerations

### Free Plan Limits

Cloudflare Pages Free Plan includes:

- **Unlimited requests**
- **Unlimited bandwidth**
- **500 builds per month**
- **20,000 files per deployment**
- **25MB file size limit**

### Pro Plan Benefits ($20/month)

If you need more:

- **5,000 builds per month**
- **Additional collaborators**
- **Enhanced security features**
- **Priority support**

## Best Practices

### Repository Structure

```
your-docs-repo/
├── .github/workflows/    # GitHub Actions (optional)
├── app/                  # Next.js app
├── public/              # Static assets
├── package.json         # Dependencies
├── next.config.js       # Next.js config
└── README.md           # Documentation
```

### Environment Management

- Use **production** environment variables for live site
- Use **preview** environment variables for testing
- Never commit sensitive data to repository

### Security

- Enable **bot fight mode** in Cloudflare
- Use **security headers** for protection
- Regularly update dependencies

Your documentation site is now live on Cloudflare Pages! 🚀

**Next Steps:**

- [Set up custom domain](../overview#custom-domains)
- [Configure analytics](../production-setup#analytics)
- [Optimize performance](../production-setup#performance)


---


### Vercel

URL: /docs/deployment/platforms/vercel

# Vercel Deployment

Complete guide to deploying your documentation site on Vercel.

## Quick Start

### 1. Install Vercel CLI

```bash
npm install -g vercel
```

### 2. Login to Vercel

```bash
vercel login
```

### 3. Deploy

```bash
vercel --prod
```

## Automatic GitHub Deployment

### 1. Connect Repository

1. Go to [Vercel Dashboard](https://vercel.com/dashboard)
2. Click **"New Project"**
3. Import your GitHub repository
4. Configure build settings

### 2. Build Configuration

Vercel auto-detects Next.js projects, but you can customize:

```json
{
  "buildCommand": "npm run build",
  "outputDirectory": "out",
  "installCommand": "npm ci",
  "devCommand": "npm run dev"
}
```

### 3. Environment Variables

Add environment variables in Vercel dashboard:

- `NEXT_PUBLIC_SITE_URL=https://your-site.vercel.app`
- `NEXT_PUBLIC_BACKGROUND_TYPE=dither`
- `NODE_VERSION=18`

## Custom Domain Setup

### 1. Add Domain

In Vercel dashboard:

1. Go to project **Settings** → **Domains**
2. Add your custom domain
3. Configure DNS records

### 2. DNS Configuration

For `docs.yoursite.com`:

```
CNAME docs.yoursite.com cname.vercel-dns.com
```

For root domain `yoursite.com`:

```
A @ 76.76.19.19
AAAA @ 2606:4700:4700::1111
```

### 3. SSL Certificate

Vercel automatically provisions SSL certificates via Let's Encrypt.

## Advanced Configuration

### vercel.json

Create `vercel.json` for advanced configuration:

```json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "out"
      }
    }
  ],
  "routes": [
    {
      "src": "/docs/(.*)",
      "dest": "/docs/$1"
    },
    {
      "src": "/(.*)",
      "dest": "/$1"
    }
  ],
  "headers": [
    {
      "source": "/fonts/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ]
    },
    {
      "source": "/_next/static/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ]
    }
  ],
  "redirects": [
    {
      "source": "/old-docs/(.*)",
      "destination": "/docs/$1",
      "permanent": true
    }
  ]
}
```

### Security Headers

Add security headers:

```json
{
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=31536000; includeSubDomains"
        }
      ]
    }
  ]
}
```

## Environment Configuration

### Development Environment

```bash
# .env.local
NEXT_PUBLIC_SITE_URL=http://localhost:3000
NEXT_PUBLIC_BACKGROUND_TYPE=wave
```

### Production Environment

Set in Vercel dashboard:

```bash
NEXT_PUBLIC_SITE_URL=https://docs.yoursite.com
NEXT_PUBLIC_BACKGROUND_TYPE=dither
NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
NODE_ENV=production
```

### Environment-specific Builds

```javascript
// next.config.js
module.exports = {
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },

  // Different configs per environment
  ...(process.env.VERCEL_ENV === 'production' && {
    // Production-only config
    productionBrowserSourceMaps: false,
  }),

  ...(process.env.VERCEL_ENV === 'preview' && {
    // Preview/staging config
    basePath: process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : '',
  }),
};
```

## Performance Optimization

### Edge Network

Vercel automatically distributes your site globally:

- **Global CDN** with 40+ edge locations
- **Smart routing** to nearest edge
- **Automatic compression** (Gzip/Brotli)

### Image Optimization

Enable Vercel's image optimization:

```typescript
// next.config.js
module.exports = {
  images: {
    domains: ['example.com'],
    formats: ['image/avif', 'image/webp'],

    // For static export, disable optimization
    unoptimized: process.env.VERCEL_ENV !== 'production',
  },
};
```

### Analytics Integration

Enable Vercel Analytics:

```bash
npm install @vercel/analytics
```

```typescript
// pages/_app.tsx
import { Analytics } from '@vercel/analytics/react'

export default function App({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <Analytics />
    </>
  )
}
```

## Branch Deployments

### Preview Deployments

Vercel creates preview deployments for every push:

- **Feature branches** get unique URLs
- **Pull requests** include deployment previews
- **Staging** environments for testing

### Branch-specific Configuration

```json
{
  "github": {
    "deploymentEnabled": {
      "main": true,
      "staging": true
    }
  },
  "alias": [
    {
      "domain": "docs-staging.yoursite.com",
      "deployment": {
        "VERCEL_GIT_COMMIT_REF": "staging"
      }
    }
  ]
}
```

## CI/CD Integration

### GitHub Actions with Vercel

```yaml
# .github/workflows/vercel.yml
name: Vercel Deployment

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
```

### Custom Build Scripts

```json
{
  "scripts": {
    "build": "next build",
    "build:vercel": "npm run test && npm run build",
    "vercel-build": "npm run build:vercel"
  }
}
```

## Monitoring and Debugging

### Vercel Functions Logs

Monitor function execution:

```bash
# View logs
vercel logs

# Tail logs in real-time
vercel logs --follow
```

### Performance Monitoring

Track Core Web Vitals:

```typescript
// lib/vercel-analytics.ts
export function reportWebVitals(metric: any) {
  // Vercel Analytics
  if (window.va) {
    window.va('track', 'web-vital', {
      name: metric.name,
      value: metric.value,
      id: metric.id,
    });
  }

  // Custom tracking
  fetch('/api/analytics', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(metric),
  });
}
```

### Error Tracking

```typescript
// lib/error-tracking.ts
export function setupErrorTracking() {
  if (typeof window === 'undefined') return;

  window.addEventListener('error', (event) => {
    fetch('/api/errors', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        stack: event.error?.stack,
        url: window.location.href,
        userAgent: navigator.userAgent,
      }),
    });
  });
}
```

## Database Integration

### Vercel Storage Options

1. **Vercel Postgres** - Serverless PostgreSQL
2. **Vercel KV** - Redis-compatible key-value store
3. **Vercel Blob** - File storage

### Example: Vercel KV Setup

```bash
npm install @vercel/kv
```

```typescript
// lib/kv.ts
import { kv } from '@vercel/kv';

export async function getCachedData(key: string) {
  return await kv.get(key);
}

export async function setCachedData(key: string, data: any, ttl = 3600) {
  return await kv.setex(key, ttl, JSON.stringify(data));
}

// Usage in API routes
export async function GET(request: Request) {
  const cached = await getCachedData('docs-data');

  if (cached) {
    return Response.json(JSON.parse(cached));
  }

  const data = await fetchDocumentationData();
  await setCachedData('docs-data', data);

  return Response.json(data);
}
```

## Troubleshooting

### Common Issues

**Build Failures:**

```bash
# Check build logs
vercel logs --since 1h

# Local build test
npm run build
```

**Domain Configuration:**

```bash
# Verify DNS propagation
dig docs.yoursite.com

# Check certificate status
curl -I https://docs.yoursite.com
```

**Function Timeouts:**

```typescript
// Increase timeout in vercel.json
{
  "functions": {
    "app/api/**/*.ts": {
      "maxDuration": 30
    }
  }
}
```

### Debug Mode

Enable debug logging:

```bash
# Environment variable
DEBUG=1 vercel dev

# Or in vercel.json
{
  "env": {
    "DEBUG": "1"
  }
}
```

### Performance Issues

**Slow builds:**

```json
{
  "installCommand": "npm ci --prefer-offline",
  "buildCommand": "npm run build --max-old-space-size=4096"
}
```

**Large bundle size:**

```bash
# Analyze bundle
npm run build && npx @next/bundle-analyzer
```

## Cost Optimization

### Free Tier Limits

Vercel Hobby plan includes:

- **100GB** bandwidth per month
- **1000** build executions per month
- **10GB-hours** function execution time

### Pro Plan Benefits

For production sites:

- **1TB** bandwidth
- **Advanced analytics**
- **Team collaboration**
- **Priority support**

### Optimization Tips

1. **Static Generation** - Use `getStaticProps` for pre-rendering
2. **Image Optimization** - Use Next.js Image component
3. **Bundle Analysis** - Regular bundle size monitoring
4. **Caching** - Implement proper cache headers

## Security Best Practices

### Environment Variables

- Use Vercel dashboard for secrets
- Different configs per environment
- Never commit sensitive data

### Content Security Policy

```typescript
// middleware.ts
export function middleware(request: NextRequest) {
  const response = NextResponse.next();

  response.headers.set(
    'Content-Security-Policy',
    "default-src 'self'; script-src 'self' 'unsafe-inline' vercel.live"
  );

  return response;
}
```

### Rate Limiting

```typescript
// lib/rate-limit.ts
import { kv } from '@vercel/kv';

export async function rateLimit(request: Request) {
  const ip = request.headers.get('x-forwarded-for') || 'anonymous';
  const key = `rate_limit:${ip}`;

  const current = await kv.incr(key);

  if (current === 1) {
    await kv.expire(key, 60); // 1 minute window
  }

  if (current > 60) {
    // 60 requests per minute
    throw new Error('Rate limit exceeded');
  }
}
```

## Migration Guide

### From Other Platforms

**From Netlify:**

1. Export existing build configuration
2. Update `vercel.json` with redirects/headers
3. Migrate environment variables
4. Update DNS records

**From Cloudflare Pages:**

1. Import Git repository
2. Configure build settings
3. Set up custom domains
4. Update CI/CD workflows

### Zero-downtime Migration

1. **Set up Vercel** deployment alongside existing
2. **Test thoroughly** on preview URL
3. **Update DNS** with low TTL
4. **Monitor** for issues
5. **Rollback** if needed

## Next Steps

- **[Netlify Deployment](./netlify)** - Alternative platform guide
- **[Production Setup](../production-setup)** - Advanced configuration
- **[Monitoring](../../user-guide/troubleshooting)** - Error tracking and analytics


---


### Netlify

URL: /docs/deployment/platforms/netlify

# Netlify Deployment

Complete guide to deploying your documentation site on Netlify.

## Quick Start

### 1. Install Netlify CLI

```bash
npm install -g netlify-cli
```

### 2. Login to Netlify

```bash
netlify login
```

### 3. Deploy

```bash
netlify deploy --prod --dir=out
```

## Automatic GitHub Deployment

### 1. Connect Repository

1. Go to [Netlify Dashboard](https://app.netlify.com)
2. Click **"New site from Git"**
3. Connect your GitHub repository
4. Configure build settings

### 2. Build Configuration

Configure build settings in Netlify dashboard:

```bash
# Build command
npm run build

# Publish directory
out

# Environment variables
NODE_VERSION=18
NEXT_PUBLIC_SITE_URL=https://your-site.netlify.app
```

### 3. netlify.toml Configuration

Create `netlify.toml` for advanced configuration:

```toml
[build]
  publish = "out"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "18"
  NPM_VERSION = "8"

[[redirects]]
  from = "/old-docs/*"
  to = "/docs/:splat"
  status = 301

[[redirects]]
  from = "/docs/*"
  to = "/docs/:splat"
  status = 200

[[headers]]
  for = "/fonts/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/_next/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"
```

## Custom Domain Setup

### 1. Add Domain

In Netlify dashboard:

1. Go to **Site settings** → **Domain management**
2. Add custom domain
3. Configure DNS

### 2. DNS Configuration

For `docs.yoursite.com`:

```
CNAME docs.yoursite.com your-site.netlify.app
```

For root domain with Netlify DNS:

```
A @ 75.2.60.5
AAAA @ 2600:1800:4000:1::
```

### 3. SSL Certificate

Netlify provides automatic HTTPS with Let's Encrypt certificates.

## Environment Configuration

### Development Environment

```bash
# .env.local
NEXT_PUBLIC_SITE_URL=http://localhost:3000
NEXT_PUBLIC_BACKGROUND_TYPE=wave
```

### Production Environment

Set in Netlify dashboard under **Site settings** → **Environment variables**:

```bash
NEXT_PUBLIC_SITE_URL=https://docs.yoursite.com
NEXT_PUBLIC_BACKGROUND_TYPE=dither
NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX
NODE_ENV=production
```

### Branch-specific Variables

```toml
# netlify.toml
[context.production.environment]
  NEXT_PUBLIC_ENVIRONMENT = "production"

[context.deploy-preview.environment]
  NEXT_PUBLIC_ENVIRONMENT = "preview"

[context.branch-deploy.environment]
  NEXT_PUBLIC_ENVIRONMENT = "development"
```

## Advanced Features

### Form Handling

Netlify provides built-in form handling:

```html
<!-- Contact form example -->
<form name="contact" method="POST" data-netlify="true">
  <input type="hidden" name="form-name" value="contact" />
  <p>
    <label>Name: <input type="text" name="name" required /></label>
  </p>
  <p>
    <label>Email: <input type="email" name="email" required /></label>
  </p>
  <p>
    <label>Message: <textarea name="message" required></textarea></label>
  </p>
  <p>
    <button type="submit">Send</button>
  </p>
</form>
```

### Serverless Functions

Create serverless functions for dynamic features:

```typescript
// netlify/functions/api.ts
import { Handler } from '@netlify/functions';

export const handler: Handler = async (event, context) => {
  const { httpMethod, path, body } = event;

  if (httpMethod === 'POST' && path === '/api/contact') {
    const data = JSON.parse(body || '{}');

    // Process form submission
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ success: true }),
    };
  }

  return {
    statusCode: 404,
    body: JSON.stringify({ error: 'Not found' }),
  };
};
```

### Analytics Integration

Enable Netlify Analytics:

```toml
# netlify.toml
[build]
  command = "npm run build"

[build.environment]
  NETLIFY_ANALYTICS = "true"
```

## Performance Optimization

### Asset Optimization

Netlify automatically provides:

- **Global CDN** with 100+ edge locations
- **Image optimization** with automatic WebP conversion
- **Asset minification** for CSS and JS
- **Brotli compression**

### Build Optimization

Optimize build performance:

```toml
[build]
  command = "npm ci && npm run build"

[build.environment]
  NODE_OPTIONS = "--max-old-space-size=4096"
  NPM_CONFIG_PRODUCTION = "false"
```

### Caching Strategy

Configure intelligent caching:

```toml
[[headers]]
  for = "/*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.html"
  [headers.values]
    Cache-Control = "public, max-age=3600, must-revalidate"
```

## Branch Deployments

### Deploy Previews

Netlify creates deploy previews for:

- **Pull requests** get unique URLs
- **Branch deploys** for feature testing
- **Split testing** capabilities

### Branch-specific Configuration

```toml
# Production
[context.production]
  command = "npm run build:production"

# Deploy previews
[context.deploy-preview]
  command = "npm run build:preview"

# Branch deploys
[context.branch-deploy]
  command = "npm run build:development"
```

## CI/CD Integration

### GitHub Actions with Netlify

```yaml
# .github/workflows/netlify.yml
name: Netlify Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
```

### Netlify Build Plugins

Use build plugins for enhanced functionality:

```toml
# netlify.toml
[[plugins]]
  package = "@netlify/plugin-lighthouse"

  [plugins.inputs.thresholds]
    performance = 0.9
    accessibility = 0.9
    best-practices = 0.9
    seo = 0.9

[[plugins]]
  package = "netlify-plugin-submit-sitemap"

  [plugins.inputs]
    baseUrl = "https://docs.yoursite.com"
    sitemapPath = "/sitemap.xml"
    providers = [
      "google",
      "bing"
    ]
```

## Monitoring and Analytics

### Netlify Analytics

Built-in server-side analytics:

- **Page views** and unique visitors
- **Top pages** and referrers
- **Bandwidth** usage
- **Geographic** distribution

### Performance Monitoring

Track Core Web Vitals:

```typescript
// lib/netlify-analytics.ts
export function reportWebVitals(metric: any) {
  // Netlify Analytics (built-in)
  if (window.netlifyAnalytics) {
    window.netlifyAnalytics.track('web-vital', {
      name: metric.name,
      value: metric.value,
      id: metric.id,
    });
  }

  // Custom tracking
  fetch('/.netlify/functions/analytics', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(metric),
  });
}
```

### Error Tracking

```typescript
// netlify/functions/error-tracking.ts
import { Handler } from '@netlify/functions';

export const handler: Handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  const error = JSON.parse(event.body || '{}');

  // Log error (could send to external service)
  console.error('Client error:', error);

  return {
    statusCode: 200,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ received: true }),
  };
};
```

## Security Features

### Security Headers

Comprehensive security configuration:

```toml
[[headers]]
  for = "/*"
  [headers.values]
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: https:; connect-src 'self' https://www.google-analytics.com"
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
    Permissions-Policy = "camera=(), microphone=(), geolocation=()"
```

### Access Control

Protect sensitive areas:

```toml
# Password protect staging
[[context.branch-deploy.headers]]
  for = "/*"
  [context.branch-deploy.headers.values]
    Basic-Auth = "staging:$STAGING_PASSWORD"

# IP restrictions (Netlify Pro)
[[headers]]
  for = "/admin/*"
  [headers.values]
    X-Forwarded-For = "192.168.1.0/24"
```

## Form Processing

### Contact Forms

Process form submissions:

```typescript
// netlify/functions/contact.ts
import { Handler } from '@netlify/functions';

export const handler: Handler = async (event) => {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  const { name, email, message } = JSON.parse(event.body || '{}');

  // Validate input
  if (!name || !email || !message) {
    return {
      statusCode: 400,
      body: JSON.stringify({ error: 'Missing required fields' }),
    };
  }

  // Process form (send email, save to database, etc.)
  try {
    await sendEmail({ name, email, message });

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ success: true }),
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: 'Failed to send message' }),
    };
  }
};
```

### Spam Protection

Implement spam protection:

```html
<!-- Honeypot field -->
<form name="contact" method="POST" data-netlify="true">
  <input type="hidden" name="form-name" value="contact" />

  <!-- Honeypot (hidden from users) -->
  <p style="display: none;">
    <input name="bot-field" />
  </p>

  <!-- reCAPTCHA -->
  <div data-netlify-recaptcha="true"></div>

  <button type="submit">Send</button>
</form>
```

## Database Integration

### Netlify Databases

Integration options:

1. **FaunaDB** - Serverless, globally distributed
2. **MongoDB Atlas** - Cloud MongoDB
3. **Supabase** - Open source Firebase alternative
4. **PlanetScale** - Serverless MySQL

### Example: FaunaDB Integration

```typescript
// lib/fauna.ts
import faunadb from 'faunadb';

const client = new faunadb.Client({
  secret: process.env.FAUNA_SECRET_KEY!,
});

export async function getDocuments() {
  const query = faunadb.query;

  try {
    const result = await client.query(
      query.Map(
        query.Paginate(query.Documents(query.Collection('documents'))),
        query.Lambda('ref', query.Get(query.Var('ref')))
      )
    );

    return result;
  } catch (error) {
    console.error('Fauna query error:', error);
    throw error;
  }
}
```

## Troubleshooting

### Common Issues

**Build Failures:**

```bash
# Check build logs in Netlify dashboard
# Or use CLI
netlify build --debug
```

**Routing Issues:**

```toml
# Fix SPA routing
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
  conditions = {Role = ["admin"]}
```

**Function Errors:**

```bash
# Test functions locally
netlify dev
```

### Debug Mode

Enable debug logging:

```toml
[build]
  command = "DEBUG=* npm run build"

[build.environment]
  DEBUG = "netlify*"
```

### Performance Issues

**Slow builds:**

```toml
[build]
  command = "npm ci --prefer-offline && npm run build"

[build.environment]
  NPM_CONFIG_PREFER_OFFLINE = "true"
  NPM_CONFIG_CACHE = ".npm"
```

## Cost Optimization

### Free Tier Limits

Netlify free plan includes:

- **100GB** bandwidth per month
- **300** build minutes per month
- **125k** serverless function invocations

### Pro Plan Benefits

For production sites:

- **1TB** bandwidth
- **Advanced build features**
- **Analytics and forms**
- **Identity and Git Gateway**

### Optimization Tips

1. **Build optimization** - Efficient dependency installation
2. **Function efficiency** - Optimize serverless functions
3. **Asset compression** - Use built-in optimization
4. **Caching** - Proper cache headers

## Migration Guide

### From Other Platforms

**From Vercel:**

1. Export build configuration
2. Convert `vercel.json` to `netlify.toml`
3. Migrate environment variables
4. Update DNS records

**From GitHub Pages:**

1. Import repository to Netlify
2. Configure build command
3. Set up custom domain
4. Update DNS

### Zero-downtime Migration

1. **Set up Netlify** deployment in parallel
2. **Test thoroughly** on deploy preview
3. **Configure domain** with DNS failover
4. **Monitor** performance and errors
5. **Rollback** if issues occur

## Best Practices

### Performance

- Use build plugins for optimization
- Implement proper caching headers
- Monitor Core Web Vitals
- Optimize images and fonts

### Security

- Configure security headers
- Use environment variables for secrets
- Implement rate limiting
- Regular security audits

### Monitoring

- Enable Netlify Analytics
- Set up error tracking
- Monitor build performance
- Track user engagement

## Next Steps

- **[Cloudflare Pages](./cloudflare)** - Alternative platform guide
- **[Production Setup](../production-setup)** - Advanced configuration
- **[Monitoring](../../user-guide/troubleshooting)** - Error tracking and analytics


---

